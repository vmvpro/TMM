'------------------------------------------------------------------------------
' <auto-generated>
'     Этот код создан программой.
'     Исполняемая версия:4.0.30319.42000
'
'     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
'     повторной генерации кода.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSet1"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSet1
    Inherits Global.System.Data.DataSet
    
    Private tabledodatok2 As dodatok2DataTable
    
    Private tableinstace As instaceDataTable
    
    Private tablelstn As lstnDataTable
    
    Private tablesqlite_sequence As sqlite_sequenceDataTable
    
    Private tablestudent As studentDataTable
    
    Private tablesys_tables As sys_tablesDataTable
    
    Private tablez3 As z3DataTable
    
    Private tablez3_acceleration As z3_accelerationDataTable
    
    Private tablez3_data As z3_dataDataTable
    
    Private tablez3_izv As z3_izvDataTable
    
    Private tablez3_mehanizm As z3_mehanizmDataTable
    
    Private tablez3_mzv As z3_mzvDataTable
    
    Private tablez3_speed As z3_speedDataTable
    
    Private tablezadania As zadaniaDataTable
    
    Private tablezd_register As zd_registerDataTable
    
    Private tablezd_student As zd_studentDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dodatok2")) Is Nothing) Then
                MyBase.Tables.Add(New dodatok2DataTable(ds.Tables("dodatok2")))
            End If
            If (Not (ds.Tables("instace")) Is Nothing) Then
                MyBase.Tables.Add(New instaceDataTable(ds.Tables("instace")))
            End If
            If (Not (ds.Tables("lstn")) Is Nothing) Then
                MyBase.Tables.Add(New lstnDataTable(ds.Tables("lstn")))
            End If
            If (Not (ds.Tables("sqlite_sequence")) Is Nothing) Then
                MyBase.Tables.Add(New sqlite_sequenceDataTable(ds.Tables("sqlite_sequence")))
            End If
            If (Not (ds.Tables("student")) Is Nothing) Then
                MyBase.Tables.Add(New studentDataTable(ds.Tables("student")))
            End If
            If (Not (ds.Tables("sys_tables")) Is Nothing) Then
                MyBase.Tables.Add(New sys_tablesDataTable(ds.Tables("sys_tables")))
            End If
            If (Not (ds.Tables("z3")) Is Nothing) Then
                MyBase.Tables.Add(New z3DataTable(ds.Tables("z3")))
            End If
            If (Not (ds.Tables("z3_acceleration")) Is Nothing) Then
                MyBase.Tables.Add(New z3_accelerationDataTable(ds.Tables("z3_acceleration")))
            End If
            If (Not (ds.Tables("z3_data")) Is Nothing) Then
                MyBase.Tables.Add(New z3_dataDataTable(ds.Tables("z3_data")))
            End If
            If (Not (ds.Tables("z3_izv")) Is Nothing) Then
                MyBase.Tables.Add(New z3_izvDataTable(ds.Tables("z3_izv")))
            End If
            If (Not (ds.Tables("z3_mehanizm")) Is Nothing) Then
                MyBase.Tables.Add(New z3_mehanizmDataTable(ds.Tables("z3_mehanizm")))
            End If
            If (Not (ds.Tables("z3_mzv")) Is Nothing) Then
                MyBase.Tables.Add(New z3_mzvDataTable(ds.Tables("z3_mzv")))
            End If
            If (Not (ds.Tables("z3_speed")) Is Nothing) Then
                MyBase.Tables.Add(New z3_speedDataTable(ds.Tables("z3_speed")))
            End If
            If (Not (ds.Tables("zadania")) Is Nothing) Then
                MyBase.Tables.Add(New zadaniaDataTable(ds.Tables("zadania")))
            End If
            If (Not (ds.Tables("zd_register")) Is Nothing) Then
                MyBase.Tables.Add(New zd_registerDataTable(ds.Tables("zd_register")))
            End If
            If (Not (ds.Tables("zd_student")) Is Nothing) Then
                MyBase.Tables.Add(New zd_studentDataTable(ds.Tables("zd_student")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dodatok2() As dodatok2DataTable
        Get
            Return Me.tabledodatok2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property instace() As instaceDataTable
        Get
            Return Me.tableinstace
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property lstn() As lstnDataTable
        Get
            Return Me.tablelstn
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sqlite_sequence() As sqlite_sequenceDataTable
        Get
            Return Me.tablesqlite_sequence
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property student() As studentDataTable
        Get
            Return Me.tablestudent
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sys_tables() As sys_tablesDataTable
        Get
            Return Me.tablesys_tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property z3() As z3DataTable
        Get
            Return Me.tablez3
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property z3_acceleration() As z3_accelerationDataTable
        Get
            Return Me.tablez3_acceleration
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property z3_data() As z3_dataDataTable
        Get
            Return Me.tablez3_data
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property z3_izv() As z3_izvDataTable
        Get
            Return Me.tablez3_izv
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property z3_mehanizm() As z3_mehanizmDataTable
        Get
            Return Me.tablez3_mehanizm
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property z3_mzv() As z3_mzvDataTable
        Get
            Return Me.tablez3_mzv
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property z3_speed() As z3_speedDataTable
        Get
            Return Me.tablez3_speed
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property zadania() As zadaniaDataTable
        Get
            Return Me.tablezadania
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property zd_register() As zd_registerDataTable
        Get
            Return Me.tablezd_register
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property zd_student() As zd_studentDataTable
        Get
            Return Me.tablezd_student
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("dodatok2")) Is Nothing) Then
                MyBase.Tables.Add(New dodatok2DataTable(ds.Tables("dodatok2")))
            End If
            If (Not (ds.Tables("instace")) Is Nothing) Then
                MyBase.Tables.Add(New instaceDataTable(ds.Tables("instace")))
            End If
            If (Not (ds.Tables("lstn")) Is Nothing) Then
                MyBase.Tables.Add(New lstnDataTable(ds.Tables("lstn")))
            End If
            If (Not (ds.Tables("sqlite_sequence")) Is Nothing) Then
                MyBase.Tables.Add(New sqlite_sequenceDataTable(ds.Tables("sqlite_sequence")))
            End If
            If (Not (ds.Tables("student")) Is Nothing) Then
                MyBase.Tables.Add(New studentDataTable(ds.Tables("student")))
            End If
            If (Not (ds.Tables("sys_tables")) Is Nothing) Then
                MyBase.Tables.Add(New sys_tablesDataTable(ds.Tables("sys_tables")))
            End If
            If (Not (ds.Tables("z3")) Is Nothing) Then
                MyBase.Tables.Add(New z3DataTable(ds.Tables("z3")))
            End If
            If (Not (ds.Tables("z3_acceleration")) Is Nothing) Then
                MyBase.Tables.Add(New z3_accelerationDataTable(ds.Tables("z3_acceleration")))
            End If
            If (Not (ds.Tables("z3_data")) Is Nothing) Then
                MyBase.Tables.Add(New z3_dataDataTable(ds.Tables("z3_data")))
            End If
            If (Not (ds.Tables("z3_izv")) Is Nothing) Then
                MyBase.Tables.Add(New z3_izvDataTable(ds.Tables("z3_izv")))
            End If
            If (Not (ds.Tables("z3_mehanizm")) Is Nothing) Then
                MyBase.Tables.Add(New z3_mehanizmDataTable(ds.Tables("z3_mehanizm")))
            End If
            If (Not (ds.Tables("z3_mzv")) Is Nothing) Then
                MyBase.Tables.Add(New z3_mzvDataTable(ds.Tables("z3_mzv")))
            End If
            If (Not (ds.Tables("z3_speed")) Is Nothing) Then
                MyBase.Tables.Add(New z3_speedDataTable(ds.Tables("z3_speed")))
            End If
            If (Not (ds.Tables("zadania")) Is Nothing) Then
                MyBase.Tables.Add(New zadaniaDataTable(ds.Tables("zadania")))
            End If
            If (Not (ds.Tables("zd_register")) Is Nothing) Then
                MyBase.Tables.Add(New zd_registerDataTable(ds.Tables("zd_register")))
            End If
            If (Not (ds.Tables("zd_student")) Is Nothing) Then
                MyBase.Tables.Add(New zd_studentDataTable(ds.Tables("zd_student")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledodatok2 = CType(MyBase.Tables("dodatok2"),dodatok2DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledodatok2) Is Nothing) Then
                Me.tabledodatok2.InitVars
            End If
        End If
        Me.tableinstace = CType(MyBase.Tables("instace"),instaceDataTable)
        If (initTable = true) Then
            If (Not (Me.tableinstace) Is Nothing) Then
                Me.tableinstace.InitVars
            End If
        End If
        Me.tablelstn = CType(MyBase.Tables("lstn"),lstnDataTable)
        If (initTable = true) Then
            If (Not (Me.tablelstn) Is Nothing) Then
                Me.tablelstn.InitVars
            End If
        End If
        Me.tablesqlite_sequence = CType(MyBase.Tables("sqlite_sequence"),sqlite_sequenceDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesqlite_sequence) Is Nothing) Then
                Me.tablesqlite_sequence.InitVars
            End If
        End If
        Me.tablestudent = CType(MyBase.Tables("student"),studentDataTable)
        If (initTable = true) Then
            If (Not (Me.tablestudent) Is Nothing) Then
                Me.tablestudent.InitVars
            End If
        End If
        Me.tablesys_tables = CType(MyBase.Tables("sys_tables"),sys_tablesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesys_tables) Is Nothing) Then
                Me.tablesys_tables.InitVars
            End If
        End If
        Me.tablez3 = CType(MyBase.Tables("z3"),z3DataTable)
        If (initTable = true) Then
            If (Not (Me.tablez3) Is Nothing) Then
                Me.tablez3.InitVars
            End If
        End If
        Me.tablez3_acceleration = CType(MyBase.Tables("z3_acceleration"),z3_accelerationDataTable)
        If (initTable = true) Then
            If (Not (Me.tablez3_acceleration) Is Nothing) Then
                Me.tablez3_acceleration.InitVars
            End If
        End If
        Me.tablez3_data = CType(MyBase.Tables("z3_data"),z3_dataDataTable)
        If (initTable = true) Then
            If (Not (Me.tablez3_data) Is Nothing) Then
                Me.tablez3_data.InitVars
            End If
        End If
        Me.tablez3_izv = CType(MyBase.Tables("z3_izv"),z3_izvDataTable)
        If (initTable = true) Then
            If (Not (Me.tablez3_izv) Is Nothing) Then
                Me.tablez3_izv.InitVars
            End If
        End If
        Me.tablez3_mehanizm = CType(MyBase.Tables("z3_mehanizm"),z3_mehanizmDataTable)
        If (initTable = true) Then
            If (Not (Me.tablez3_mehanizm) Is Nothing) Then
                Me.tablez3_mehanizm.InitVars
            End If
        End If
        Me.tablez3_mzv = CType(MyBase.Tables("z3_mzv"),z3_mzvDataTable)
        If (initTable = true) Then
            If (Not (Me.tablez3_mzv) Is Nothing) Then
                Me.tablez3_mzv.InitVars
            End If
        End If
        Me.tablez3_speed = CType(MyBase.Tables("z3_speed"),z3_speedDataTable)
        If (initTable = true) Then
            If (Not (Me.tablez3_speed) Is Nothing) Then
                Me.tablez3_speed.InitVars
            End If
        End If
        Me.tablezadania = CType(MyBase.Tables("zadania"),zadaniaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablezadania) Is Nothing) Then
                Me.tablezadania.InitVars
            End If
        End If
        Me.tablezd_register = CType(MyBase.Tables("zd_register"),zd_registerDataTable)
        If (initTable = true) Then
            If (Not (Me.tablezd_register) Is Nothing) Then
                Me.tablezd_register.InitVars
            End If
        End If
        Me.tablezd_student = CType(MyBase.Tables("zd_student"),zd_studentDataTable)
        If (initTable = true) Then
            If (Not (Me.tablezd_student) Is Nothing) Then
                Me.tablezd_student.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledodatok2 = New dodatok2DataTable()
        MyBase.Tables.Add(Me.tabledodatok2)
        Me.tableinstace = New instaceDataTable()
        MyBase.Tables.Add(Me.tableinstace)
        Me.tablelstn = New lstnDataTable()
        MyBase.Tables.Add(Me.tablelstn)
        Me.tablesqlite_sequence = New sqlite_sequenceDataTable()
        MyBase.Tables.Add(Me.tablesqlite_sequence)
        Me.tablestudent = New studentDataTable()
        MyBase.Tables.Add(Me.tablestudent)
        Me.tablesys_tables = New sys_tablesDataTable()
        MyBase.Tables.Add(Me.tablesys_tables)
        Me.tablez3 = New z3DataTable()
        MyBase.Tables.Add(Me.tablez3)
        Me.tablez3_acceleration = New z3_accelerationDataTable()
        MyBase.Tables.Add(Me.tablez3_acceleration)
        Me.tablez3_data = New z3_dataDataTable()
        MyBase.Tables.Add(Me.tablez3_data)
        Me.tablez3_izv = New z3_izvDataTable()
        MyBase.Tables.Add(Me.tablez3_izv)
        Me.tablez3_mehanizm = New z3_mehanizmDataTable()
        MyBase.Tables.Add(Me.tablez3_mehanizm)
        Me.tablez3_mzv = New z3_mzvDataTable()
        MyBase.Tables.Add(Me.tablez3_mzv)
        Me.tablez3_speed = New z3_speedDataTable()
        MyBase.Tables.Add(Me.tablez3_speed)
        Me.tablezadania = New zadaniaDataTable()
        MyBase.Tables.Add(Me.tablezadania)
        Me.tablezd_register = New zd_registerDataTable()
        MyBase.Tables.Add(Me.tablezd_register)
        Me.tablezd_student = New zd_studentDataTable()
        MyBase.Tables.Add(Me.tablezd_student)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializedodatok2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeinstace() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializelstn() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializesqlite_sequence() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializestudent() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializesys_tables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializez3() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializez3_acceleration() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializez3_data() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializez3_izv() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializez3_mehanizm() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializez3_mzv() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializez3_speed() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializezadania() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializezd_register() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializezd_student() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet1 = New DataSet1()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub dodatok2RowChangeEventHandler(ByVal sender As Object, ByVal e As dodatok2RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub instaceRowChangeEventHandler(ByVal sender As Object, ByVal e As instaceRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub lstnRowChangeEventHandler(ByVal sender As Object, ByVal e As lstnRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub sqlite_sequenceRowChangeEventHandler(ByVal sender As Object, ByVal e As sqlite_sequenceRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub studentRowChangeEventHandler(ByVal sender As Object, ByVal e As studentRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub sys_tablesRowChangeEventHandler(ByVal sender As Object, ByVal e As sys_tablesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub z3RowChangeEventHandler(ByVal sender As Object, ByVal e As z3RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub z3_accelerationRowChangeEventHandler(ByVal sender As Object, ByVal e As z3_accelerationRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub z3_dataRowChangeEventHandler(ByVal sender As Object, ByVal e As z3_dataRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub z3_izvRowChangeEventHandler(ByVal sender As Object, ByVal e As z3_izvRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub z3_mehanizmRowChangeEventHandler(ByVal sender As Object, ByVal e As z3_mehanizmRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub z3_mzvRowChangeEventHandler(ByVal sender As Object, ByVal e As z3_mzvRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub z3_speedRowChangeEventHandler(ByVal sender As Object, ByVal e As z3_speedRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub zadaniaRowChangeEventHandler(ByVal sender As Object, ByVal e As zadaniaRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub zd_registerRowChangeEventHandler(ByVal sender As Object, ByVal e As zd_registerRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub zd_studentRowChangeEventHandler(ByVal sender As Object, ByVal e As zd_studentRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dodatok2DataTable
        Inherits Global.System.Data.TypedTableBase(Of dodatok2Row)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columndigit_year As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columnw2 As Global.System.Data.DataColumn
        
        Private columndelta As Global.System.Data.DataColumn
        
        Private columndif As Global.System.Data.DataColumn
        
        Private columnh As Global.System.Data.DataColumn
        
        Private columnzi As Global.System.Data.DataColumn
        
        Private columnzm As Global.System.Data.DataColumn
        
        Private columnvf As Global.System.Data.DataColumn
        
        Private columnposition_m As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dodatok2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property digit_yearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndigit_year
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property w2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnw2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property deltaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndelta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property difColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndif
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property hColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnh
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ziColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnzi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property zmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnzm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vfColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property position_mColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnposition_m
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dodatok2Row
            Get
                Return CType(Me.Rows(index),dodatok2Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event dodatok2RowChanging As dodatok2RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event dodatok2RowChanged As dodatok2RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event dodatok2RowDeleting As dodatok2RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event dodatok2RowDeleted As dodatok2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Adddodatok2Row(ByVal row As dodatok2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Adddodatok2Row(ByVal id As Long, ByVal digit_year As String, ByVal name As String, ByVal w2 As Double, ByVal delta As Double, ByVal dif As Long, ByVal h As Long, ByVal zi As Double, ByVal zm As Double, ByVal vf As String, ByVal position_m As Long) As dodatok2Row
            Dim rowdodatok2Row As dodatok2Row = CType(Me.NewRow,dodatok2Row)
            Dim columnValuesArray() As Object = New Object() {id, digit_year, name, w2, delta, dif, h, zi, zm, vf, position_m}
            rowdodatok2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdodatok2Row)
            Return rowdodatok2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As dodatok2Row
            Return CType(Me.Rows.Find(New Object() {id}),dodatok2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dodatok2DataTable = CType(MyBase.Clone,dodatok2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dodatok2DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columndigit_year = MyBase.Columns("digit_year")
            Me.columnname = MyBase.Columns("name")
            Me.columnw2 = MyBase.Columns("w2")
            Me.columndelta = MyBase.Columns("delta")
            Me.columndif = MyBase.Columns("dif")
            Me.columnh = MyBase.Columns("h")
            Me.columnzi = MyBase.Columns("zi")
            Me.columnzm = MyBase.Columns("zm")
            Me.columnvf = MyBase.Columns("vf")
            Me.columnposition_m = MyBase.Columns("position_m")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columndigit_year = New Global.System.Data.DataColumn("digit_year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndigit_year)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columnw2 = New Global.System.Data.DataColumn("w2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnw2)
            Me.columndelta = New Global.System.Data.DataColumn("delta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndelta)
            Me.columndif = New Global.System.Data.DataColumn("dif", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndif)
            Me.columnh = New Global.System.Data.DataColumn("h", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnh)
            Me.columnzi = New Global.System.Data.DataColumn("zi", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnzi)
            Me.columnzm = New Global.System.Data.DataColumn("zm", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnzm)
            Me.columnvf = New Global.System.Data.DataColumn("vf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvf)
            Me.columnposition_m = New Global.System.Data.DataColumn("position_m", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnposition_m)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newdodatok2Row() As dodatok2Row
            Return CType(Me.NewRow,dodatok2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dodatok2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dodatok2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dodatok2RowChangedEvent) Is Nothing) Then
                RaiseEvent dodatok2RowChanged(Me, New dodatok2RowChangeEvent(CType(e.Row,dodatok2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dodatok2RowChangingEvent) Is Nothing) Then
                RaiseEvent dodatok2RowChanging(Me, New dodatok2RowChangeEvent(CType(e.Row,dodatok2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dodatok2RowDeletedEvent) Is Nothing) Then
                RaiseEvent dodatok2RowDeleted(Me, New dodatok2RowChangeEvent(CType(e.Row,dodatok2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dodatok2RowDeletingEvent) Is Nothing) Then
                RaiseEvent dodatok2RowDeleting(Me, New dodatok2RowChangeEvent(CType(e.Row,dodatok2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removedodatok2Row(ByVal row As dodatok2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dodatok2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class instaceDataTable
        Inherits Global.System.Data.TypedTableBase(Of instaceRow)
        
        Private columnid_instance As Global.System.Data.DataColumn
        
        Private columnzd As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "instace"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_instanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_instance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property zdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnzd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As instaceRow
            Get
                Return CType(Me.Rows(index),instaceRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event instaceRowChanging As instaceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event instaceRowChanged As instaceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event instaceRowDeleting As instaceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event instaceRowDeleted As instaceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddinstaceRow(ByVal row As instaceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddinstaceRow(ByVal id_instance As Long, ByVal zd As String) As instaceRow
            Dim rowinstaceRow As instaceRow = CType(Me.NewRow,instaceRow)
            Dim columnValuesArray() As Object = New Object() {id_instance, zd}
            rowinstaceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowinstaceRow)
            Return rowinstaceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As instaceDataTable = CType(MyBase.Clone,instaceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New instaceDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid_instance = MyBase.Columns("id_instance")
            Me.columnzd = MyBase.Columns("zd")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid_instance = New Global.System.Data.DataColumn("id_instance", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_instance)
            Me.columnzd = New Global.System.Data.DataColumn("zd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnzd)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewinstaceRow() As instaceRow
            Return CType(Me.NewRow,instaceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New instaceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(instaceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.instaceRowChangedEvent) Is Nothing) Then
                RaiseEvent instaceRowChanged(Me, New instaceRowChangeEvent(CType(e.Row,instaceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.instaceRowChangingEvent) Is Nothing) Then
                RaiseEvent instaceRowChanging(Me, New instaceRowChangeEvent(CType(e.Row,instaceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.instaceRowDeletedEvent) Is Nothing) Then
                RaiseEvent instaceRowDeleted(Me, New instaceRowChangeEvent(CType(e.Row,instaceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.instaceRowDeletingEvent) Is Nothing) Then
                RaiseEvent instaceRowDeleting(Me, New instaceRowChangeEvent(CType(e.Row,instaceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveinstaceRow(ByVal row As instaceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "instaceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class lstnDataTable
        Inherits Global.System.Data.TypedTableBase(Of lstnRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columncounter As Global.System.Data.DataColumn
        
        Private columntableNameZD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "lstn"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property counterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncounter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property tableNameZDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntableNameZD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As lstnRow
            Get
                Return CType(Me.Rows(index),lstnRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event lstnRowChanging As lstnRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event lstnRowChanged As lstnRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event lstnRowDeleting As lstnRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event lstnRowDeleted As lstnRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddlstnRow(ByVal row As lstnRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddlstnRow(ByVal id As Long, ByVal name As String, ByVal counter As Long, ByVal tableNameZD As String) As lstnRow
            Dim rowlstnRow As lstnRow = CType(Me.NewRow,lstnRow)
            Dim columnValuesArray() As Object = New Object() {id, name, counter, tableNameZD}
            rowlstnRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowlstnRow)
            Return rowlstnRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As lstnRow
            Return CType(Me.Rows.Find(New Object() {id}),lstnRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As lstnDataTable = CType(MyBase.Clone,lstnDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New lstnDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnname = MyBase.Columns("name")
            Me.columncounter = MyBase.Columns("counter")
            Me.columntableNameZD = MyBase.Columns("tableNameZD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columncounter = New Global.System.Data.DataColumn("counter", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncounter)
            Me.columntableNameZD = New Global.System.Data.DataColumn("tableNameZD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntableNameZD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewlstnRow() As lstnRow
            Return CType(Me.NewRow,lstnRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New lstnRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(lstnRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.lstnRowChangedEvent) Is Nothing) Then
                RaiseEvent lstnRowChanged(Me, New lstnRowChangeEvent(CType(e.Row,lstnRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.lstnRowChangingEvent) Is Nothing) Then
                RaiseEvent lstnRowChanging(Me, New lstnRowChangeEvent(CType(e.Row,lstnRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.lstnRowDeletedEvent) Is Nothing) Then
                RaiseEvent lstnRowDeleted(Me, New lstnRowChangeEvent(CType(e.Row,lstnRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.lstnRowDeletingEvent) Is Nothing) Then
                RaiseEvent lstnRowDeleting(Me, New lstnRowChangeEvent(CType(e.Row,lstnRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovelstnRow(ByVal row As lstnRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "lstnDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sqlite_sequenceDataTable
        Inherits Global.System.Data.TypedTableBase(Of sqlite_sequenceRow)
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columnseq As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sqlite_sequence"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property seqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnseq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sqlite_sequenceRow
            Get
                Return CType(Me.Rows(index),sqlite_sequenceRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event sqlite_sequenceRowChanging As sqlite_sequenceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event sqlite_sequenceRowChanged As sqlite_sequenceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event sqlite_sequenceRowDeleting As sqlite_sequenceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event sqlite_sequenceRowDeleted As sqlite_sequenceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addsqlite_sequenceRow(ByVal row As sqlite_sequenceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addsqlite_sequenceRow(ByVal name As String, ByVal seq As Long) As sqlite_sequenceRow
            Dim rowsqlite_sequenceRow As sqlite_sequenceRow = CType(Me.NewRow,sqlite_sequenceRow)
            Dim columnValuesArray() As Object = New Object() {name, seq}
            rowsqlite_sequenceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsqlite_sequenceRow)
            Return rowsqlite_sequenceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sqlite_sequenceDataTable = CType(MyBase.Clone,sqlite_sequenceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sqlite_sequenceDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnname = MyBase.Columns("name")
            Me.columnseq = MyBase.Columns("seq")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columnseq = New Global.System.Data.DataColumn("seq", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnseq)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newsqlite_sequenceRow() As sqlite_sequenceRow
            Return CType(Me.NewRow,sqlite_sequenceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sqlite_sequenceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sqlite_sequenceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sqlite_sequenceRowChangedEvent) Is Nothing) Then
                RaiseEvent sqlite_sequenceRowChanged(Me, New sqlite_sequenceRowChangeEvent(CType(e.Row,sqlite_sequenceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sqlite_sequenceRowChangingEvent) Is Nothing) Then
                RaiseEvent sqlite_sequenceRowChanging(Me, New sqlite_sequenceRowChangeEvent(CType(e.Row,sqlite_sequenceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sqlite_sequenceRowDeletedEvent) Is Nothing) Then
                RaiseEvent sqlite_sequenceRowDeleted(Me, New sqlite_sequenceRowChangeEvent(CType(e.Row,sqlite_sequenceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sqlite_sequenceRowDeletingEvent) Is Nothing) Then
                RaiseEvent sqlite_sequenceRowDeleting(Me, New sqlite_sequenceRowChangeEvent(CType(e.Row,sqlite_sequenceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removesqlite_sequenceRow(ByVal row As sqlite_sequenceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sqlite_sequenceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class studentDataTable
        Inherits Global.System.Data.TypedTableBase(Of studentRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnfirst_name As Global.System.Data.DataColumn
        
        Private columnlast_name As Global.System.Data.DataColumn
        
        Private columngroup As Global.System.Data.DataColumn
        
        Private columnyear As Global.System.Data.DataColumn
        
        Private columnst_book As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "student"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property first_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfirst_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property last_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlast_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property groupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property st_bookColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnst_book
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As studentRow
            Get
                Return CType(Me.Rows(index),studentRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event studentRowChanging As studentRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event studentRowChanged As studentRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event studentRowDeleting As studentRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event studentRowDeleted As studentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddstudentRow(ByVal row As studentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddstudentRow(ByVal id As Long, ByVal first_name As String, ByVal last_name As String, ByVal group As String, ByVal year As Long, ByVal st_book As String) As studentRow
            Dim rowstudentRow As studentRow = CType(Me.NewRow,studentRow)
            Dim columnValuesArray() As Object = New Object() {id, first_name, last_name, group, year, st_book}
            rowstudentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowstudentRow)
            Return rowstudentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As studentRow
            Return CType(Me.Rows.Find(New Object() {id}),studentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As studentDataTable = CType(MyBase.Clone,studentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New studentDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnfirst_name = MyBase.Columns("first_name")
            Me.columnlast_name = MyBase.Columns("last_name")
            Me.columngroup = MyBase.Columns("group")
            Me.columnyear = MyBase.Columns("year")
            Me.columnst_book = MyBase.Columns("st_book")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnfirst_name = New Global.System.Data.DataColumn("first_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfirst_name)
            Me.columnlast_name = New Global.System.Data.DataColumn("last_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlast_name)
            Me.columngroup = New Global.System.Data.DataColumn("group", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngroup)
            Me.columnyear = New Global.System.Data.DataColumn("year", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyear)
            Me.columnst_book = New Global.System.Data.DataColumn("st_book", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnst_book)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewstudentRow() As studentRow
            Return CType(Me.NewRow,studentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New studentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(studentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.studentRowChangedEvent) Is Nothing) Then
                RaiseEvent studentRowChanged(Me, New studentRowChangeEvent(CType(e.Row,studentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.studentRowChangingEvent) Is Nothing) Then
                RaiseEvent studentRowChanging(Me, New studentRowChangeEvent(CType(e.Row,studentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.studentRowDeletedEvent) Is Nothing) Then
                RaiseEvent studentRowDeleted(Me, New studentRowChangeEvent(CType(e.Row,studentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.studentRowDeletingEvent) Is Nothing) Then
                RaiseEvent studentRowDeleting(Me, New studentRowChangeEvent(CType(e.Row,studentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovestudentRow(ByVal row As studentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "studentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sys_tablesDataTable
        Inherits Global.System.Data.TypedTableBase(Of sys_tablesRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sys_tables"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sys_tablesRow
            Get
                Return CType(Me.Rows(index),sys_tablesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event sys_tablesRowChanging As sys_tablesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event sys_tablesRowChanged As sys_tablesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event sys_tablesRowDeleting As sys_tablesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event sys_tablesRowDeleted As sys_tablesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addsys_tablesRow(ByVal row As sys_tablesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addsys_tablesRow(ByVal id As Long, ByVal name As String, ByVal comment As String) As sys_tablesRow
            Dim rowsys_tablesRow As sys_tablesRow = CType(Me.NewRow,sys_tablesRow)
            Dim columnValuesArray() As Object = New Object() {id, name, comment}
            rowsys_tablesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsys_tablesRow)
            Return rowsys_tablesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sys_tablesDataTable = CType(MyBase.Clone,sys_tablesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sys_tablesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnname = MyBase.Columns("name")
            Me.columncomment = MyBase.Columns("comment")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newsys_tablesRow() As sys_tablesRow
            Return CType(Me.NewRow,sys_tablesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sys_tablesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sys_tablesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sys_tablesRowChangedEvent) Is Nothing) Then
                RaiseEvent sys_tablesRowChanged(Me, New sys_tablesRowChangeEvent(CType(e.Row,sys_tablesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sys_tablesRowChangingEvent) Is Nothing) Then
                RaiseEvent sys_tablesRowChanging(Me, New sys_tablesRowChangeEvent(CType(e.Row,sys_tablesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sys_tablesRowDeletedEvent) Is Nothing) Then
                RaiseEvent sys_tablesRowDeleted(Me, New sys_tablesRowChangeEvent(CType(e.Row,sys_tablesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sys_tablesRowDeletingEvent) Is Nothing) Then
                RaiseEvent sys_tablesRowDeleting(Me, New sys_tablesRowChangeEvent(CType(e.Row,sys_tablesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removesys_tablesRow(ByVal row As sys_tablesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sys_tablesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class z3DataTable
        Inherits Global.System.Data.TypedTableBase(Of z3Row)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnvariant As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "z3"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property variantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvariant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As z3Row
            Get
                Return CType(Me.Rows(index),z3Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3RowChanging As z3RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3RowChanged As z3RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3RowDeleting As z3RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3RowDeleted As z3RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addz3Row(ByVal row As z3Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addz3Row(ByVal id As Long, ByVal _variant As Long, ByVal comment As String) As z3Row
            Dim rowz3Row As z3Row = CType(Me.NewRow,z3Row)
            Dim columnValuesArray() As Object = New Object() {id, _variant, comment}
            rowz3Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowz3Row)
            Return rowz3Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As z3Row
            Return CType(Me.Rows.Find(New Object() {id}),z3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As z3DataTable = CType(MyBase.Clone,z3DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New z3DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnvariant = MyBase.Columns("variant")
            Me.columncomment = MyBase.Columns("comment")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnvariant = New Global.System.Data.DataColumn("variant", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            Me.columnvariant.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "variantColumn")
            Me.columnvariant.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnvariant")
            Me.columnvariant.ExtendedProperties.Add("Generator_UserColumnName", "variant")
            MyBase.Columns.Add(Me.columnvariant)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newz3Row() As z3Row
            Return CType(Me.NewRow,z3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New z3Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(z3Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.z3RowChangedEvent) Is Nothing) Then
                RaiseEvent z3RowChanged(Me, New z3RowChangeEvent(CType(e.Row,z3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.z3RowChangingEvent) Is Nothing) Then
                RaiseEvent z3RowChanging(Me, New z3RowChangeEvent(CType(e.Row,z3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.z3RowDeletedEvent) Is Nothing) Then
                RaiseEvent z3RowDeleted(Me, New z3RowChangeEvent(CType(e.Row,z3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.z3RowDeletingEvent) Is Nothing) Then
                RaiseEvent z3RowDeleting(Me, New z3RowChangeEvent(CType(e.Row,z3Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removez3Row(ByVal row As z3Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "z3DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class z3_accelerationDataTable
        Inherits Global.System.Data.TypedTableBase(Of z3_accelerationRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnid_z3 As Global.System.Data.DataColumn
        
        Private columnnumberPosition As Global.System.Data.DataColumn
        
        Private columnal_pb As Global.System.Data.DataColumn
        
        Private columnab As Global.System.Data.DataColumn
        
        Private columnmashtab_ma As Global.System.Data.DataColumn
        
        Private columnmashtab_ma_view As Global.System.Data.DataColumn
        
        Private columnap_pi As Global.System.Data.DataColumn
        
        Private columnangle_Pb As Global.System.Data.DataColumn
        
        Private columnap_b As Global.System.Data.DataColumn
        
        Private columna_bn3 As Global.System.Data.DataColumn
        
        Private columnal_bn3 As Global.System.Data.DataColumn
        
        Private columnangleCB As Global.System.Data.DataColumn
        
        Private columnap_n3 As Global.System.Data.DataColumn
        
        Private columnap_c As Global.System.Data.DataColumn
        
        Private columna_c As Global.System.Data.DataColumn
        
        Private columnal_c As Global.System.Data.DataColumn
        
        Private columna_n3c As Global.System.Data.DataColumn
        
        Private columnal_n3c As Global.System.Data.DataColumn
        
        Private columna_bc As Global.System.Data.DataColumn
        
        Private columnal_bc As Global.System.Data.DataColumn
        
        Private columna_cd As Global.System.Data.DataColumn
        
        Private columnal_cd As Global.System.Data.DataColumn
        
        Private columnangle_cd As Global.System.Data.DataColumn
        
        Private columnap_d As Global.System.Data.DataColumn
        
        Private columna_d As Global.System.Data.DataColumn
        
        Private columnal_d As Global.System.Data.DataColumn
        
        Private columnap_s2 As Global.System.Data.DataColumn
        
        Private columna_s2 As Global.System.Data.DataColumn
        
        Private columnal_s2 As Global.System.Data.DataColumn
        
        Private columnap_s3 As Global.System.Data.DataColumn
        
        Private columna_s3 As Global.System.Data.DataColumn
        
        Private columnal_s3 As Global.System.Data.DataColumn
        
        Private columnap_s4 As Global.System.Data.DataColumn
        
        Private columna_s4 As Global.System.Data.DataColumn
        
        Private columnal_s4 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "z3_acceleration"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_z3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_z3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property numberPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumberPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property al_pbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnal_pb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property abColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnab
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mashtab_maColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmashtab_ma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mashtab_ma_viewColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmashtab_ma_view
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ap_piColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnap_pi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property angle_PbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnangle_Pb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ap_bColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnap_b
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property a_bn3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columna_bn3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property al_bn3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnal_bn3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property angleCBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnangleCB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ap_n3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnap_n3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ap_cColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnap_c
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property a_cColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columna_c
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property al_cColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnal_c
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property a_n3cColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columna_n3c
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property al_n3cColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnal_n3c
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property a_bcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columna_bc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property al_bcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnal_bc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property a_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columna_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property al_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnal_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property angle_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnangle_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ap_dColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnap_d
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property a_dColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columna_d
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property al_dColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnal_d
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ap_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnap_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property a_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columna_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property al_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnal_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ap_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnap_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property a_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columna_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property al_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnal_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ap_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnap_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property a_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columna_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property al_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnal_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As z3_accelerationRow
            Get
                Return CType(Me.Rows(index),z3_accelerationRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_accelerationRowChanging As z3_accelerationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_accelerationRowChanged As z3_accelerationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_accelerationRowDeleting As z3_accelerationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_accelerationRowDeleted As z3_accelerationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addz3_accelerationRow(ByVal row As z3_accelerationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addz3_accelerationRow( _
                    ByVal id As Long,  _
                    ByVal id_z3 As Long,  _
                    ByVal numberPosition As Long,  _
                    ByVal al_pb As Double,  _
                    ByVal ab As Double,  _
                    ByVal mashtab_ma As Double,  _
                    ByVal mashtab_ma_view As Double,  _
                    ByVal ap_pi As String,  _
                    ByVal angle_Pb As Double,  _
                    ByVal ap_b As String,  _
                    ByVal a_bn3 As Double,  _
                    ByVal al_bn3 As Double,  _
                    ByVal angleCB As Double,  _
                    ByVal ap_n3 As String,  _
                    ByVal ap_c As String,  _
                    ByVal a_c As Double,  _
                    ByVal al_c As Double,  _
                    ByVal a_n3c As Double,  _
                    ByVal al_n3c As Double,  _
                    ByVal a_bc As Double,  _
                    ByVal al_bc As Double,  _
                    ByVal a_cd As Double,  _
                    ByVal al_cd As Double,  _
                    ByVal angle_cd As Double,  _
                    ByVal ap_d As String,  _
                    ByVal a_d As Double,  _
                    ByVal al_d As Double,  _
                    ByVal ap_s2 As String,  _
                    ByVal a_s2 As Double,  _
                    ByVal al_s2 As Double,  _
                    ByVal ap_s3 As String,  _
                    ByVal a_s3 As Double,  _
                    ByVal al_s3 As Double,  _
                    ByVal ap_s4 As String,  _
                    ByVal a_s4 As Double,  _
                    ByVal al_s4 As Double) As z3_accelerationRow
            Dim rowz3_accelerationRow As z3_accelerationRow = CType(Me.NewRow,z3_accelerationRow)
            Dim columnValuesArray() As Object = New Object() {id, id_z3, numberPosition, al_pb, ab, mashtab_ma, mashtab_ma_view, ap_pi, angle_Pb, ap_b, a_bn3, al_bn3, angleCB, ap_n3, ap_c, a_c, al_c, a_n3c, al_n3c, a_bc, al_bc, a_cd, al_cd, angle_cd, ap_d, a_d, al_d, ap_s2, a_s2, al_s2, ap_s3, a_s3, al_s3, ap_s4, a_s4, al_s4}
            rowz3_accelerationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowz3_accelerationRow)
            Return rowz3_accelerationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As z3_accelerationRow
            Return CType(Me.Rows.Find(New Object() {id}),z3_accelerationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As z3_accelerationDataTable = CType(MyBase.Clone,z3_accelerationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New z3_accelerationDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnid_z3 = MyBase.Columns("id_z3")
            Me.columnnumberPosition = MyBase.Columns("numberPosition")
            Me.columnal_pb = MyBase.Columns("al_pb")
            Me.columnab = MyBase.Columns("ab")
            Me.columnmashtab_ma = MyBase.Columns("mashtab_ma")
            Me.columnmashtab_ma_view = MyBase.Columns("mashtab_ma_view")
            Me.columnap_pi = MyBase.Columns("ap_pi")
            Me.columnangle_Pb = MyBase.Columns("angle_Pb")
            Me.columnap_b = MyBase.Columns("ap_b")
            Me.columna_bn3 = MyBase.Columns("a_bn3")
            Me.columnal_bn3 = MyBase.Columns("al_bn3")
            Me.columnangleCB = MyBase.Columns("angleCB")
            Me.columnap_n3 = MyBase.Columns("ap_n3")
            Me.columnap_c = MyBase.Columns("ap_c")
            Me.columna_c = MyBase.Columns("a_c")
            Me.columnal_c = MyBase.Columns("al_c")
            Me.columna_n3c = MyBase.Columns("a_n3c")
            Me.columnal_n3c = MyBase.Columns("al_n3c")
            Me.columna_bc = MyBase.Columns("a_bc")
            Me.columnal_bc = MyBase.Columns("al_bc")
            Me.columna_cd = MyBase.Columns("a_cd")
            Me.columnal_cd = MyBase.Columns("al_cd")
            Me.columnangle_cd = MyBase.Columns("angle_cd")
            Me.columnap_d = MyBase.Columns("ap_d")
            Me.columna_d = MyBase.Columns("a_d")
            Me.columnal_d = MyBase.Columns("al_d")
            Me.columnap_s2 = MyBase.Columns("ap_s2")
            Me.columna_s2 = MyBase.Columns("a_s2")
            Me.columnal_s2 = MyBase.Columns("al_s2")
            Me.columnap_s3 = MyBase.Columns("ap_s3")
            Me.columna_s3 = MyBase.Columns("a_s3")
            Me.columnal_s3 = MyBase.Columns("al_s3")
            Me.columnap_s4 = MyBase.Columns("ap_s4")
            Me.columna_s4 = MyBase.Columns("a_s4")
            Me.columnal_s4 = MyBase.Columns("al_s4")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnid_z3 = New Global.System.Data.DataColumn("id_z3", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_z3)
            Me.columnnumberPosition = New Global.System.Data.DataColumn("numberPosition", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumberPosition)
            Me.columnal_pb = New Global.System.Data.DataColumn("al_pb", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnal_pb)
            Me.columnab = New Global.System.Data.DataColumn("ab", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnab)
            Me.columnmashtab_ma = New Global.System.Data.DataColumn("mashtab_ma", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmashtab_ma)
            Me.columnmashtab_ma_view = New Global.System.Data.DataColumn("mashtab_ma_view", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmashtab_ma_view)
            Me.columnap_pi = New Global.System.Data.DataColumn("ap_pi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnap_pi)
            Me.columnangle_Pb = New Global.System.Data.DataColumn("angle_Pb", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnangle_Pb)
            Me.columnap_b = New Global.System.Data.DataColumn("ap_b", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnap_b)
            Me.columna_bn3 = New Global.System.Data.DataColumn("a_bn3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columna_bn3)
            Me.columnal_bn3 = New Global.System.Data.DataColumn("al_bn3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnal_bn3)
            Me.columnangleCB = New Global.System.Data.DataColumn("angleCB", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnangleCB)
            Me.columnap_n3 = New Global.System.Data.DataColumn("ap_n3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnap_n3)
            Me.columnap_c = New Global.System.Data.DataColumn("ap_c", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnap_c)
            Me.columna_c = New Global.System.Data.DataColumn("a_c", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columna_c)
            Me.columnal_c = New Global.System.Data.DataColumn("al_c", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnal_c)
            Me.columna_n3c = New Global.System.Data.DataColumn("a_n3c", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columna_n3c)
            Me.columnal_n3c = New Global.System.Data.DataColumn("al_n3c", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnal_n3c)
            Me.columna_bc = New Global.System.Data.DataColumn("a_bc", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columna_bc)
            Me.columnal_bc = New Global.System.Data.DataColumn("al_bc", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnal_bc)
            Me.columna_cd = New Global.System.Data.DataColumn("a_cd", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columna_cd)
            Me.columnal_cd = New Global.System.Data.DataColumn("al_cd", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnal_cd)
            Me.columnangle_cd = New Global.System.Data.DataColumn("angle_cd", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnangle_cd)
            Me.columnap_d = New Global.System.Data.DataColumn("ap_d", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnap_d)
            Me.columna_d = New Global.System.Data.DataColumn("a_d", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columna_d)
            Me.columnal_d = New Global.System.Data.DataColumn("al_d", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnal_d)
            Me.columnap_s2 = New Global.System.Data.DataColumn("ap_s2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnap_s2)
            Me.columna_s2 = New Global.System.Data.DataColumn("a_s2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columna_s2)
            Me.columnal_s2 = New Global.System.Data.DataColumn("al_s2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnal_s2)
            Me.columnap_s3 = New Global.System.Data.DataColumn("ap_s3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnap_s3)
            Me.columna_s3 = New Global.System.Data.DataColumn("a_s3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columna_s3)
            Me.columnal_s3 = New Global.System.Data.DataColumn("al_s3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnal_s3)
            Me.columnap_s4 = New Global.System.Data.DataColumn("ap_s4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnap_s4)
            Me.columna_s4 = New Global.System.Data.DataColumn("a_s4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columna_s4)
            Me.columnal_s4 = New Global.System.Data.DataColumn("al_s4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnal_s4)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newz3_accelerationRow() As z3_accelerationRow
            Return CType(Me.NewRow,z3_accelerationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New z3_accelerationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(z3_accelerationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.z3_accelerationRowChangedEvent) Is Nothing) Then
                RaiseEvent z3_accelerationRowChanged(Me, New z3_accelerationRowChangeEvent(CType(e.Row,z3_accelerationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.z3_accelerationRowChangingEvent) Is Nothing) Then
                RaiseEvent z3_accelerationRowChanging(Me, New z3_accelerationRowChangeEvent(CType(e.Row,z3_accelerationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.z3_accelerationRowDeletedEvent) Is Nothing) Then
                RaiseEvent z3_accelerationRowDeleted(Me, New z3_accelerationRowChangeEvent(CType(e.Row,z3_accelerationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.z3_accelerationRowDeletingEvent) Is Nothing) Then
                RaiseEvent z3_accelerationRowDeleting(Me, New z3_accelerationRowChangeEvent(CType(e.Row,z3_accelerationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removez3_accelerationRow(ByVal row As z3_accelerationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "z3_accelerationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class z3_dataDataTable
        Inherits Global.System.Data.TypedTableBase(Of z3_dataRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnL_ab As Global.System.Data.DataColumn
        
        Private columnL_bc As Global.System.Data.DataColumn
        
        Private columnL_bd As Global.System.Data.DataColumn
        
        Private columnL_a As Global.System.Data.DataColumn
        
        Private columnm2 As Global.System.Data.DataColumn
        
        Private columnm3 As Global.System.Data.DataColumn
        
        Private columnm4 As Global.System.Data.DataColumn
        
        Private columnFc As Global.System.Data.DataColumn
        
        Private columnfi_v As Global.System.Data.DataColumn
        
        Private columnfi_dv As Global.System.Data.DataColumn
        
        Private columnfi_pov As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "z3_data"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property L_abColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnL_ab
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property L_bcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnL_bc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property L_bdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnL_bd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property L_aColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnL_a
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property m2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnm2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property m3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnm3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property m4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnm4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property fi_vColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfi_v
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property fi_dvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfi_dv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property fi_povColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfi_pov
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As z3_dataRow
            Get
                Return CType(Me.Rows(index),z3_dataRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_dataRowChanging As z3_dataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_dataRowChanged As z3_dataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_dataRowDeleting As z3_dataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_dataRowDeleted As z3_dataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addz3_dataRow(ByVal row As z3_dataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addz3_dataRow(ByVal id As Long, ByVal L_ab As Double, ByVal L_bc As Double, ByVal L_bd As Double, ByVal L_a As Double, ByVal m2 As Double, ByVal m3 As Double, ByVal m4 As Double, ByVal Fc As Double, ByVal fi_v As Long, ByVal fi_dv As Long, ByVal fi_pov As Long) As z3_dataRow
            Dim rowz3_dataRow As z3_dataRow = CType(Me.NewRow,z3_dataRow)
            Dim columnValuesArray() As Object = New Object() {id, L_ab, L_bc, L_bd, L_a, m2, m3, m4, Fc, fi_v, fi_dv, fi_pov}
            rowz3_dataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowz3_dataRow)
            Return rowz3_dataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As z3_dataRow
            Return CType(Me.Rows.Find(New Object() {id}),z3_dataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As z3_dataDataTable = CType(MyBase.Clone,z3_dataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New z3_dataDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnL_ab = MyBase.Columns("L_ab")
            Me.columnL_bc = MyBase.Columns("L_bc")
            Me.columnL_bd = MyBase.Columns("L_bd")
            Me.columnL_a = MyBase.Columns("L_a")
            Me.columnm2 = MyBase.Columns("m2")
            Me.columnm3 = MyBase.Columns("m3")
            Me.columnm4 = MyBase.Columns("m4")
            Me.columnFc = MyBase.Columns("Fc")
            Me.columnfi_v = MyBase.Columns("fi_v")
            Me.columnfi_dv = MyBase.Columns("fi_dv")
            Me.columnfi_pov = MyBase.Columns("fi_pov")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnL_ab = New Global.System.Data.DataColumn("L_ab", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnL_ab)
            Me.columnL_bc = New Global.System.Data.DataColumn("L_bc", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnL_bc)
            Me.columnL_bd = New Global.System.Data.DataColumn("L_bd", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnL_bd)
            Me.columnL_a = New Global.System.Data.DataColumn("L_a", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnL_a)
            Me.columnm2 = New Global.System.Data.DataColumn("m2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnm2)
            Me.columnm3 = New Global.System.Data.DataColumn("m3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnm3)
            Me.columnm4 = New Global.System.Data.DataColumn("m4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnm4)
            Me.columnFc = New Global.System.Data.DataColumn("Fc", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFc)
            Me.columnfi_v = New Global.System.Data.DataColumn("fi_v", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfi_v)
            Me.columnfi_dv = New Global.System.Data.DataColumn("fi_dv", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfi_dv)
            Me.columnfi_pov = New Global.System.Data.DataColumn("fi_pov", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfi_pov)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newz3_dataRow() As z3_dataRow
            Return CType(Me.NewRow,z3_dataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New z3_dataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(z3_dataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.z3_dataRowChangedEvent) Is Nothing) Then
                RaiseEvent z3_dataRowChanged(Me, New z3_dataRowChangeEvent(CType(e.Row,z3_dataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.z3_dataRowChangingEvent) Is Nothing) Then
                RaiseEvent z3_dataRowChanging(Me, New z3_dataRowChangeEvent(CType(e.Row,z3_dataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.z3_dataRowDeletedEvent) Is Nothing) Then
                RaiseEvent z3_dataRowDeleted(Me, New z3_dataRowChangeEvent(CType(e.Row,z3_dataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.z3_dataRowDeletingEvent) Is Nothing) Then
                RaiseEvent z3_dataRowDeleting(Me, New z3_dataRowChangeEvent(CType(e.Row,z3_dataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removez3_dataRow(ByVal row As z3_dataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "z3_dataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class z3_izvDataTable
        Inherits Global.System.Data.TypedTableBase(Of z3_izvRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnid_z3 As Global.System.Data.DataColumn
        
        Private columnL_ab As Global.System.Data.DataColumn
        
        Private columnpb As Global.System.Data.DataColumn
        
        Private columnm3 As Global.System.Data.DataColumn
        
        Private columnps3 As Global.System.Data.DataColumn
        
        Private columnL_bc As Global.System.Data.DataColumn
        
        Private columnvl_bc As Global.System.Data.DataColumn
        
        Private columnm4 As Global.System.Data.DataColumn
        
        Private columnps4 As Global.System.Data.DataColumn
        
        Private columnis2 As Global.System.Data.DataColumn
        
        Private columnis3 As Global.System.Data.DataColumn
        
        Private columnizv As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "z3_izv"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_z3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_z3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property L_abColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnL_ab
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property pbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property m3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnm3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ps3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnps3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property L_bcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnL_bc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vl_bcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvl_bc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property m4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnm4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ps4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnps4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property is2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnis2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property is3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnis3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property izvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnizv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As z3_izvRow
            Get
                Return CType(Me.Rows(index),z3_izvRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_izvRowChanging As z3_izvRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_izvRowChanged As z3_izvRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_izvRowDeleting As z3_izvRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_izvRowDeleted As z3_izvRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addz3_izvRow(ByVal row As z3_izvRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addz3_izvRow(ByVal id As Long, ByVal id_z3 As Long, ByVal L_ab As Double, ByVal pb As Double, ByVal m3 As Double, ByVal ps3 As Double, ByVal L_bc As Double, ByVal vl_bc As Double, ByVal m4 As Double, ByVal ps4 As Double, ByVal is2 As Double, ByVal is3 As Double, ByVal izv As Double) As z3_izvRow
            Dim rowz3_izvRow As z3_izvRow = CType(Me.NewRow,z3_izvRow)
            Dim columnValuesArray() As Object = New Object() {id, id_z3, L_ab, pb, m3, ps3, L_bc, vl_bc, m4, ps4, is2, is3, izv}
            rowz3_izvRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowz3_izvRow)
            Return rowz3_izvRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As z3_izvRow
            Return CType(Me.Rows.Find(New Object() {id}),z3_izvRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As z3_izvDataTable = CType(MyBase.Clone,z3_izvDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New z3_izvDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnid_z3 = MyBase.Columns("id_z3")
            Me.columnL_ab = MyBase.Columns("L_ab")
            Me.columnpb = MyBase.Columns("pb")
            Me.columnm3 = MyBase.Columns("m3")
            Me.columnps3 = MyBase.Columns("ps3")
            Me.columnL_bc = MyBase.Columns("L_bc")
            Me.columnvl_bc = MyBase.Columns("vl_bc")
            Me.columnm4 = MyBase.Columns("m4")
            Me.columnps4 = MyBase.Columns("ps4")
            Me.columnis2 = MyBase.Columns("is2")
            Me.columnis3 = MyBase.Columns("is3")
            Me.columnizv = MyBase.Columns("izv")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnid_z3 = New Global.System.Data.DataColumn("id_z3", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_z3)
            Me.columnL_ab = New Global.System.Data.DataColumn("L_ab", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnL_ab)
            Me.columnpb = New Global.System.Data.DataColumn("pb", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpb)
            Me.columnm3 = New Global.System.Data.DataColumn("m3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnm3)
            Me.columnps3 = New Global.System.Data.DataColumn("ps3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnps3)
            Me.columnL_bc = New Global.System.Data.DataColumn("L_bc", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnL_bc)
            Me.columnvl_bc = New Global.System.Data.DataColumn("vl_bc", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvl_bc)
            Me.columnm4 = New Global.System.Data.DataColumn("m4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnm4)
            Me.columnps4 = New Global.System.Data.DataColumn("ps4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnps4)
            Me.columnis2 = New Global.System.Data.DataColumn("is2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnis2)
            Me.columnis3 = New Global.System.Data.DataColumn("is3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnis3)
            Me.columnizv = New Global.System.Data.DataColumn("izv", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnizv)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newz3_izvRow() As z3_izvRow
            Return CType(Me.NewRow,z3_izvRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New z3_izvRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(z3_izvRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.z3_izvRowChangedEvent) Is Nothing) Then
                RaiseEvent z3_izvRowChanged(Me, New z3_izvRowChangeEvent(CType(e.Row,z3_izvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.z3_izvRowChangingEvent) Is Nothing) Then
                RaiseEvent z3_izvRowChanging(Me, New z3_izvRowChangeEvent(CType(e.Row,z3_izvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.z3_izvRowDeletedEvent) Is Nothing) Then
                RaiseEvent z3_izvRowDeleted(Me, New z3_izvRowChangeEvent(CType(e.Row,z3_izvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.z3_izvRowDeletingEvent) Is Nothing) Then
                RaiseEvent z3_izvRowDeleting(Me, New z3_izvRowChangeEvent(CType(e.Row,z3_izvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removez3_izvRow(ByVal row As z3_izvRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "z3_izvDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class z3_mehanizmDataTable
        Inherits Global.System.Data.TypedTableBase(Of z3_mehanizmRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnid_z3 As Global.System.Data.DataColumn
        
        Private columnnumberPosition As Global.System.Data.DataColumn
        
        Private columnml_AB As Global.System.Data.DataColumn
        
        Private columnmashtab_ml As Global.System.Data.DataColumn
        
        Private columnmashtab_ml_view As Global.System.Data.DataColumn
        
        Private columnml_BC As Global.System.Data.DataColumn
        
        Private columnml_BD As Global.System.Data.DataColumn
        
        Private columnml_CD As Global.System.Data.DataColumn
        
        Private columnml_a As Global.System.Data.DataColumn
        
        Private columnmp_A As Global.System.Data.DataColumn
        
        Private columnangle_AB As Global.System.Data.DataColumn
        
        Private columnmp_B As Global.System.Data.DataColumn
        
        Private columnangle_BC As Global.System.Data.DataColumn
        
        Private columnmp_C As Global.System.Data.DataColumn
        
        Private columnmp_D As Global.System.Data.DataColumn
        
        Private columnmp_S2 As Global.System.Data.DataColumn
        
        Private columnmp_S3 As Global.System.Data.DataColumn
        
        Private columnmp_S4 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "z3_mehanizm"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_z3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_z3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property numberPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumberPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ml_ABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnml_AB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mashtab_mlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmashtab_ml
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mashtab_ml_viewColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmashtab_ml_view
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ml_BCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnml_BC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ml_BDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnml_BD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ml_CDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnml_CD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ml_aColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnml_a
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mp_AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmp_A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property angle_ABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnangle_AB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mp_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmp_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property angle_BCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnangle_BC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mp_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmp_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mp_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmp_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mp_S2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmp_S2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mp_S3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmp_S3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mp_S4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmp_S4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As z3_mehanizmRow
            Get
                Return CType(Me.Rows(index),z3_mehanizmRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_mehanizmRowChanging As z3_mehanizmRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_mehanizmRowChanged As z3_mehanizmRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_mehanizmRowDeleting As z3_mehanizmRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_mehanizmRowDeleted As z3_mehanizmRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addz3_mehanizmRow(ByVal row As z3_mehanizmRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addz3_mehanizmRow( _
                    ByVal id As Long,  _
                    ByVal id_z3 As Long,  _
                    ByVal numberPosition As Long,  _
                    ByVal ml_AB As Double,  _
                    ByVal mashtab_ml As Double,  _
                    ByVal mashtab_ml_view As Double,  _
                    ByVal ml_BC As Double,  _
                    ByVal ml_BD As Double,  _
                    ByVal ml_CD As Double,  _
                    ByVal ml_a As Double,  _
                    ByVal mp_A As String,  _
                    ByVal angle_AB As Double,  _
                    ByVal mp_B As String,  _
                    ByVal angle_BC As Double,  _
                    ByVal mp_C As String,  _
                    ByVal mp_D As String,  _
                    ByVal mp_S2 As String,  _
                    ByVal mp_S3 As String,  _
                    ByVal mp_S4 As String) As z3_mehanizmRow
            Dim rowz3_mehanizmRow As z3_mehanizmRow = CType(Me.NewRow,z3_mehanizmRow)
            Dim columnValuesArray() As Object = New Object() {id, id_z3, numberPosition, ml_AB, mashtab_ml, mashtab_ml_view, ml_BC, ml_BD, ml_CD, ml_a, mp_A, angle_AB, mp_B, angle_BC, mp_C, mp_D, mp_S2, mp_S3, mp_S4}
            rowz3_mehanizmRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowz3_mehanizmRow)
            Return rowz3_mehanizmRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As z3_mehanizmRow
            Return CType(Me.Rows.Find(New Object() {id}),z3_mehanizmRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As z3_mehanizmDataTable = CType(MyBase.Clone,z3_mehanizmDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New z3_mehanizmDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnid_z3 = MyBase.Columns("id_z3")
            Me.columnnumberPosition = MyBase.Columns("numberPosition")
            Me.columnml_AB = MyBase.Columns("ml_AB")
            Me.columnmashtab_ml = MyBase.Columns("mashtab_ml")
            Me.columnmashtab_ml_view = MyBase.Columns("mashtab_ml_view")
            Me.columnml_BC = MyBase.Columns("ml_BC")
            Me.columnml_BD = MyBase.Columns("ml_BD")
            Me.columnml_CD = MyBase.Columns("ml_CD")
            Me.columnml_a = MyBase.Columns("ml_a")
            Me.columnmp_A = MyBase.Columns("mp_A")
            Me.columnangle_AB = MyBase.Columns("angle_AB")
            Me.columnmp_B = MyBase.Columns("mp_B")
            Me.columnangle_BC = MyBase.Columns("angle_BC")
            Me.columnmp_C = MyBase.Columns("mp_C")
            Me.columnmp_D = MyBase.Columns("mp_D")
            Me.columnmp_S2 = MyBase.Columns("mp_S2")
            Me.columnmp_S3 = MyBase.Columns("mp_S3")
            Me.columnmp_S4 = MyBase.Columns("mp_S4")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnid_z3 = New Global.System.Data.DataColumn("id_z3", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_z3)
            Me.columnnumberPosition = New Global.System.Data.DataColumn("numberPosition", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumberPosition)
            Me.columnml_AB = New Global.System.Data.DataColumn("ml_AB", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnml_AB)
            Me.columnmashtab_ml = New Global.System.Data.DataColumn("mashtab_ml", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmashtab_ml)
            Me.columnmashtab_ml_view = New Global.System.Data.DataColumn("mashtab_ml_view", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmashtab_ml_view)
            Me.columnml_BC = New Global.System.Data.DataColumn("ml_BC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnml_BC)
            Me.columnml_BD = New Global.System.Data.DataColumn("ml_BD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnml_BD)
            Me.columnml_CD = New Global.System.Data.DataColumn("ml_CD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnml_CD)
            Me.columnml_a = New Global.System.Data.DataColumn("ml_a", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnml_a)
            Me.columnmp_A = New Global.System.Data.DataColumn("mp_A", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmp_A)
            Me.columnangle_AB = New Global.System.Data.DataColumn("angle_AB", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnangle_AB)
            Me.columnmp_B = New Global.System.Data.DataColumn("mp_B", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmp_B)
            Me.columnangle_BC = New Global.System.Data.DataColumn("angle_BC", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnangle_BC)
            Me.columnmp_C = New Global.System.Data.DataColumn("mp_C", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmp_C)
            Me.columnmp_D = New Global.System.Data.DataColumn("mp_D", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmp_D)
            Me.columnmp_S2 = New Global.System.Data.DataColumn("mp_S2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmp_S2)
            Me.columnmp_S3 = New Global.System.Data.DataColumn("mp_S3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmp_S3)
            Me.columnmp_S4 = New Global.System.Data.DataColumn("mp_S4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmp_S4)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newz3_mehanizmRow() As z3_mehanizmRow
            Return CType(Me.NewRow,z3_mehanizmRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New z3_mehanizmRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(z3_mehanizmRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.z3_mehanizmRowChangedEvent) Is Nothing) Then
                RaiseEvent z3_mehanizmRowChanged(Me, New z3_mehanizmRowChangeEvent(CType(e.Row,z3_mehanizmRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.z3_mehanizmRowChangingEvent) Is Nothing) Then
                RaiseEvent z3_mehanizmRowChanging(Me, New z3_mehanizmRowChangeEvent(CType(e.Row,z3_mehanizmRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.z3_mehanizmRowDeletedEvent) Is Nothing) Then
                RaiseEvent z3_mehanizmRowDeleted(Me, New z3_mehanizmRowChangeEvent(CType(e.Row,z3_mehanizmRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.z3_mehanizmRowDeletingEvent) Is Nothing) Then
                RaiseEvent z3_mehanizmRowDeleting(Me, New z3_mehanizmRowChangeEvent(CType(e.Row,z3_mehanizmRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removez3_mehanizmRow(ByVal row As z3_mehanizmRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "z3_mehanizmDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class z3_mzvDataTable
        Inherits Global.System.Data.TypedTableBase(Of z3_mzvRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnid_z3 As Global.System.Data.DataColumn
        
        Private columnL_ab As Global.System.Data.DataColumn
        
        Private columnvl_pb As Global.System.Data.DataColumn
        
        Private columnG2 As Global.System.Data.DataColumn
        
        Private columnps2 As Global.System.Data.DataColumn
        
        Private columnG3 As Global.System.Data.DataColumn
        
        Private columnps3 As Global.System.Data.DataColumn
        
        Private columnFc As Global.System.Data.DataColumn
        
        Private columnps4 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "z3_mzv"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_z3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_z3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property L_abColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnL_ab
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vl_pbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvl_pb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property G2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnG2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ps2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnps2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property G3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnG3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ps3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnps3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ps4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnps4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As z3_mzvRow
            Get
                Return CType(Me.Rows(index),z3_mzvRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_mzvRowChanging As z3_mzvRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_mzvRowChanged As z3_mzvRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_mzvRowDeleting As z3_mzvRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_mzvRowDeleted As z3_mzvRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addz3_mzvRow(ByVal row As z3_mzvRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addz3_mzvRow(ByVal id As Long, ByVal id_z3 As Long, ByVal L_ab As Double, ByVal vl_pb As Double, ByVal G2 As Double, ByVal ps2 As Double, ByVal G3 As Double, ByVal ps3 As Double, ByVal Fc As Double, ByVal ps4 As Double) As z3_mzvRow
            Dim rowz3_mzvRow As z3_mzvRow = CType(Me.NewRow,z3_mzvRow)
            Dim columnValuesArray() As Object = New Object() {id, id_z3, L_ab, vl_pb, G2, ps2, G3, ps3, Fc, ps4}
            rowz3_mzvRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowz3_mzvRow)
            Return rowz3_mzvRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As z3_mzvRow
            Return CType(Me.Rows.Find(New Object() {id}),z3_mzvRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As z3_mzvDataTable = CType(MyBase.Clone,z3_mzvDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New z3_mzvDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnid_z3 = MyBase.Columns("id_z3")
            Me.columnL_ab = MyBase.Columns("L_ab")
            Me.columnvl_pb = MyBase.Columns("vl_pb")
            Me.columnG2 = MyBase.Columns("G2")
            Me.columnps2 = MyBase.Columns("ps2")
            Me.columnG3 = MyBase.Columns("G3")
            Me.columnps3 = MyBase.Columns("ps3")
            Me.columnFc = MyBase.Columns("Fc")
            Me.columnps4 = MyBase.Columns("ps4")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnid_z3 = New Global.System.Data.DataColumn("id_z3", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_z3)
            Me.columnL_ab = New Global.System.Data.DataColumn("L_ab", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnL_ab)
            Me.columnvl_pb = New Global.System.Data.DataColumn("vl_pb", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvl_pb)
            Me.columnG2 = New Global.System.Data.DataColumn("G2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnG2)
            Me.columnps2 = New Global.System.Data.DataColumn("ps2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnps2)
            Me.columnG3 = New Global.System.Data.DataColumn("G3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnG3)
            Me.columnps3 = New Global.System.Data.DataColumn("ps3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnps3)
            Me.columnFc = New Global.System.Data.DataColumn("Fc", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFc)
            Me.columnps4 = New Global.System.Data.DataColumn("ps4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnps4)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newz3_mzvRow() As z3_mzvRow
            Return CType(Me.NewRow,z3_mzvRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New z3_mzvRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(z3_mzvRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.z3_mzvRowChangedEvent) Is Nothing) Then
                RaiseEvent z3_mzvRowChanged(Me, New z3_mzvRowChangeEvent(CType(e.Row,z3_mzvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.z3_mzvRowChangingEvent) Is Nothing) Then
                RaiseEvent z3_mzvRowChanging(Me, New z3_mzvRowChangeEvent(CType(e.Row,z3_mzvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.z3_mzvRowDeletedEvent) Is Nothing) Then
                RaiseEvent z3_mzvRowDeleted(Me, New z3_mzvRowChangeEvent(CType(e.Row,z3_mzvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.z3_mzvRowDeletingEvent) Is Nothing) Then
                RaiseEvent z3_mzvRowDeleting(Me, New z3_mzvRowChangeEvent(CType(e.Row,z3_mzvRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removez3_mzvRow(ByVal row As z3_mzvRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "z3_mzvDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class z3_speedDataTable
        Inherits Global.System.Data.TypedTableBase(Of z3_speedRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnid_z3 As Global.System.Data.DataColumn
        
        Private columnnumberPosition As Global.System.Data.DataColumn
        
        Private columnvl_pb As Global.System.Data.DataColumn
        
        Private columnv_b As Global.System.Data.DataColumn
        
        Private columnmashtab_mv As Global.System.Data.DataColumn
        
        Private columnmashtab_mv_view As Global.System.Data.DataColumn
        
        Private columnvp_P As Global.System.Data.DataColumn
        
        Private columnangle_Pb As Global.System.Data.DataColumn
        
        Private columnvp_b As Global.System.Data.DataColumn
        
        Private columnangle_bc As Global.System.Data.DataColumn
        
        Private columnangle_px As Global.System.Data.DataColumn
        
        Private columnvp_c As Global.System.Data.DataColumn
        
        Private columnv_c As Global.System.Data.DataColumn
        
        Private columnvl_c As Global.System.Data.DataColumn
        
        Private columnv_bc As Global.System.Data.DataColumn
        
        Private columnvl_bc As Global.System.Data.DataColumn
        
        Private columnv_cd As Global.System.Data.DataColumn
        
        Private columnvl_cd As Global.System.Data.DataColumn
        
        Private columnangle_cd As Global.System.Data.DataColumn
        
        Private columnvp_d As Global.System.Data.DataColumn
        
        Private columnv_d As Global.System.Data.DataColumn
        
        Private columnvl_d As Global.System.Data.DataColumn
        
        Private columnvp_s2 As Global.System.Data.DataColumn
        
        Private columnv_ps2 As Global.System.Data.DataColumn
        
        Private columnvl_ps2 As Global.System.Data.DataColumn
        
        Private columnvp_s3 As Global.System.Data.DataColumn
        
        Private columnv_ps3 As Global.System.Data.DataColumn
        
        Private columnvl_ps3 As Global.System.Data.DataColumn
        
        Private columnvp_s4 As Global.System.Data.DataColumn
        
        Private columnv_ps4 As Global.System.Data.DataColumn
        
        Private columnvl_ps4 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "z3_speed"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_z3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_z3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property numberPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumberPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vl_pbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvl_pb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property v_bColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnv_b
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mashtab_mvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmashtab_mv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property mashtab_mv_viewColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmashtab_mv_view
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vp_PColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvp_P
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property angle_PbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnangle_Pb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vp_bColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvp_b
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property angle_bcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnangle_bc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property angle_pxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnangle_px
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vp_cColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvp_c
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property v_cColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnv_c
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vl_cColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvl_c
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property v_bcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnv_bc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vl_bcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvl_bc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property v_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnv_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vl_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvl_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property angle_cdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnangle_cd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vp_dColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvp_d
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property v_dColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnv_d
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vl_dColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvl_d
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vp_s2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvp_s2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property v_ps2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnv_ps2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vl_ps2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvl_ps2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vp_s3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvp_s3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property v_ps3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnv_ps3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vl_ps3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvl_ps3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vp_s4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvp_s4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property v_ps4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnv_ps4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vl_ps4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnvl_ps4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As z3_speedRow
            Get
                Return CType(Me.Rows(index),z3_speedRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_speedRowChanging As z3_speedRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_speedRowChanged As z3_speedRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_speedRowDeleting As z3_speedRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event z3_speedRowDeleted As z3_speedRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addz3_speedRow(ByVal row As z3_speedRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addz3_speedRow( _
                    ByVal id As Long,  _
                    ByVal id_z3 As Long,  _
                    ByVal numberPosition As Long,  _
                    ByVal vl_pb As Double,  _
                    ByVal v_b As Double,  _
                    ByVal mashtab_mv As Double,  _
                    ByVal mashtab_mv_view As Double,  _
                    ByVal vp_P As String,  _
                    ByVal angle_Pb As Double,  _
                    ByVal vp_b As String,  _
                    ByVal angle_bc As Double,  _
                    ByVal angle_px As Double,  _
                    ByVal vp_c As String,  _
                    ByVal v_c As Double,  _
                    ByVal vl_c As Double,  _
                    ByVal v_bc As Double,  _
                    ByVal vl_bc As Double,  _
                    ByVal v_cd As Double,  _
                    ByVal vl_cd As Double,  _
                    ByVal angle_cd As Double,  _
                    ByVal vp_d As String,  _
                    ByVal v_d As Double,  _
                    ByVal vl_d As Double,  _
                    ByVal vp_s2 As String,  _
                    ByVal v_ps2 As Double,  _
                    ByVal vl_ps2 As Double,  _
                    ByVal vp_s3 As String,  _
                    ByVal v_ps3 As Double,  _
                    ByVal vl_ps3 As Double,  _
                    ByVal vp_s4 As String,  _
                    ByVal v_ps4 As Double,  _
                    ByVal vl_ps4 As Double) As z3_speedRow
            Dim rowz3_speedRow As z3_speedRow = CType(Me.NewRow,z3_speedRow)
            Dim columnValuesArray() As Object = New Object() {id, id_z3, numberPosition, vl_pb, v_b, mashtab_mv, mashtab_mv_view, vp_P, angle_Pb, vp_b, angle_bc, angle_px, vp_c, v_c, vl_c, v_bc, vl_bc, v_cd, vl_cd, angle_cd, vp_d, v_d, vl_d, vp_s2, v_ps2, vl_ps2, vp_s3, v_ps3, vl_ps3, vp_s4, v_ps4, vl_ps4}
            rowz3_speedRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowz3_speedRow)
            Return rowz3_speedRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As z3_speedRow
            Return CType(Me.Rows.Find(New Object() {id}),z3_speedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As z3_speedDataTable = CType(MyBase.Clone,z3_speedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New z3_speedDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnid_z3 = MyBase.Columns("id_z3")
            Me.columnnumberPosition = MyBase.Columns("numberPosition")
            Me.columnvl_pb = MyBase.Columns("vl_pb")
            Me.columnv_b = MyBase.Columns("v_b")
            Me.columnmashtab_mv = MyBase.Columns("mashtab_mv")
            Me.columnmashtab_mv_view = MyBase.Columns("mashtab_mv_view")
            Me.columnvp_P = MyBase.Columns("vp_P")
            Me.columnangle_Pb = MyBase.Columns("angle_Pb")
            Me.columnvp_b = MyBase.Columns("vp_b")
            Me.columnangle_bc = MyBase.Columns("angle_bc")
            Me.columnangle_px = MyBase.Columns("angle_px")
            Me.columnvp_c = MyBase.Columns("vp_c")
            Me.columnv_c = MyBase.Columns("v_c")
            Me.columnvl_c = MyBase.Columns("vl_c")
            Me.columnv_bc = MyBase.Columns("v_bc")
            Me.columnvl_bc = MyBase.Columns("vl_bc")
            Me.columnv_cd = MyBase.Columns("v_cd")
            Me.columnvl_cd = MyBase.Columns("vl_cd")
            Me.columnangle_cd = MyBase.Columns("angle_cd")
            Me.columnvp_d = MyBase.Columns("vp_d")
            Me.columnv_d = MyBase.Columns("v_d")
            Me.columnvl_d = MyBase.Columns("vl_d")
            Me.columnvp_s2 = MyBase.Columns("vp_s2")
            Me.columnv_ps2 = MyBase.Columns("v_ps2")
            Me.columnvl_ps2 = MyBase.Columns("vl_ps2")
            Me.columnvp_s3 = MyBase.Columns("vp_s3")
            Me.columnv_ps3 = MyBase.Columns("v_ps3")
            Me.columnvl_ps3 = MyBase.Columns("vl_ps3")
            Me.columnvp_s4 = MyBase.Columns("vp_s4")
            Me.columnv_ps4 = MyBase.Columns("v_ps4")
            Me.columnvl_ps4 = MyBase.Columns("vl_ps4")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnid_z3 = New Global.System.Data.DataColumn("id_z3", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_z3)
            Me.columnnumberPosition = New Global.System.Data.DataColumn("numberPosition", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumberPosition)
            Me.columnvl_pb = New Global.System.Data.DataColumn("vl_pb", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvl_pb)
            Me.columnv_b = New Global.System.Data.DataColumn("v_b", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnv_b)
            Me.columnmashtab_mv = New Global.System.Data.DataColumn("mashtab_mv", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmashtab_mv)
            Me.columnmashtab_mv_view = New Global.System.Data.DataColumn("mashtab_mv_view", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmashtab_mv_view)
            Me.columnvp_P = New Global.System.Data.DataColumn("vp_P", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvp_P)
            Me.columnangle_Pb = New Global.System.Data.DataColumn("angle_Pb", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnangle_Pb)
            Me.columnvp_b = New Global.System.Data.DataColumn("vp_b", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvp_b)
            Me.columnangle_bc = New Global.System.Data.DataColumn("angle_bc", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnangle_bc)
            Me.columnangle_px = New Global.System.Data.DataColumn("angle_px", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnangle_px)
            Me.columnvp_c = New Global.System.Data.DataColumn("vp_c", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvp_c)
            Me.columnv_c = New Global.System.Data.DataColumn("v_c", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnv_c)
            Me.columnvl_c = New Global.System.Data.DataColumn("vl_c", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvl_c)
            Me.columnv_bc = New Global.System.Data.DataColumn("v_bc", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnv_bc)
            Me.columnvl_bc = New Global.System.Data.DataColumn("vl_bc", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvl_bc)
            Me.columnv_cd = New Global.System.Data.DataColumn("v_cd", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnv_cd)
            Me.columnvl_cd = New Global.System.Data.DataColumn("vl_cd", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvl_cd)
            Me.columnangle_cd = New Global.System.Data.DataColumn("angle_cd", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnangle_cd)
            Me.columnvp_d = New Global.System.Data.DataColumn("vp_d", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvp_d)
            Me.columnv_d = New Global.System.Data.DataColumn("v_d", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnv_d)
            Me.columnvl_d = New Global.System.Data.DataColumn("vl_d", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvl_d)
            Me.columnvp_s2 = New Global.System.Data.DataColumn("vp_s2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvp_s2)
            Me.columnv_ps2 = New Global.System.Data.DataColumn("v_ps2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnv_ps2)
            Me.columnvl_ps2 = New Global.System.Data.DataColumn("vl_ps2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvl_ps2)
            Me.columnvp_s3 = New Global.System.Data.DataColumn("vp_s3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvp_s3)
            Me.columnv_ps3 = New Global.System.Data.DataColumn("v_ps3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnv_ps3)
            Me.columnvl_ps3 = New Global.System.Data.DataColumn("vl_ps3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvl_ps3)
            Me.columnvp_s4 = New Global.System.Data.DataColumn("vp_s4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvp_s4)
            Me.columnv_ps4 = New Global.System.Data.DataColumn("v_ps4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnv_ps4)
            Me.columnvl_ps4 = New Global.System.Data.DataColumn("vl_ps4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvl_ps4)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newz3_speedRow() As z3_speedRow
            Return CType(Me.NewRow,z3_speedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New z3_speedRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(z3_speedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.z3_speedRowChangedEvent) Is Nothing) Then
                RaiseEvent z3_speedRowChanged(Me, New z3_speedRowChangeEvent(CType(e.Row,z3_speedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.z3_speedRowChangingEvent) Is Nothing) Then
                RaiseEvent z3_speedRowChanging(Me, New z3_speedRowChangeEvent(CType(e.Row,z3_speedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.z3_speedRowDeletedEvent) Is Nothing) Then
                RaiseEvent z3_speedRowDeleted(Me, New z3_speedRowChangeEvent(CType(e.Row,z3_speedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.z3_speedRowDeletingEvent) Is Nothing) Then
                RaiseEvent z3_speedRowDeleting(Me, New z3_speedRowChangeEvent(CType(e.Row,z3_speedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removez3_speedRow(ByVal row As z3_speedRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "z3_speedDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class zadaniaDataTable
        Inherits Global.System.Data.TypedTableBase(Of zadaniaRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnzd As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columncomment As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "zadania"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property zdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnzd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As zadaniaRow
            Get
                Return CType(Me.Rows(index),zadaniaRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event zadaniaRowChanging As zadaniaRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event zadaniaRowChanged As zadaniaRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event zadaniaRowDeleting As zadaniaRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event zadaniaRowDeleted As zadaniaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddzadaniaRow(ByVal row As zadaniaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddzadaniaRow(ByVal id As Long, ByVal zd As String, ByVal name As String, ByVal comment As String) As zadaniaRow
            Dim rowzadaniaRow As zadaniaRow = CType(Me.NewRow,zadaniaRow)
            Dim columnValuesArray() As Object = New Object() {id, zd, name, comment}
            rowzadaniaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowzadaniaRow)
            Return rowzadaniaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As zadaniaRow
            Return CType(Me.Rows.Find(New Object() {id}),zadaniaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As zadaniaDataTable = CType(MyBase.Clone,zadaniaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New zadaniaDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnzd = MyBase.Columns("zd")
            Me.columnname = MyBase.Columns("name")
            Me.columncomment = MyBase.Columns("comment")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnzd = New Global.System.Data.DataColumn("zd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnzd)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomment)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnzd}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnzd.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewzadaniaRow() As zadaniaRow
            Return CType(Me.NewRow,zadaniaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New zadaniaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(zadaniaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.zadaniaRowChangedEvent) Is Nothing) Then
                RaiseEvent zadaniaRowChanged(Me, New zadaniaRowChangeEvent(CType(e.Row,zadaniaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.zadaniaRowChangingEvent) Is Nothing) Then
                RaiseEvent zadaniaRowChanging(Me, New zadaniaRowChangeEvent(CType(e.Row,zadaniaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.zadaniaRowDeletedEvent) Is Nothing) Then
                RaiseEvent zadaniaRowDeleted(Me, New zadaniaRowChangeEvent(CType(e.Row,zadaniaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.zadaniaRowDeletingEvent) Is Nothing) Then
                RaiseEvent zadaniaRowDeleting(Me, New zadaniaRowChangeEvent(CType(e.Row,zadaniaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovezadaniaRow(ByVal row As zadaniaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "zadaniaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class zd_registerDataTable
        Inherits Global.System.Data.TypedTableBase(Of zd_registerRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "zd_register"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As zd_registerRow
            Get
                Return CType(Me.Rows(index),zd_registerRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event zd_registerRowChanging As zd_registerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event zd_registerRowChanged As zd_registerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event zd_registerRowDeleting As zd_registerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event zd_registerRowDeleted As zd_registerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addzd_registerRow(ByVal row As zd_registerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addzd_registerRow(ByVal id As Long) As zd_registerRow
            Dim rowzd_registerRow As zd_registerRow = CType(Me.NewRow,zd_registerRow)
            Dim columnValuesArray() As Object = New Object() {id}
            rowzd_registerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowzd_registerRow)
            Return rowzd_registerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As zd_registerRow
            Return CType(Me.Rows.Find(New Object() {id}),zd_registerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As zd_registerDataTable = CType(MyBase.Clone,zd_registerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New zd_registerDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newzd_registerRow() As zd_registerRow
            Return CType(Me.NewRow,zd_registerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New zd_registerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(zd_registerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.zd_registerRowChangedEvent) Is Nothing) Then
                RaiseEvent zd_registerRowChanged(Me, New zd_registerRowChangeEvent(CType(e.Row,zd_registerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.zd_registerRowChangingEvent) Is Nothing) Then
                RaiseEvent zd_registerRowChanging(Me, New zd_registerRowChangeEvent(CType(e.Row,zd_registerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.zd_registerRowDeletedEvent) Is Nothing) Then
                RaiseEvent zd_registerRowDeleted(Me, New zd_registerRowChangeEvent(CType(e.Row,zd_registerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.zd_registerRowDeletingEvent) Is Nothing) Then
                RaiseEvent zd_registerRowDeleting(Me, New zd_registerRowChangeEvent(CType(e.Row,zd_registerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removezd_registerRow(ByVal row As zd_registerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "zd_registerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class zd_studentDataTable
        Inherits Global.System.Data.TypedTableBase(Of zd_studentRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnst_name As Global.System.Data.DataColumn
        
        Private columnid_zd As Global.System.Data.DataColumn
        
        Private columnvariant As Global.System.Data.DataColumn
        
        Private columnyear As Global.System.Data.DataColumn
        
        Private columnlstn As Global.System.Data.DataColumn
        
        Private columnid_dodatok2 As Global.System.Data.DataColumn
        
        Private columnml_AB As Global.System.Data.DataColumn
        
        Private columnvl_pb As Global.System.Data.DataColumn
        
        Private columnal_pib As Global.System.Data.DataColumn
        
        Private columncomm As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "zd_student"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property st_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnst_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_zdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_zd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property variantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvariant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property lstnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlstn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property id_dodatok2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_dodatok2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ml_ABColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnml_AB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vl_pbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvl_pb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property al_pibColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnal_pib
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property commColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As zd_studentRow
            Get
                Return CType(Me.Rows(index),zd_studentRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event zd_studentRowChanging As zd_studentRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event zd_studentRowChanged As zd_studentRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event zd_studentRowDeleting As zd_studentRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event zd_studentRowDeleted As zd_studentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addzd_studentRow(ByVal row As zd_studentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addzd_studentRow(ByVal id As Long, ByVal st_name As String, ByVal id_zd As Long, ByVal _variant As Long, ByVal year As Long, ByVal lstn As Long, ByVal id_dodatok2 As Long, ByVal ml_AB As Double, ByVal vl_pb As Double, ByVal al_pib As Double, ByVal comm As String) As zd_studentRow
            Dim rowzd_studentRow As zd_studentRow = CType(Me.NewRow,zd_studentRow)
            Dim columnValuesArray() As Object = New Object() {id, st_name, id_zd, _variant, year, lstn, id_dodatok2, ml_AB, vl_pb, al_pib, comm}
            rowzd_studentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowzd_studentRow)
            Return rowzd_studentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByid(ByVal id As Long) As zd_studentRow
            Return CType(Me.Rows.Find(New Object() {id}),zd_studentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As zd_studentDataTable = CType(MyBase.Clone,zd_studentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New zd_studentDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnst_name = MyBase.Columns("st_name")
            Me.columnid_zd = MyBase.Columns("id_zd")
            Me.columnvariant = MyBase.Columns("variant")
            Me.columnyear = MyBase.Columns("year")
            Me.columnlstn = MyBase.Columns("lstn")
            Me.columnid_dodatok2 = MyBase.Columns("id_dodatok2")
            Me.columnml_AB = MyBase.Columns("ml_AB")
            Me.columnvl_pb = MyBase.Columns("vl_pb")
            Me.columnal_pib = MyBase.Columns("al_pib")
            Me.columncomm = MyBase.Columns("comm")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnst_name = New Global.System.Data.DataColumn("st_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnst_name)
            Me.columnid_zd = New Global.System.Data.DataColumn("id_zd", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_zd)
            Me.columnvariant = New Global.System.Data.DataColumn("variant", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            Me.columnvariant.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "variantColumn")
            Me.columnvariant.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnvariant")
            Me.columnvariant.ExtendedProperties.Add("Generator_UserColumnName", "variant")
            MyBase.Columns.Add(Me.columnvariant)
            Me.columnyear = New Global.System.Data.DataColumn("year", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyear)
            Me.columnlstn = New Global.System.Data.DataColumn("lstn", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlstn)
            Me.columnid_dodatok2 = New Global.System.Data.DataColumn("id_dodatok2", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_dodatok2)
            Me.columnml_AB = New Global.System.Data.DataColumn("ml_AB", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnml_AB)
            Me.columnvl_pb = New Global.System.Data.DataColumn("vl_pb", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvl_pb)
            Me.columnal_pib = New Global.System.Data.DataColumn("al_pib", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnal_pib)
            Me.columncomm = New Global.System.Data.DataColumn("comm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomm)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newzd_studentRow() As zd_studentRow
            Return CType(Me.NewRow,zd_studentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New zd_studentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(zd_studentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.zd_studentRowChangedEvent) Is Nothing) Then
                RaiseEvent zd_studentRowChanged(Me, New zd_studentRowChangeEvent(CType(e.Row,zd_studentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.zd_studentRowChangingEvent) Is Nothing) Then
                RaiseEvent zd_studentRowChanging(Me, New zd_studentRowChangeEvent(CType(e.Row,zd_studentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.zd_studentRowDeletedEvent) Is Nothing) Then
                RaiseEvent zd_studentRowDeleted(Me, New zd_studentRowChangeEvent(CType(e.Row,zd_studentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.zd_studentRowDeletingEvent) Is Nothing) Then
                RaiseEvent zd_studentRowDeleting(Me, New zd_studentRowChangeEvent(CType(e.Row,zd_studentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removezd_studentRow(ByVal row As zd_studentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSet1 = New DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "zd_studentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class dodatok2Row
        Inherits Global.System.Data.DataRow
        
        Private tabledodatok2 As dodatok2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledodatok2 = CType(Me.Table,dodatok2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tabledodatok2.idColumn),Long)
            End Get
            Set
                Me(Me.tabledodatok2.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property digit_year() As String
            Get
                Try 
                    Return CType(Me(Me.tabledodatok2.digit_yearColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'digit_year' в таблице 'dodatok2' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledodatok2.digit_yearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledodatok2.nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'name' в таблице 'dodatok2' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledodatok2.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property w2() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledodatok2.w2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'w2' в таблице 'dodatok2' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledodatok2.w2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property delta() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledodatok2.deltaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'delta' в таблице 'dodatok2' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledodatok2.deltaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property dif() As Long
            Get
                Try 
                    Return CType(Me(Me.tabledodatok2.difColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'dif' в таблице 'dodatok2' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledodatok2.difColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property h() As Long
            Get
                Try 
                    Return CType(Me(Me.tabledodatok2.hColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'h' в таблице 'dodatok2' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledodatok2.hColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property zi() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledodatok2.ziColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'zi' в таблице 'dodatok2' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledodatok2.ziColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property zm() As Double
            Get
                Try 
                    Return CType(Me(Me.tabledodatok2.zmColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'zm' в таблице 'dodatok2' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledodatok2.zmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vf() As String
            Get
                Try 
                    Return CType(Me(Me.tabledodatok2.vfColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vf' в таблице 'dodatok2' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledodatok2.vfColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property position_m() As Long
            Get
                Try 
                    Return CType(Me(Me.tabledodatok2.position_mColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'position_m' в таблице 'dodatok2' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledodatok2.position_mColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isdigit_yearNull() As Boolean
            Return Me.IsNull(Me.tabledodatok2.digit_yearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setdigit_yearNull()
            Me(Me.tabledodatok2.digit_yearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tabledodatok2.nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetnameNull()
            Me(Me.tabledodatok2.nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isw2Null() As Boolean
            Return Me.IsNull(Me.tabledodatok2.w2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setw2Null()
            Me(Me.tabledodatok2.w2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsdeltaNull() As Boolean
            Return Me.IsNull(Me.tabledodatok2.deltaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetdeltaNull()
            Me(Me.tabledodatok2.deltaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsdifNull() As Boolean
            Return Me.IsNull(Me.tabledodatok2.difColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetdifNull()
            Me(Me.tabledodatok2.difColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IshNull() As Boolean
            Return Me.IsNull(Me.tabledodatok2.hColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SethNull()
            Me(Me.tabledodatok2.hColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsziNull() As Boolean
            Return Me.IsNull(Me.tabledodatok2.ziColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetziNull()
            Me(Me.tabledodatok2.ziColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IszmNull() As Boolean
            Return Me.IsNull(Me.tabledodatok2.zmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetzmNull()
            Me(Me.tabledodatok2.zmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsvfNull() As Boolean
            Return Me.IsNull(Me.tabledodatok2.vfColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetvfNull()
            Me(Me.tabledodatok2.vfColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isposition_mNull() As Boolean
            Return Me.IsNull(Me.tabledodatok2.position_mColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setposition_mNull()
            Me(Me.tabledodatok2.position_mColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class instaceRow
        Inherits Global.System.Data.DataRow
        
        Private tableinstace As instaceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableinstace = CType(Me.Table,instaceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_instance() As Long
            Get
                Try 
                    Return CType(Me(Me.tableinstace.id_instanceColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'id_instance' в таблице 'instace' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstace.id_instanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property zd() As String
            Get
                Try 
                    Return CType(Me(Me.tableinstace.zdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'zd' в таблице 'instace' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinstace.zdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_instanceNull() As Boolean
            Return Me.IsNull(Me.tableinstace.id_instanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_instanceNull()
            Me(Me.tableinstace.id_instanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IszdNull() As Boolean
            Return Me.IsNull(Me.tableinstace.zdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetzdNull()
            Me(Me.tableinstace.zdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class lstnRow
        Inherits Global.System.Data.DataRow
        
        Private tablelstn As lstnDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablelstn = CType(Me.Table,lstnDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablelstn.idColumn),Long)
            End Get
            Set
                Me(Me.tablelstn.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property name() As String
            Get
                Try 
                    Return CType(Me(Me.tablelstn.nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'name' в таблице 'lstn' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelstn.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property counter() As Long
            Get
                Try 
                    Return CType(Me(Me.tablelstn.counterColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'counter' в таблице 'lstn' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelstn.counterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property tableNameZD() As String
            Get
                Try 
                    Return CType(Me(Me.tablelstn.tableNameZDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'tableNameZD' в таблице 'lstn' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelstn.tableNameZDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablelstn.nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetnameNull()
            Me(Me.tablelstn.nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscounterNull() As Boolean
            Return Me.IsNull(Me.tablelstn.counterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcounterNull()
            Me(Me.tablelstn.counterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IstableNameZDNull() As Boolean
            Return Me.IsNull(Me.tablelstn.tableNameZDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SettableNameZDNull()
            Me(Me.tablelstn.tableNameZDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class sqlite_sequenceRow
        Inherits Global.System.Data.DataRow
        
        Private tablesqlite_sequence As sqlite_sequenceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesqlite_sequence = CType(Me.Table,sqlite_sequenceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property name() As String
            Get
                Try 
                    Return CType(Me(Me.tablesqlite_sequence.nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'name' в таблице 'sqlite_sequence' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesqlite_sequence.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property seq() As Long
            Get
                Try 
                    Return CType(Me(Me.tablesqlite_sequence.seqColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'seq' в таблице 'sqlite_sequence' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesqlite_sequence.seqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablesqlite_sequence.nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetnameNull()
            Me(Me.tablesqlite_sequence.nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsseqNull() As Boolean
            Return Me.IsNull(Me.tablesqlite_sequence.seqColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetseqNull()
            Me(Me.tablesqlite_sequence.seqColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class studentRow
        Inherits Global.System.Data.DataRow
        
        Private tablestudent As studentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablestudent = CType(Me.Table,studentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablestudent.idColumn),Long)
            End Get
            Set
                Me(Me.tablestudent.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property first_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudent.first_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'first_name' в таблице 'student' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudent.first_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property last_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudent.last_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'last_name' в таблице 'student' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudent.last_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property group() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudent.groupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'group' в таблице 'student' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudent.groupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property year() As Long
            Get
                Try 
                    Return CType(Me(Me.tablestudent.yearColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'year' в таблице 'student' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudent.yearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property st_book() As String
            Get
                Try 
                    Return CType(Me(Me.tablestudent.st_bookColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'st_book' в таблице 'student' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablestudent.st_bookColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isfirst_nameNull() As Boolean
            Return Me.IsNull(Me.tablestudent.first_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setfirst_nameNull()
            Me(Me.tablestudent.first_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Islast_nameNull() As Boolean
            Return Me.IsNull(Me.tablestudent.last_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setlast_nameNull()
            Me(Me.tablestudent.last_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsgroupNull() As Boolean
            Return Me.IsNull(Me.tablestudent.groupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetgroupNull()
            Me(Me.tablestudent.groupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsyearNull() As Boolean
            Return Me.IsNull(Me.tablestudent.yearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetyearNull()
            Me(Me.tablestudent.yearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isst_bookNull() As Boolean
            Return Me.IsNull(Me.tablestudent.st_bookColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setst_bookNull()
            Me(Me.tablestudent.st_bookColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class sys_tablesRow
        Inherits Global.System.Data.DataRow
        
        Private tablesys_tables As sys_tablesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesys_tables = CType(Me.Table,sys_tablesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Try 
                    Return CType(Me(Me.tablesys_tables.idColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'id' в таблице 'sys_tables' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesys_tables.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property name() As String
            Get
                Try 
                    Return CType(Me(Me.tablesys_tables.nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'name' в таблице 'sys_tables' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesys_tables.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comment() As String
            Get
                Try 
                    Return CType(Me(Me.tablesys_tables.commentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'comment' в таблице 'sys_tables' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesys_tables.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tablesys_tables.idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetidNull()
            Me(Me.tablesys_tables.idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablesys_tables.nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetnameNull()
            Me(Me.tablesys_tables.nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscommentNull() As Boolean
            Return Me.IsNull(Me.tablesys_tables.commentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcommentNull()
            Me(Me.tablesys_tables.commentColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class z3Row
        Inherits Global.System.Data.DataRow
        
        Private tablez3 As z3DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablez3 = CType(Me.Table,z3DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablez3.idColumn),Long)
            End Get
            Set
                Me(Me.tablez3.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property _variant() As Long
            Get
                Try 
                    Return CType(Me(Me.tablez3.variantColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'variant' в таблице 'z3' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3.variantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comment() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3.commentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'comment' в таблице 'z3' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is_variantNull() As Boolean
            Return Me.IsNull(Me.tablez3.variantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set_variantNull()
            Me(Me.tablez3.variantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscommentNull() As Boolean
            Return Me.IsNull(Me.tablez3.commentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcommentNull()
            Me(Me.tablez3.commentColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class z3_accelerationRow
        Inherits Global.System.Data.DataRow
        
        Private tablez3_acceleration As z3_accelerationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablez3_acceleration = CType(Me.Table,z3_accelerationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablez3_acceleration.idColumn),Long)
            End Get
            Set
                Me(Me.tablez3_acceleration.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_z3() As Long
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.id_z3Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'id_z3' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.id_z3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property numberPosition() As Long
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.numberPositionColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'numberPosition' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.numberPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property al_pb() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.al_pbColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'al_pb' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.al_pbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ab() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.abColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ab' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.abColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mashtab_ma() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.mashtab_maColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'mashtab_ma' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.mashtab_maColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mashtab_ma_view() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.mashtab_ma_viewColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'mashtab_ma_view' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.mashtab_ma_viewColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ap_pi() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.ap_piColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ap_pi' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.ap_piColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property angle_Pb() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.angle_PbColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'angle_Pb' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.angle_PbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ap_b() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.ap_bColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ap_b' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.ap_bColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property a_bn3() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.a_bn3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'a_bn3' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.a_bn3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property al_bn3() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.al_bn3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'al_bn3' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.al_bn3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property angleCB() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.angleCBColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'angleCB' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.angleCBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ap_n3() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.ap_n3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ap_n3' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.ap_n3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ap_c() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.ap_cColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ap_c' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.ap_cColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property a_c() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.a_cColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'a_c' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.a_cColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property al_c() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.al_cColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'al_c' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.al_cColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property a_n3c() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.a_n3cColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'a_n3c' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.a_n3cColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property al_n3c() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.al_n3cColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'al_n3c' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.al_n3cColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property a_bc() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.a_bcColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'a_bc' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.a_bcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property al_bc() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.al_bcColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'al_bc' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.al_bcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property a_cd() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.a_cdColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'a_cd' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.a_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property al_cd() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.al_cdColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'al_cd' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.al_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property angle_cd() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.angle_cdColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'angle_cd' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.angle_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ap_d() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.ap_dColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ap_d' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.ap_dColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property a_d() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.a_dColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'a_d' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.a_dColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property al_d() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.al_dColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'al_d' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.al_dColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ap_s2() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.ap_s2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ap_s2' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.ap_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property a_s2() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.a_s2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'a_s2' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.a_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property al_s2() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.al_s2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'al_s2' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.al_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ap_s3() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.ap_s3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ap_s3' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.ap_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property a_s3() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.a_s3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'a_s3' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.a_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property al_s3() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.al_s3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'al_s3' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.al_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ap_s4() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.ap_s4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ap_s4' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.ap_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property a_s4() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.a_s4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'a_s4' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.a_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property al_s4() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_acceleration.al_s4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'al_s4' в таблице 'z3_acceleration' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_acceleration.al_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_z3Null() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.id_z3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_z3Null()
            Me(Me.tablez3_acceleration.id_z3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsnumberPositionNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.numberPositionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetnumberPositionNull()
            Me(Me.tablez3_acceleration.numberPositionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isal_pbNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.al_pbColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setal_pbNull()
            Me(Me.tablez3_acceleration.al_pbColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsabNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.abColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetabNull()
            Me(Me.tablez3_acceleration.abColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ismashtab_maNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.mashtab_maColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setmashtab_maNull()
            Me(Me.tablez3_acceleration.mashtab_maColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ismashtab_ma_viewNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.mashtab_ma_viewColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setmashtab_ma_viewNull()
            Me(Me.tablez3_acceleration.mashtab_ma_viewColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isap_piNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.ap_piColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setap_piNull()
            Me(Me.tablez3_acceleration.ap_piColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isangle_PbNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.angle_PbColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setangle_PbNull()
            Me(Me.tablez3_acceleration.angle_PbColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isap_bNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.ap_bColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setap_bNull()
            Me(Me.tablez3_acceleration.ap_bColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isa_bn3Null() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.a_bn3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Seta_bn3Null()
            Me(Me.tablez3_acceleration.a_bn3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isal_bn3Null() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.al_bn3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setal_bn3Null()
            Me(Me.tablez3_acceleration.al_bn3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsangleCBNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.angleCBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetangleCBNull()
            Me(Me.tablez3_acceleration.angleCBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isap_n3Null() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.ap_n3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setap_n3Null()
            Me(Me.tablez3_acceleration.ap_n3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isap_cNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.ap_cColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setap_cNull()
            Me(Me.tablez3_acceleration.ap_cColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isa_cNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.a_cColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Seta_cNull()
            Me(Me.tablez3_acceleration.a_cColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isal_cNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.al_cColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setal_cNull()
            Me(Me.tablez3_acceleration.al_cColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isa_n3cNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.a_n3cColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Seta_n3cNull()
            Me(Me.tablez3_acceleration.a_n3cColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isal_n3cNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.al_n3cColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setal_n3cNull()
            Me(Me.tablez3_acceleration.al_n3cColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isa_bcNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.a_bcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Seta_bcNull()
            Me(Me.tablez3_acceleration.a_bcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isal_bcNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.al_bcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setal_bcNull()
            Me(Me.tablez3_acceleration.al_bcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isa_cdNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.a_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Seta_cdNull()
            Me(Me.tablez3_acceleration.a_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isal_cdNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.al_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setal_cdNull()
            Me(Me.tablez3_acceleration.al_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isangle_cdNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.angle_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setangle_cdNull()
            Me(Me.tablez3_acceleration.angle_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isap_dNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.ap_dColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setap_dNull()
            Me(Me.tablez3_acceleration.ap_dColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isa_dNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.a_dColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Seta_dNull()
            Me(Me.tablez3_acceleration.a_dColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isal_dNull() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.al_dColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setal_dNull()
            Me(Me.tablez3_acceleration.al_dColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isap_s2Null() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.ap_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setap_s2Null()
            Me(Me.tablez3_acceleration.ap_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isa_s2Null() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.a_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Seta_s2Null()
            Me(Me.tablez3_acceleration.a_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isal_s2Null() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.al_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setal_s2Null()
            Me(Me.tablez3_acceleration.al_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isap_s3Null() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.ap_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setap_s3Null()
            Me(Me.tablez3_acceleration.ap_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isa_s3Null() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.a_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Seta_s3Null()
            Me(Me.tablez3_acceleration.a_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isal_s3Null() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.al_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setal_s3Null()
            Me(Me.tablez3_acceleration.al_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isap_s4Null() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.ap_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setap_s4Null()
            Me(Me.tablez3_acceleration.ap_s4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isa_s4Null() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.a_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Seta_s4Null()
            Me(Me.tablez3_acceleration.a_s4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isal_s4Null() As Boolean
            Return Me.IsNull(Me.tablez3_acceleration.al_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setal_s4Null()
            Me(Me.tablez3_acceleration.al_s4Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class z3_dataRow
        Inherits Global.System.Data.DataRow
        
        Private tablez3_data As z3_dataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablez3_data = CType(Me.Table,z3_dataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablez3_data.idColumn),Long)
            End Get
            Set
                Me(Me.tablez3_data.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property L_ab() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_data.L_abColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'L_ab' в таблице 'z3_data' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_data.L_abColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property L_bc() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_data.L_bcColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'L_bc' в таблице 'z3_data' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_data.L_bcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property L_bd() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_data.L_bdColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'L_bd' в таблице 'z3_data' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_data.L_bdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property L_a() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_data.L_aColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'L_a' в таблице 'z3_data' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_data.L_aColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property m2() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_data.m2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'm2' в таблице 'z3_data' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_data.m2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property m3() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_data.m3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'm3' в таблице 'z3_data' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_data.m3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property m4() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_data.m4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'm4' в таблице 'z3_data' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_data.m4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Fc() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_data.FcColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Fc' в таблице 'z3_data' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_data.FcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property fi_v() As Long
            Get
                Try 
                    Return CType(Me(Me.tablez3_data.fi_vColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'fi_v' в таблице 'z3_data' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_data.fi_vColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property fi_dv() As Long
            Get
                Try 
                    Return CType(Me(Me.tablez3_data.fi_dvColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'fi_dv' в таблице 'z3_data' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_data.fi_dvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property fi_pov() As Long
            Get
                Try 
                    Return CType(Me(Me.tablez3_data.fi_povColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'fi_pov' в таблице 'z3_data' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_data.fi_povColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsL_abNull() As Boolean
            Return Me.IsNull(Me.tablez3_data.L_abColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetL_abNull()
            Me(Me.tablez3_data.L_abColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsL_bcNull() As Boolean
            Return Me.IsNull(Me.tablez3_data.L_bcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetL_bcNull()
            Me(Me.tablez3_data.L_bcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsL_bdNull() As Boolean
            Return Me.IsNull(Me.tablez3_data.L_bdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetL_bdNull()
            Me(Me.tablez3_data.L_bdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsL_aNull() As Boolean
            Return Me.IsNull(Me.tablez3_data.L_aColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetL_aNull()
            Me(Me.tablez3_data.L_aColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ism2Null() As Boolean
            Return Me.IsNull(Me.tablez3_data.m2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setm2Null()
            Me(Me.tablez3_data.m2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ism3Null() As Boolean
            Return Me.IsNull(Me.tablez3_data.m3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setm3Null()
            Me(Me.tablez3_data.m3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ism4Null() As Boolean
            Return Me.IsNull(Me.tablez3_data.m4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setm4Null()
            Me(Me.tablez3_data.m4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFcNull() As Boolean
            Return Me.IsNull(Me.tablez3_data.FcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFcNull()
            Me(Me.tablez3_data.FcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isfi_vNull() As Boolean
            Return Me.IsNull(Me.tablez3_data.fi_vColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setfi_vNull()
            Me(Me.tablez3_data.fi_vColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isfi_dvNull() As Boolean
            Return Me.IsNull(Me.tablez3_data.fi_dvColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setfi_dvNull()
            Me(Me.tablez3_data.fi_dvColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isfi_povNull() As Boolean
            Return Me.IsNull(Me.tablez3_data.fi_povColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setfi_povNull()
            Me(Me.tablez3_data.fi_povColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class z3_izvRow
        Inherits Global.System.Data.DataRow
        
        Private tablez3_izv As z3_izvDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablez3_izv = CType(Me.Table,z3_izvDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablez3_izv.idColumn),Long)
            End Get
            Set
                Me(Me.tablez3_izv.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_z3() As Long
            Get
                Try 
                    Return CType(Me(Me.tablez3_izv.id_z3Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'id_z3' в таблице 'z3_izv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_izv.id_z3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property L_ab() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_izv.L_abColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'L_ab' в таблице 'z3_izv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_izv.L_abColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property pb() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_izv.pbColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'pb' в таблице 'z3_izv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_izv.pbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property m3() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_izv.m3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'm3' в таблице 'z3_izv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_izv.m3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ps3() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_izv.ps3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ps3' в таблице 'z3_izv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_izv.ps3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property L_bc() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_izv.L_bcColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'L_bc' в таблице 'z3_izv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_izv.L_bcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vl_bc() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_izv.vl_bcColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vl_bc' в таблице 'z3_izv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_izv.vl_bcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property m4() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_izv.m4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'm4' в таблице 'z3_izv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_izv.m4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ps4() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_izv.ps4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ps4' в таблице 'z3_izv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_izv.ps4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property is2() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_izv.is2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'is2' в таблице 'z3_izv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_izv.is2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property is3() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_izv.is3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'is3' в таблице 'z3_izv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_izv.is3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property izv() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_izv.izvColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'izv' в таблице 'z3_izv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_izv.izvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_z3Null() As Boolean
            Return Me.IsNull(Me.tablez3_izv.id_z3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_z3Null()
            Me(Me.tablez3_izv.id_z3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsL_abNull() As Boolean
            Return Me.IsNull(Me.tablez3_izv.L_abColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetL_abNull()
            Me(Me.tablez3_izv.L_abColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IspbNull() As Boolean
            Return Me.IsNull(Me.tablez3_izv.pbColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetpbNull()
            Me(Me.tablez3_izv.pbColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ism3Null() As Boolean
            Return Me.IsNull(Me.tablez3_izv.m3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setm3Null()
            Me(Me.tablez3_izv.m3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isps3Null() As Boolean
            Return Me.IsNull(Me.tablez3_izv.ps3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setps3Null()
            Me(Me.tablez3_izv.ps3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsL_bcNull() As Boolean
            Return Me.IsNull(Me.tablez3_izv.L_bcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetL_bcNull()
            Me(Me.tablez3_izv.L_bcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvl_bcNull() As Boolean
            Return Me.IsNull(Me.tablez3_izv.vl_bcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvl_bcNull()
            Me(Me.tablez3_izv.vl_bcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ism4Null() As Boolean
            Return Me.IsNull(Me.tablez3_izv.m4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setm4Null()
            Me(Me.tablez3_izv.m4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isps4Null() As Boolean
            Return Me.IsNull(Me.tablez3_izv.ps4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setps4Null()
            Me(Me.tablez3_izv.ps4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isis2Null() As Boolean
            Return Me.IsNull(Me.tablez3_izv.is2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setis2Null()
            Me(Me.tablez3_izv.is2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isis3Null() As Boolean
            Return Me.IsNull(Me.tablez3_izv.is3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setis3Null()
            Me(Me.tablez3_izv.is3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsizvNull() As Boolean
            Return Me.IsNull(Me.tablez3_izv.izvColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetizvNull()
            Me(Me.tablez3_izv.izvColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class z3_mehanizmRow
        Inherits Global.System.Data.DataRow
        
        Private tablez3_mehanizm As z3_mehanizmDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablez3_mehanizm = CType(Me.Table,z3_mehanizmDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablez3_mehanizm.idColumn),Long)
            End Get
            Set
                Me(Me.tablez3_mehanizm.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_z3() As Long
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.id_z3Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'id_z3' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.id_z3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property numberPosition() As Long
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.numberPositionColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'numberPosition' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.numberPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ml_AB() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.ml_ABColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ml_AB' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.ml_ABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mashtab_ml() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.mashtab_mlColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'mashtab_ml' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.mashtab_mlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mashtab_ml_view() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.mashtab_ml_viewColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'mashtab_ml_view' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.mashtab_ml_viewColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ml_BC() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.ml_BCColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ml_BC' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.ml_BCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ml_BD() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.ml_BDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ml_BD' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.ml_BDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ml_CD() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.ml_CDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ml_CD' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.ml_CDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ml_a() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.ml_aColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ml_a' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.ml_aColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mp_A() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.mp_AColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'mp_A' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.mp_AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property angle_AB() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.angle_ABColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'angle_AB' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.angle_ABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mp_B() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.mp_BColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'mp_B' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.mp_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property angle_BC() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.angle_BCColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'angle_BC' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.angle_BCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mp_C() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.mp_CColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'mp_C' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.mp_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mp_D() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.mp_DColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'mp_D' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.mp_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mp_S2() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.mp_S2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'mp_S2' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.mp_S2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mp_S3() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.mp_S3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'mp_S3' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.mp_S3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mp_S4() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_mehanizm.mp_S4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'mp_S4' в таблице 'z3_mehanizm' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mehanizm.mp_S4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_z3Null() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.id_z3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_z3Null()
            Me(Me.tablez3_mehanizm.id_z3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsnumberPositionNull() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.numberPositionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetnumberPositionNull()
            Me(Me.tablez3_mehanizm.numberPositionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isml_ABNull() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.ml_ABColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setml_ABNull()
            Me(Me.tablez3_mehanizm.ml_ABColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ismashtab_mlNull() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.mashtab_mlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setmashtab_mlNull()
            Me(Me.tablez3_mehanizm.mashtab_mlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ismashtab_ml_viewNull() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.mashtab_ml_viewColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setmashtab_ml_viewNull()
            Me(Me.tablez3_mehanizm.mashtab_ml_viewColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isml_BCNull() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.ml_BCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setml_BCNull()
            Me(Me.tablez3_mehanizm.ml_BCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isml_BDNull() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.ml_BDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setml_BDNull()
            Me(Me.tablez3_mehanizm.ml_BDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isml_CDNull() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.ml_CDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setml_CDNull()
            Me(Me.tablez3_mehanizm.ml_CDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isml_aNull() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.ml_aColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setml_aNull()
            Me(Me.tablez3_mehanizm.ml_aColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ismp_ANull() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.mp_AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setmp_ANull()
            Me(Me.tablez3_mehanizm.mp_AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isangle_ABNull() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.angle_ABColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setangle_ABNull()
            Me(Me.tablez3_mehanizm.angle_ABColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ismp_BNull() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.mp_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setmp_BNull()
            Me(Me.tablez3_mehanizm.mp_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isangle_BCNull() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.angle_BCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setangle_BCNull()
            Me(Me.tablez3_mehanizm.angle_BCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ismp_CNull() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.mp_CColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setmp_CNull()
            Me(Me.tablez3_mehanizm.mp_CColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ismp_DNull() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.mp_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setmp_DNull()
            Me(Me.tablez3_mehanizm.mp_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ismp_S2Null() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.mp_S2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setmp_S2Null()
            Me(Me.tablez3_mehanizm.mp_S2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ismp_S3Null() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.mp_S3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setmp_S3Null()
            Me(Me.tablez3_mehanizm.mp_S3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ismp_S4Null() As Boolean
            Return Me.IsNull(Me.tablez3_mehanizm.mp_S4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setmp_S4Null()
            Me(Me.tablez3_mehanizm.mp_S4Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class z3_mzvRow
        Inherits Global.System.Data.DataRow
        
        Private tablez3_mzv As z3_mzvDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablez3_mzv = CType(Me.Table,z3_mzvDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablez3_mzv.idColumn),Long)
            End Get
            Set
                Me(Me.tablez3_mzv.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_z3() As Long
            Get
                Try 
                    Return CType(Me(Me.tablez3_mzv.id_z3Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'id_z3' в таблице 'z3_mzv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mzv.id_z3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property L_ab() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_mzv.L_abColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'L_ab' в таблице 'z3_mzv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mzv.L_abColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vl_pb() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_mzv.vl_pbColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vl_pb' в таблице 'z3_mzv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mzv.vl_pbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property G2() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_mzv.G2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'G2' в таблице 'z3_mzv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mzv.G2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ps2() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_mzv.ps2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ps2' в таблице 'z3_mzv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mzv.ps2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property G3() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_mzv.G3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'G3' в таблице 'z3_mzv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mzv.G3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ps3() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_mzv.ps3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ps3' в таблице 'z3_mzv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mzv.ps3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Fc() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_mzv.FcColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'Fc' в таблице 'z3_mzv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mzv.FcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ps4() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_mzv.ps4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ps4' в таблице 'z3_mzv' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_mzv.ps4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_z3Null() As Boolean
            Return Me.IsNull(Me.tablez3_mzv.id_z3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_z3Null()
            Me(Me.tablez3_mzv.id_z3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsL_abNull() As Boolean
            Return Me.IsNull(Me.tablez3_mzv.L_abColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetL_abNull()
            Me(Me.tablez3_mzv.L_abColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvl_pbNull() As Boolean
            Return Me.IsNull(Me.tablez3_mzv.vl_pbColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvl_pbNull()
            Me(Me.tablez3_mzv.vl_pbColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsG2Null() As Boolean
            Return Me.IsNull(Me.tablez3_mzv.G2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetG2Null()
            Me(Me.tablez3_mzv.G2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isps2Null() As Boolean
            Return Me.IsNull(Me.tablez3_mzv.ps2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setps2Null()
            Me(Me.tablez3_mzv.ps2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsG3Null() As Boolean
            Return Me.IsNull(Me.tablez3_mzv.G3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetG3Null()
            Me(Me.tablez3_mzv.G3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isps3Null() As Boolean
            Return Me.IsNull(Me.tablez3_mzv.ps3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setps3Null()
            Me(Me.tablez3_mzv.ps3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFcNull() As Boolean
            Return Me.IsNull(Me.tablez3_mzv.FcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFcNull()
            Me(Me.tablez3_mzv.FcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isps4Null() As Boolean
            Return Me.IsNull(Me.tablez3_mzv.ps4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setps4Null()
            Me(Me.tablez3_mzv.ps4Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class z3_speedRow
        Inherits Global.System.Data.DataRow
        
        Private tablez3_speed As z3_speedDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablez3_speed = CType(Me.Table,z3_speedDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablez3_speed.idColumn),Long)
            End Get
            Set
                Me(Me.tablez3_speed.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_z3() As Long
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.id_z3Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'id_z3' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.id_z3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property numberPosition() As Long
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.numberPositionColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'numberPosition' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.numberPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vl_pb() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.vl_pbColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vl_pb' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.vl_pbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property v_b() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.v_bColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'v_b' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.v_bColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mashtab_mv() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.mashtab_mvColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'mashtab_mv' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.mashtab_mvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property mashtab_mv_view() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.mashtab_mv_viewColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'mashtab_mv_view' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.mashtab_mv_viewColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vp_P() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.vp_PColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vp_P' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.vp_PColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property angle_Pb() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.angle_PbColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'angle_Pb' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.angle_PbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vp_b() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.vp_bColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vp_b' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.vp_bColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property angle_bc() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.angle_bcColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'angle_bc' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.angle_bcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property angle_px() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.angle_pxColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'angle_px' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.angle_pxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vp_c() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.vp_cColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vp_c' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.vp_cColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property v_c() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.v_cColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'v_c' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.v_cColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vl_c() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.vl_cColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vl_c' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.vl_cColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property v_bc() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.v_bcColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'v_bc' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.v_bcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vl_bc() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.vl_bcColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vl_bc' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.vl_bcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property v_cd() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.v_cdColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'v_cd' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.v_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vl_cd() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.vl_cdColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vl_cd' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.vl_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property angle_cd() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.angle_cdColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'angle_cd' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.angle_cdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vp_d() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.vp_dColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vp_d' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.vp_dColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property v_d() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.v_dColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'v_d' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.v_dColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vl_d() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.vl_dColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vl_d' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.vl_dColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vp_s2() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.vp_s2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vp_s2' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.vp_s2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property v_ps2() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.v_ps2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'v_ps2' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.v_ps2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vl_ps2() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.vl_ps2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vl_ps2' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.vl_ps2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vp_s3() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.vp_s3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vp_s3' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.vp_s3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property v_ps3() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.v_ps3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'v_ps3' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.v_ps3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vl_ps3() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.vl_ps3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vl_ps3' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.vl_ps3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vp_s4() As String
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.vp_s4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vp_s4' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.vp_s4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property v_ps4() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.v_ps4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'v_ps4' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.v_ps4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vl_ps4() As Double
            Get
                Try 
                    Return CType(Me(Me.tablez3_speed.vl_ps4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vl_ps4' в таблице 'z3_speed' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablez3_speed.vl_ps4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_z3Null() As Boolean
            Return Me.IsNull(Me.tablez3_speed.id_z3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_z3Null()
            Me(Me.tablez3_speed.id_z3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsnumberPositionNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.numberPositionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetnumberPositionNull()
            Me(Me.tablez3_speed.numberPositionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvl_pbNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.vl_pbColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvl_pbNull()
            Me(Me.tablez3_speed.vl_pbColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isv_bNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.v_bColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setv_bNull()
            Me(Me.tablez3_speed.v_bColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ismashtab_mvNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.mashtab_mvColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setmashtab_mvNull()
            Me(Me.tablez3_speed.mashtab_mvColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Ismashtab_mv_viewNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.mashtab_mv_viewColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setmashtab_mv_viewNull()
            Me(Me.tablez3_speed.mashtab_mv_viewColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvp_PNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.vp_PColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvp_PNull()
            Me(Me.tablez3_speed.vp_PColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isangle_PbNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.angle_PbColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setangle_PbNull()
            Me(Me.tablez3_speed.angle_PbColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvp_bNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.vp_bColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvp_bNull()
            Me(Me.tablez3_speed.vp_bColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isangle_bcNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.angle_bcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setangle_bcNull()
            Me(Me.tablez3_speed.angle_bcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isangle_pxNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.angle_pxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setangle_pxNull()
            Me(Me.tablez3_speed.angle_pxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvp_cNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.vp_cColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvp_cNull()
            Me(Me.tablez3_speed.vp_cColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isv_cNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.v_cColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setv_cNull()
            Me(Me.tablez3_speed.v_cColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvl_cNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.vl_cColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvl_cNull()
            Me(Me.tablez3_speed.vl_cColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isv_bcNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.v_bcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setv_bcNull()
            Me(Me.tablez3_speed.v_bcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvl_bcNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.vl_bcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvl_bcNull()
            Me(Me.tablez3_speed.vl_bcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isv_cdNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.v_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setv_cdNull()
            Me(Me.tablez3_speed.v_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvl_cdNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.vl_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvl_cdNull()
            Me(Me.tablez3_speed.vl_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isangle_cdNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.angle_cdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setangle_cdNull()
            Me(Me.tablez3_speed.angle_cdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvp_dNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.vp_dColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvp_dNull()
            Me(Me.tablez3_speed.vp_dColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isv_dNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.v_dColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setv_dNull()
            Me(Me.tablez3_speed.v_dColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvl_dNull() As Boolean
            Return Me.IsNull(Me.tablez3_speed.vl_dColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvl_dNull()
            Me(Me.tablez3_speed.vl_dColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvp_s2Null() As Boolean
            Return Me.IsNull(Me.tablez3_speed.vp_s2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvp_s2Null()
            Me(Me.tablez3_speed.vp_s2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isv_ps2Null() As Boolean
            Return Me.IsNull(Me.tablez3_speed.v_ps2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setv_ps2Null()
            Me(Me.tablez3_speed.v_ps2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvl_ps2Null() As Boolean
            Return Me.IsNull(Me.tablez3_speed.vl_ps2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvl_ps2Null()
            Me(Me.tablez3_speed.vl_ps2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvp_s3Null() As Boolean
            Return Me.IsNull(Me.tablez3_speed.vp_s3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvp_s3Null()
            Me(Me.tablez3_speed.vp_s3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isv_ps3Null() As Boolean
            Return Me.IsNull(Me.tablez3_speed.v_ps3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setv_ps3Null()
            Me(Me.tablez3_speed.v_ps3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvl_ps3Null() As Boolean
            Return Me.IsNull(Me.tablez3_speed.vl_ps3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvl_ps3Null()
            Me(Me.tablez3_speed.vl_ps3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvp_s4Null() As Boolean
            Return Me.IsNull(Me.tablez3_speed.vp_s4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvp_s4Null()
            Me(Me.tablez3_speed.vp_s4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isv_ps4Null() As Boolean
            Return Me.IsNull(Me.tablez3_speed.v_ps4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setv_ps4Null()
            Me(Me.tablez3_speed.v_ps4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvl_ps4Null() As Boolean
            Return Me.IsNull(Me.tablez3_speed.vl_ps4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvl_ps4Null()
            Me(Me.tablez3_speed.vl_ps4Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class zadaniaRow
        Inherits Global.System.Data.DataRow
        
        Private tablezadania As zadaniaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablezadania = CType(Me.Table,zadaniaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablezadania.idColumn),Long)
            End Get
            Set
                Me(Me.tablezadania.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property zd() As String
            Get
                Try 
                    Return CType(Me(Me.tablezadania.zdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'zd' в таблице 'zadania' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablezadania.zdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property name() As String
            Get
                Try 
                    Return CType(Me(Me.tablezadania.nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'name' в таблице 'zadania' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablezadania.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comment() As String
            Get
                Try 
                    Return CType(Me(Me.tablezadania.commentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'comment' в таблице 'zadania' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablezadania.commentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IszdNull() As Boolean
            Return Me.IsNull(Me.tablezadania.zdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetzdNull()
            Me(Me.tablezadania.zdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tablezadania.nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetnameNull()
            Me(Me.tablezadania.nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscommentNull() As Boolean
            Return Me.IsNull(Me.tablezadania.commentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcommentNull()
            Me(Me.tablezadania.commentColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class zd_registerRow
        Inherits Global.System.Data.DataRow
        
        Private tablezd_register As zd_registerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablezd_register = CType(Me.Table,zd_registerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablezd_register.idColumn),Long)
            End Get
            Set
                Me(Me.tablezd_register.idColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class zd_studentRow
        Inherits Global.System.Data.DataRow
        
        Private tablezd_student As zd_studentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablezd_student = CType(Me.Table,zd_studentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tablezd_student.idColumn),Long)
            End Get
            Set
                Me(Me.tablezd_student.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property st_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablezd_student.st_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'st_name' в таблице 'zd_student' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablezd_student.st_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_zd() As Long
            Get
                Try 
                    Return CType(Me(Me.tablezd_student.id_zdColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'id_zd' в таблице 'zd_student' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablezd_student.id_zdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property _variant() As Long
            Get
                Try 
                    Return CType(Me(Me.tablezd_student.variantColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'variant' в таблице 'zd_student' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablezd_student.variantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property year() As Long
            Get
                Try 
                    Return CType(Me(Me.tablezd_student.yearColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'year' в таблице 'zd_student' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablezd_student.yearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property lstn() As Long
            Get
                Try 
                    Return CType(Me(Me.tablezd_student.lstnColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'lstn' в таблице 'zd_student' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablezd_student.lstnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property id_dodatok2() As Long
            Get
                Try 
                    Return CType(Me(Me.tablezd_student.id_dodatok2Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'id_dodatok2' в таблице 'zd_student' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablezd_student.id_dodatok2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ml_AB() As Double
            Get
                Try 
                    Return CType(Me(Me.tablezd_student.ml_ABColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'ml_AB' в таблице 'zd_student' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablezd_student.ml_ABColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vl_pb() As Double
            Get
                Try 
                    Return CType(Me(Me.tablezd_student.vl_pbColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'vl_pb' в таблице 'zd_student' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablezd_student.vl_pbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property al_pib() As Double
            Get
                Try 
                    Return CType(Me(Me.tablezd_student.al_pibColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'al_pib' в таблице 'zd_student' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablezd_student.al_pibColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property comm() As String
            Get
                Try 
                    Return CType(Me(Me.tablezd_student.commColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Значение для столбца 'comm' в таблице 'zd_student' равно DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablezd_student.commColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isst_nameNull() As Boolean
            Return Me.IsNull(Me.tablezd_student.st_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setst_nameNull()
            Me(Me.tablezd_student.st_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_zdNull() As Boolean
            Return Me.IsNull(Me.tablezd_student.id_zdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_zdNull()
            Me(Me.tablezd_student.id_zdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is_variantNull() As Boolean
            Return Me.IsNull(Me.tablezd_student.variantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set_variantNull()
            Me(Me.tablezd_student.variantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsyearNull() As Boolean
            Return Me.IsNull(Me.tablezd_student.yearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetyearNull()
            Me(Me.tablezd_student.yearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IslstnNull() As Boolean
            Return Me.IsNull(Me.tablezd_student.lstnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetlstnNull()
            Me(Me.tablezd_student.lstnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isid_dodatok2Null() As Boolean
            Return Me.IsNull(Me.tablezd_student.id_dodatok2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setid_dodatok2Null()
            Me(Me.tablezd_student.id_dodatok2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isml_ABNull() As Boolean
            Return Me.IsNull(Me.tablezd_student.ml_ABColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setml_ABNull()
            Me(Me.tablezd_student.ml_ABColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isvl_pbNull() As Boolean
            Return Me.IsNull(Me.tablezd_student.vl_pbColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setvl_pbNull()
            Me(Me.tablezd_student.vl_pbColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isal_pibNull() As Boolean
            Return Me.IsNull(Me.tablezd_student.al_pibColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setal_pibNull()
            Me(Me.tablezd_student.al_pibColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscommNull() As Boolean
            Return Me.IsNull(Me.tablezd_student.commColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcommNull()
            Me(Me.tablezd_student.commColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class dodatok2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dodatok2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As dodatok2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As dodatok2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class instaceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As instaceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As instaceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As instaceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class lstnRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As lstnRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As lstnRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As lstnRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class sqlite_sequenceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sqlite_sequenceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As sqlite_sequenceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As sqlite_sequenceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class studentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As studentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As studentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As studentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class sys_tablesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sys_tablesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As sys_tablesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As sys_tablesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class z3RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As z3Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As z3Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As z3Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class z3_accelerationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As z3_accelerationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As z3_accelerationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As z3_accelerationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class z3_dataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As z3_dataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As z3_dataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As z3_dataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class z3_izvRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As z3_izvRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As z3_izvRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As z3_izvRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class z3_mehanizmRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As z3_mehanizmRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As z3_mehanizmRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As z3_mehanizmRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class z3_mzvRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As z3_mzvRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As z3_mzvRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As z3_mzvRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class z3_speedRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As z3_speedRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As z3_speedRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As z3_speedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class zadaniaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As zadaniaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As zadaniaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As zadaniaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class zd_registerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As zd_registerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As zd_registerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As zd_registerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class zd_studentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As zd_studentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As zd_studentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As zd_studentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSet1TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dodatok2TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dodatok2"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("digit_year", "digit_year")
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("w2", "w2")
            tableMapping.ColumnMappings.Add("delta", "delta")
            tableMapping.ColumnMappings.Add("dif", "dif")
            tableMapping.ColumnMappings.Add("h", "h")
            tableMapping.ColumnMappings.Add("zi", "zi")
            tableMapping.ColumnMappings.Add("zm", "zm")
            tableMapping.ColumnMappings.Add("vf", "vf")
            tableMapping.ColumnMappings.Add("position_m", "position_m")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""dodatok2"" WHERE ((""id"" = :Original_id) AND ((:IsNull_digit_ye"& _ 
                "ar = 1 AND ""digit_year"" IS NULL) OR (""digit_year"" = :Original_digit_year)) AND ("& _ 
                "(:IsNull_name = 1 AND ""name"" IS NULL) OR (""name"" = :Original_name)) AND ((:IsNul"& _ 
                "l_w2 = 1 AND ""w2"" IS NULL) OR (""w2"" = :Original_w2)) AND ((:IsNull_delta = 1 AND"& _ 
                " ""delta"" IS NULL) OR (""delta"" = :Original_delta)) AND ((:IsNull_dif = 1 AND ""dif"& _ 
                """ IS NULL) OR (""dif"" = :Original_dif)) AND ((:IsNull_h = 1 AND ""h"" IS NULL) OR ("& _ 
                """h"" = :Original_h)) AND ((:IsNull_zi = 1 AND ""zi"" IS NULL) OR (""zi"" = :Original_"& _ 
                "zi)) AND ((:IsNull_zm = 1 AND ""zm"" IS NULL) OR (""zm"" = :Original_zm)) AND ((:IsN"& _ 
                "ull_vf = 1 AND ""vf"" IS NULL) OR (""vf"" = :Original_vf)) AND ((:IsNull_position_m "& _ 
                "= 1 AND ""position_m"" IS NULL) OR (""position_m"" = :Original_position_m)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_digit_year"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "digit_year"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_digit_year"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "digit_year"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_w2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "w2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_w2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "w2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_delta"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "delta"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_delta"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "delta"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_dif"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "dif"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_dif"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "dif"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_h"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "h"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_h"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "h"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_zi"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "zi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_zi"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "zi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_zm"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "zm"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_zm"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "zm"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vf"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vf"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vf"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vf"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_position_m"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "position_m"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_position_m"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "position_m"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""dodatok2"" (""id"", ""digit_year"", ""name"", ""w2"", ""delta"", ""dif"", "& _ 
                """h"", ""zi"", ""zm"", ""vf"", ""position_m"") VALUES (:id, :digit_year, :name, :w2, :delt"& _ 
                "a, :dif, :h, :zi, :zm, :vf, :position_m)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "digit_year"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "digit_year"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "w2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "w2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "delta"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "delta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "dif"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "dif"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "h"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "h"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "zi"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "zi"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "zm"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "zm"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vf"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vf"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "position_m"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "position_m"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""dodatok2"" SET ""id"" = :id, ""digit_year"" = :digit_year, ""name"" = :na"& _ 
                "me, ""w2"" = :w2, ""delta"" = :delta, ""dif"" = :dif, ""h"" = :h, ""zi"" = :zi, ""zm"" = :zm"& _ 
                ", ""vf"" = :vf, ""position_m"" = :position_m WHERE ((""id"" = :Original_id) AND ((:IsN"& _ 
                "ull_digit_year = 1 AND ""digit_year"" IS NULL) OR (""digit_year"" = :Original_digit_"& _ 
                "year)) AND ((:IsNull_name = 1 AND ""name"" IS NULL) OR (""name"" = :Original_name)) "& _ 
                "AND ((:IsNull_w2 = 1 AND ""w2"" IS NULL) OR (""w2"" = :Original_w2)) AND ((:IsNull_d"& _ 
                "elta = 1 AND ""delta"" IS NULL) OR (""delta"" = :Original_delta)) AND ((:IsNull_dif "& _ 
                "= 1 AND ""dif"" IS NULL) OR (""dif"" = :Original_dif)) AND ((:IsNull_h = 1 AND ""h"" I"& _ 
                "S NULL) OR (""h"" = :Original_h)) AND ((:IsNull_zi = 1 AND ""zi"" IS NULL) OR (""zi"" "& _ 
                "= :Original_zi)) AND ((:IsNull_zm = 1 AND ""zm"" IS NULL) OR (""zm"" = :Original_zm)"& _ 
                ") AND ((:IsNull_vf = 1 AND ""vf"" IS NULL) OR (""vf"" = :Original_vf)) AND ((:IsNull"& _ 
                "_position_m = 1 AND ""position_m"" IS NULL) OR (""position_m"" = :Original_position_"& _ 
                "m)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "digit_year"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "digit_year"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "w2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "w2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "delta"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "delta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "dif"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "dif"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "h"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "h"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "zi"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "zi"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "zm"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "zm"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vf"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vf"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "position_m"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "position_m"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_digit_year"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "digit_year"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_digit_year"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "digit_year"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_w2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "w2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_w2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "w2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_delta"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "delta"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_delta"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "delta"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_dif"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "dif"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_dif"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "dif"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_h"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "h"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_h"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "h"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_zi"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "zi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_zi"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "zi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_zm"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "zm"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_zm"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "zm"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vf"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vf"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vf"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vf"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_position_m"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "position_m"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_position_m"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "position_m"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.TMM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, digit_year, name, w2, delta, dif, h, zi, zm, vf, position_m FROM ""main"& _ 
                """.dodatok2"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.dodatok2DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.dodatok2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.dodatok2DataTable = New DataSet1.dodatok2DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.dodatok2DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "dodatok2")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_digit_year As String, ByVal Original_name As String, ByVal Original_w2 As Global.System.Nullable(Of Double), ByVal Original_delta As Global.System.Nullable(Of Double), ByVal Original_dif As Global.System.Nullable(Of Long), ByVal Original_h As Global.System.Nullable(Of Long), ByVal Original_zi As Global.System.Nullable(Of Double), ByVal Original_zm As Global.System.Nullable(Of Double), ByVal Original_vf As String, ByVal Original_position_m As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_digit_year Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_digit_year,String)
            End If
            If (Original_name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_name,String)
            End If
            If (Original_w2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_w2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_delta.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_delta.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_dif.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_dif.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_h.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_h.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_zi.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_zi.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_zm.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_zm.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_vf Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_vf,String)
            End If
            If (Original_position_m.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_position_m.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Long, ByVal digit_year As String, ByVal name As String, ByVal w2 As Global.System.Nullable(Of Double), ByVal delta As Global.System.Nullable(Of Double), ByVal dif As Global.System.Nullable(Of Long), ByVal h As Global.System.Nullable(Of Long), ByVal zi As Global.System.Nullable(Of Double), ByVal zm As Global.System.Nullable(Of Double), ByVal vf As String, ByVal position_m As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            If (digit_year Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(digit_year,String)
            End If
            If (name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(name,String)
            End If
            If (w2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(w2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (delta.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(delta.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (dif.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(dif.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (h.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(h.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (zi.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(zi.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (zm.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(zm.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (vf Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(vf,String)
            End If
            If (position_m.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(position_m.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id As Long,  _
                    ByVal digit_year As String,  _
                    ByVal name As String,  _
                    ByVal w2 As Global.System.Nullable(Of Double),  _
                    ByVal delta As Global.System.Nullable(Of Double),  _
                    ByVal dif As Global.System.Nullable(Of Long),  _
                    ByVal h As Global.System.Nullable(Of Long),  _
                    ByVal zi As Global.System.Nullable(Of Double),  _
                    ByVal zm As Global.System.Nullable(Of Double),  _
                    ByVal vf As String,  _
                    ByVal position_m As Global.System.Nullable(Of Long),  _
                    ByVal Original_id As Long,  _
                    ByVal Original_digit_year As String,  _
                    ByVal Original_name As String,  _
                    ByVal Original_w2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_delta As Global.System.Nullable(Of Double),  _
                    ByVal Original_dif As Global.System.Nullable(Of Long),  _
                    ByVal Original_h As Global.System.Nullable(Of Long),  _
                    ByVal Original_zi As Global.System.Nullable(Of Double),  _
                    ByVal Original_zm As Global.System.Nullable(Of Double),  _
                    ByVal Original_vf As String,  _
                    ByVal Original_position_m As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            If (digit_year Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(digit_year,String)
            End If
            If (name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(name,String)
            End If
            If (w2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(w2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (delta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(delta.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (dif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(dif.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (h.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(h.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (zi.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(zi.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (zm.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(zm.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (vf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(vf,String)
            End If
            If (position_m.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(position_m.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_id,Long)
            If (Original_digit_year Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_digit_year,String)
            End If
            If (Original_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_name,String)
            End If
            If (Original_w2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_w2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_delta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_delta.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_dif.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_dif.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_h.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_h.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_zi.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_zi.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_zm.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_zm.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_vf Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_vf,String)
            End If
            If (Original_position_m.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_position_m.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal digit_year As String,  _
                    ByVal name As String,  _
                    ByVal w2 As Global.System.Nullable(Of Double),  _
                    ByVal delta As Global.System.Nullable(Of Double),  _
                    ByVal dif As Global.System.Nullable(Of Long),  _
                    ByVal h As Global.System.Nullable(Of Long),  _
                    ByVal zi As Global.System.Nullable(Of Double),  _
                    ByVal zm As Global.System.Nullable(Of Double),  _
                    ByVal vf As String,  _
                    ByVal position_m As Global.System.Nullable(Of Long),  _
                    ByVal Original_id As Long,  _
                    ByVal Original_digit_year As String,  _
                    ByVal Original_name As String,  _
                    ByVal Original_w2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_delta As Global.System.Nullable(Of Double),  _
                    ByVal Original_dif As Global.System.Nullable(Of Long),  _
                    ByVal Original_h As Global.System.Nullable(Of Long),  _
                    ByVal Original_zi As Global.System.Nullable(Of Double),  _
                    ByVal Original_zm As Global.System.Nullable(Of Double),  _
                    ByVal Original_vf As String,  _
                    ByVal Original_position_m As Global.System.Nullable(Of Long)) As Integer
            Return Me.Update(Original_id, digit_year, name, w2, delta, dif, h, zi, zm, vf, position_m, Original_id, Original_digit_year, Original_name, Original_w2, Original_delta, Original_dif, Original_h, Original_zi, Original_zm, Original_vf, Original_position_m)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class instaceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "instace"
            tableMapping.ColumnMappings.Add("id_instance", "id_instance")
            tableMapping.ColumnMappings.Add("zd", "zd")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""instace"" (""id_instance"", ""zd"") VALUES (:id_instance, :zd)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id_instance"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_instance"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "zd"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "zd"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.TMM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id_instance, zd FROM ""main"".instace"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.instaceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.instaceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.instaceDataTable = New DataSet1.instaceDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.instaceDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "instace")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id_instance As Global.System.Nullable(Of Long), ByVal zd As String) As Integer
            If (id_instance.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(id_instance.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (zd Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(zd,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class lstnTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "lstn"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("counter", "counter")
            tableMapping.ColumnMappings.Add("tableNameZD", "tableNameZD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""lstn"" WHERE ((""id"" = :Original_id) AND ((:IsNull_name = 1 AND"& _ 
                " ""name"" IS NULL) OR (""name"" = :Original_name)) AND ((:IsNull_counter = 1 AND ""co"& _ 
                "unter"" IS NULL) OR (""counter"" = :Original_counter)) AND ((:IsNull_tableNameZD = "& _ 
                "1 AND ""tableNameZD"" IS NULL) OR (""tableNameZD"" = :Original_tableNameZD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_counter"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "counter"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_counter"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "counter"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_tableNameZD"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "tableNameZD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_tableNameZD"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "tableNameZD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""lstn"" (""id"", ""name"", ""counter"", ""tableNameZD"") VALUES (:id, :"& _ 
                "name, :counter, :tableNameZD)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "counter"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "counter"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "tableNameZD"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "tableNameZD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""lstn"" SET ""id"" = :id, ""name"" = :name, ""counter"" = :counter, ""table"& _ 
                "NameZD"" = :tableNameZD WHERE ((""id"" = :Original_id) AND ((:IsNull_name = 1 AND """& _ 
                "name"" IS NULL) OR (""name"" = :Original_name)) AND ((:IsNull_counter = 1 AND ""coun"& _ 
                "ter"" IS NULL) OR (""counter"" = :Original_counter)) AND ((:IsNull_tableNameZD = 1 "& _ 
                "AND ""tableNameZD"" IS NULL) OR (""tableNameZD"" = :Original_tableNameZD)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "counter"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "counter"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "tableNameZD"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "tableNameZD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_counter"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "counter"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_counter"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "counter"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_tableNameZD"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "tableNameZD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_tableNameZD"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "tableNameZD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.TMM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, name, counter, tableNameZD FROM ""main"".lstn"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.lstnDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.lstnDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.lstnDataTable = New DataSet1.lstnDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.lstnDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "lstn")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_name As String, ByVal Original_counter As Global.System.Nullable(Of Long), ByVal Original_tableNameZD As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_name,String)
            End If
            If (Original_counter.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_counter.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_tableNameZD Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_tableNameZD,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Long, ByVal name As String, ByVal counter As Global.System.Nullable(Of Long), ByVal tableNameZD As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            If (name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(name,String)
            End If
            If (counter.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(counter.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (tableNameZD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(tableNameZD,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id As Long, ByVal name As String, ByVal counter As Global.System.Nullable(Of Long), ByVal tableNameZD As String, ByVal Original_id As Long, ByVal Original_name As String, ByVal Original_counter As Global.System.Nullable(Of Long), ByVal Original_tableNameZD As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            If (name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(name,String)
            End If
            If (counter.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(counter.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (tableNameZD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(tableNameZD,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_id,Long)
            If (Original_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_name,String)
            End If
            If (Original_counter.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_counter.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_tableNameZD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_tableNameZD,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal name As String, ByVal counter As Global.System.Nullable(Of Long), ByVal tableNameZD As String, ByVal Original_id As Long, ByVal Original_name As String, ByVal Original_counter As Global.System.Nullable(Of Long), ByVal Original_tableNameZD As String) As Integer
            Return Me.Update(Original_id, name, counter, tableNameZD, Original_id, Original_name, Original_counter, Original_tableNameZD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sqlite_sequenceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sqlite_sequence"
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("seq", "seq")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""sqlite_sequence"" (""name"", ""seq"") VALUES (:name, :seq)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "seq"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "seq"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.TMM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT name, seq FROM ""main"".""sqlite_sequence"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.sqlite_sequenceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.sqlite_sequenceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.sqlite_sequenceDataTable = New DataSet1.sqlite_sequenceDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.sqlite_sequenceDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "sqlite_sequence")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal name As String, ByVal seq As Global.System.Nullable(Of Long)) As Integer
            If (name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(name,String)
            End If
            If (seq.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(seq.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class studentTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "student"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("first_name", "first_name")
            tableMapping.ColumnMappings.Add("last_name", "last_name")
            tableMapping.ColumnMappings.Add("group", "group")
            tableMapping.ColumnMappings.Add("year", "year")
            tableMapping.ColumnMappings.Add("st_book", "st_book")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""student"" WHERE ((""id"" = :Original_id) AND ((:IsNull_first_nam"& _ 
                "e = 1 AND ""first_name"" IS NULL) OR (""first_name"" = :Original_first_name)) AND (("& _ 
                ":IsNull_last_name = 1 AND ""last_name"" IS NULL) OR (""last_name"" = :Original_last_"& _ 
                "name)) AND ((:IsNull_group = 1 AND ""group"" IS NULL) OR (""group"" = :Original_grou"& _ 
                "p)) AND ((:IsNull_year = 1 AND ""year"" IS NULL) OR (""year"" = :Original_year)) AND"& _ 
                " ((:IsNull_st_book = 1 AND ""st_book"" IS NULL) OR (""st_book"" = :Original_st_book)"& _ 
                "))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_first_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "first_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_first_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "first_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_last_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "last_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_last_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "last_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_group"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "group"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_group"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "group"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_year"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "year"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_year"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "year"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_st_book"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "st_book"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_st_book"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "st_book"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""student"" (""id"", ""first_name"", ""last_name"", ""group"", ""year"", """& _ 
                "st_book"") VALUES (:id, :first_name, :last_name, :group, :year, :st_book)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "first_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "first_name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "last_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "last_name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "group"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "group"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "year"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "year"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "st_book"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "st_book"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""student"" SET ""id"" = :id, ""first_name"" = :first_name, ""last_name"" ="& _ 
                " :last_name, ""group"" = :group, ""year"" = :year, ""st_book"" = :st_book WHERE ((""id"""& _ 
                " = :Original_id) AND ((:IsNull_first_name = 1 AND ""first_name"" IS NULL) OR (""fir"& _ 
                "st_name"" = :Original_first_name)) AND ((:IsNull_last_name = 1 AND ""last_name"" IS"& _ 
                " NULL) OR (""last_name"" = :Original_last_name)) AND ((:IsNull_group = 1 AND ""grou"& _ 
                "p"" IS NULL) OR (""group"" = :Original_group)) AND ((:IsNull_year = 1 AND ""year"" IS"& _ 
                " NULL) OR (""year"" = :Original_year)) AND ((:IsNull_st_book = 1 AND ""st_book"" IS "& _ 
                "NULL) OR (""st_book"" = :Original_st_book)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "first_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "first_name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "last_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "last_name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "group"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "group"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "year"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "year"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "st_book"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "st_book"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_first_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "first_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_first_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "first_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_last_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "last_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_last_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "last_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_group"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "group"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_group"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "group"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_year"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "year"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_year"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "year"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_st_book"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "st_book"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_st_book"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "st_book"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.TMM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, first_name, last_name, ""group"", year, st_book FROM ""main"".student"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.studentDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.studentDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.studentDataTable = New DataSet1.studentDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.studentDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "student")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_first_name As String, ByVal Original_last_name As String, ByVal Original_group As String, ByVal Original_year As Global.System.Nullable(Of Long), ByVal Original_st_book As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_first_name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_first_name,String)
            End If
            If (Original_last_name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_last_name,String)
            End If
            If (Original_group Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_group,String)
            End If
            If (Original_year.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_year.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_st_book.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_st_book.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Long, ByVal first_name As String, ByVal last_name As String, ByVal group As String, ByVal year As Global.System.Nullable(Of Long), ByVal st_book As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            If (first_name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(first_name,String)
            End If
            If (last_name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(last_name,String)
            End If
            If (group Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(group,String)
            End If
            If (year.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(year.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (st_book.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(st_book.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id As Long, ByVal first_name As String, ByVal last_name As String, ByVal group As String, ByVal year As Global.System.Nullable(Of Long), ByVal st_book As Global.System.Nullable(Of Long), ByVal Original_id As Long, ByVal Original_first_name As String, ByVal Original_last_name As String, ByVal Original_group As String, ByVal Original_year As Global.System.Nullable(Of Long), ByVal Original_st_book As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            If (first_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(first_name,String)
            End If
            If (last_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(last_name,String)
            End If
            If (group Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(group,String)
            End If
            If (year.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(year.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (st_book.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(st_book.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_id,Long)
            If (Original_first_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_first_name,String)
            End If
            If (Original_last_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_last_name,String)
            End If
            If (Original_group Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_group,String)
            End If
            If (Original_year.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_year.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_st_book.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_st_book.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal first_name As String, ByVal last_name As String, ByVal group As String, ByVal year As Global.System.Nullable(Of Long), ByVal st_book As Global.System.Nullable(Of Long), ByVal Original_id As Long, ByVal Original_first_name As String, ByVal Original_last_name As String, ByVal Original_group As String, ByVal Original_year As Global.System.Nullable(Of Long), ByVal Original_st_book As Global.System.Nullable(Of Long)) As Integer
            Return Me.Update(Original_id, first_name, last_name, group, year, st_book, Original_id, Original_first_name, Original_last_name, Original_group, Original_year, Original_st_book)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sys_tablesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sys_tables"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("comment", "comment")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""sys_tables"" (""id"", ""name"", ""comment"") VALUES (:id, :name, :co"& _ 
                "mment)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.TMM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, name, comment FROM ""main"".sys_tables"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.sys_tablesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.sys_tablesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.sys_tablesDataTable = New DataSet1.sys_tablesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.sys_tablesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "sys_tables")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Global.System.Nullable(Of Long), ByVal name As String, ByVal comment As String) As Integer
            If (id.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(id.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(name,String)
            End If
            If (comment Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(comment,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class z3TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "z3"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("variant", "variant")
            tableMapping.ColumnMappings.Add("comment", "comment")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""z3"" WHERE ((""id"" = :Original_id) AND ((:IsNull_variant = 1 AN"& _ 
                "D ""variant"" IS NULL) OR (""variant"" = :Original_variant)) AND ((:IsNull_comment ="& _ 
                " 1 AND ""comment"" IS NULL) OR (""comment"" = :Original_comment)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_variant"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "variant"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_variant"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "variant"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_comment"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""z3"" (""id"", ""variant"", ""comment"") VALUES (:id, :variant, :comm"& _ 
                "ent)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "variant"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "variant"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""z3"" SET ""id"" = :id, ""variant"" = :variant, ""comment"" = :comment WHE"& _ 
                "RE ((""id"" = :Original_id) AND ((:IsNull_variant = 1 AND ""variant"" IS NULL) OR ("""& _ 
                "variant"" = :Original_variant)) AND ((:IsNull_comment = 1 AND ""comment"" IS NULL) "& _ 
                "OR (""comment"" = :Original_comment)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "variant"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "variant"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_variant"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "variant"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_variant"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "variant"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_comment"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.TMM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, variant, comment FROM ""main"".z3"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.z3DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.z3DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.z3DataTable = New DataSet1.z3DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.z3DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "z3")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_variant As Global.System.Nullable(Of Long), ByVal Original_comment As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_variant.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_variant.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_comment Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_comment,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Long, ByVal _variant As Global.System.Nullable(Of Long), ByVal comment As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            If (_variant.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(_variant.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (comment Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(comment,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id As Long, ByVal _variant As Global.System.Nullable(Of Long), ByVal comment As String, ByVal Original_id As Long, ByVal Original_variant As Global.System.Nullable(Of Long), ByVal Original_comment As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            If (_variant.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(_variant.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (comment Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(comment,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_id,Long)
            If (Original_variant.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_variant.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_comment Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_comment,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal _variant As Global.System.Nullable(Of Long), ByVal comment As String, ByVal Original_id As Long, ByVal Original_variant As Global.System.Nullable(Of Long), ByVal Original_comment As String) As Integer
            Return Me.Update(Original_id, _variant, comment, Original_id, Original_variant, Original_comment)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class z3_accelerationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "z3_acceleration"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("id_z3", "id_z3")
            tableMapping.ColumnMappings.Add("numberPosition", "numberPosition")
            tableMapping.ColumnMappings.Add("al_pb", "al_pb")
            tableMapping.ColumnMappings.Add("ab", "ab")
            tableMapping.ColumnMappings.Add("mashtab_ma", "mashtab_ma")
            tableMapping.ColumnMappings.Add("mashtab_ma_view", "mashtab_ma_view")
            tableMapping.ColumnMappings.Add("ap_pi", "ap_pi")
            tableMapping.ColumnMappings.Add("angle_Pb", "angle_Pb")
            tableMapping.ColumnMappings.Add("ap_b", "ap_b")
            tableMapping.ColumnMappings.Add("a_bn3", "a_bn3")
            tableMapping.ColumnMappings.Add("al_bn3", "al_bn3")
            tableMapping.ColumnMappings.Add("angleCB", "angleCB")
            tableMapping.ColumnMappings.Add("ap_n3", "ap_n3")
            tableMapping.ColumnMappings.Add("ap_c", "ap_c")
            tableMapping.ColumnMappings.Add("a_c", "a_c")
            tableMapping.ColumnMappings.Add("al_c", "al_c")
            tableMapping.ColumnMappings.Add("a_n3c", "a_n3c")
            tableMapping.ColumnMappings.Add("al_n3c", "al_n3c")
            tableMapping.ColumnMappings.Add("a_bc", "a_bc")
            tableMapping.ColumnMappings.Add("al_bc", "al_bc")
            tableMapping.ColumnMappings.Add("a_cd", "a_cd")
            tableMapping.ColumnMappings.Add("al_cd", "al_cd")
            tableMapping.ColumnMappings.Add("angle_cd", "angle_cd")
            tableMapping.ColumnMappings.Add("ap_d", "ap_d")
            tableMapping.ColumnMappings.Add("a_d", "a_d")
            tableMapping.ColumnMappings.Add("al_d", "al_d")
            tableMapping.ColumnMappings.Add("ap_s2", "ap_s2")
            tableMapping.ColumnMappings.Add("a_s2", "a_s2")
            tableMapping.ColumnMappings.Add("al_s2", "al_s2")
            tableMapping.ColumnMappings.Add("ap_s3", "ap_s3")
            tableMapping.ColumnMappings.Add("a_s3", "a_s3")
            tableMapping.ColumnMappings.Add("al_s3", "al_s3")
            tableMapping.ColumnMappings.Add("ap_s4", "ap_s4")
            tableMapping.ColumnMappings.Add("a_s4", "a_s4")
            tableMapping.ColumnMappings.Add("al_s4", "al_s4")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""z3_acceleration"" WHERE ((""id"" = :Original_id) AND ((:IsNull_i"& _ 
                "d_z3 = 1 AND ""id_z3"" IS NULL) OR (""id_z3"" = :Original_id_z3)) AND ((:IsNull_numb"& _ 
                "erPosition = 1 AND ""numberPosition"" IS NULL) OR (""numberPosition"" = :Original_nu"& _ 
                "mberPosition)) AND ((:IsNull_al_pb = 1 AND ""al_pb"" IS NULL) OR (""al_pb"" = :Origi"& _ 
                "nal_al_pb)) AND ((:IsNull_ab = 1 AND ""ab"" IS NULL) OR (""ab"" = :Original_ab)) AND"& _ 
                " ((:IsNull_mashtab_ma = 1 AND ""mashtab_ma"" IS NULL) OR (""mashtab_ma"" = :Original"& _ 
                "_mashtab_ma)) AND ((:IsNull_mashtab_ma_view = 1 AND ""mashtab_ma_view"" IS NULL) O"& _ 
                "R (""mashtab_ma_view"" = :Original_mashtab_ma_view)) AND ((:IsNull_ap_pi = 1 AND """& _ 
                "ap_pi"" IS NULL) OR (""ap_pi"" = :Original_ap_pi)) AND ((:IsNull_angle_Pb = 1 AND """& _ 
                "angle_Pb"" IS NULL) OR (""angle_Pb"" = :Original_angle_Pb)) AND ((:IsNull_ap_b = 1 "& _ 
                "AND ""ap_b"" IS NULL) OR (""ap_b"" = :Original_ap_b)) AND ((:IsNull_a_bn3 = 1 AND ""a"& _ 
                "_bn3"" IS NULL) OR (""a_bn3"" = :Original_a_bn3)) AND ((:IsNull_al_bn3 = 1 AND ""al_"& _ 
                "bn3"" IS NULL) OR (""al_bn3"" = :Original_al_bn3)) AND ((:IsNull_angleCB = 1 AND ""a"& _ 
                "ngleCB"" IS NULL) OR (""angleCB"" = :Original_angleCB)) AND ((:IsNull_ap_n3 = 1 AND"& _ 
                " ""ap_n3"" IS NULL) OR (""ap_n3"" = :Original_ap_n3)) AND ((:IsNull_ap_c = 1 AND ""ap"& _ 
                "_c"" IS NULL) OR (""ap_c"" = :Original_ap_c)) AND ((:IsNull_a_c = 1 AND ""a_c"" IS NU"& _ 
                "LL) OR (""a_c"" = :Original_a_c)) AND ((:IsNull_al_c = 1 AND ""al_c"" IS NULL) OR ("""& _ 
                "al_c"" = :Original_al_c)) AND ((:IsNull_a_n3c = 1 AND ""a_n3c"" IS NULL) OR (""a_n3c"& _ 
                """ = :Original_a_n3c)) AND ((:IsNull_al_n3c = 1 AND ""al_n3c"" IS NULL) OR (""al_n3c"& _ 
                """ = :Original_al_n3c)) AND ((:IsNull_a_bc = 1 AND ""a_bc"" IS NULL) OR (""a_bc"" = :"& _ 
                "Original_a_bc)) AND ((:IsNull_al_bc = 1 AND ""al_bc"" IS NULL) OR (""al_bc"" = :Orig"& _ 
                "inal_al_bc)) AND ((:IsNull_a_cd = 1 AND ""a_cd"" IS NULL) OR (""a_cd"" = :Original_a"& _ 
                "_cd)) AND ((:IsNull_al_cd = 1 AND ""al_cd"" IS NULL) OR (""al_cd"" = :Original_al_cd"& _ 
                ")) AND ((:IsNull_angle_cd = 1 AND ""angle_cd"" IS NULL) OR (""angle_cd"" = :Original"& _ 
                "_angle_cd)) AND ((:IsNull_ap_d = 1 AND ""ap_d"" IS NULL) OR (""ap_d"" = :Original_ap"& _ 
                "_d)) AND ((:IsNull_a_d = 1 AND ""a_d"" IS NULL) OR (""a_d"" = :Original_a_d)) AND (("& _ 
                ":IsNull_al_d = 1 AND ""al_d"" IS NULL) OR (""al_d"" = :Original_al_d)) AND ((:IsNull"& _ 
                "_ap_s2 = 1 AND ""ap_s2"" IS NULL) OR (""ap_s2"" = :Original_ap_s2)) AND ((:IsNull_a_"& _ 
                "s2 = 1 AND ""a_s2"" IS NULL) OR (""a_s2"" = :Original_a_s2)) AND ((:IsNull_al_s2 = 1"& _ 
                " AND ""al_s2"" IS NULL) OR (""al_s2"" = :Original_al_s2)) AND ((:IsNull_ap_s3 = 1 AN"& _ 
                "D ""ap_s3"" IS NULL) OR (""ap_s3"" = :Original_ap_s3)) AND ((:IsNull_a_s3 = 1 AND ""a"& _ 
                "_s3"" IS NULL) OR (""a_s3"" = :Original_a_s3)) AND ((:IsNull_al_s3 = 1 AND ""al_s3"" "& _ 
                "IS NULL) OR (""al_s3"" = :Original_al_s3)) AND ((:IsNull_ap_s4 = 1 AND ""ap_s4"" IS "& _ 
                "NULL) OR (""ap_s4"" = :Original_ap_s4)) AND ((:IsNull_a_s4 = 1 AND ""a_s4"" IS NULL)"& _ 
                " OR (""a_s4"" = :Original_a_s4)) AND ((:IsNull_al_s4 = 1 AND ""al_s4"" IS NULL) OR ("& _ 
                """al_s4"" = :Original_al_s4)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_id_z3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_numberPosition"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_numberPosition"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_pb"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ab"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ab"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ab"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ab"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mashtab_ma"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mashtab_ma"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mashtab_ma"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_ma"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mashtab_ma_view"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mashtab_ma_view"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mashtab_ma_view"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_ma_view"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ap_pi"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ap_pi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ap_pi"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_pi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angle_Pb"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angle_Pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angle_Pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_Pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ap_b"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ap_b"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ap_b"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_b"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_bn3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_bn3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_bn3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_bn3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_bn3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_bn3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_bn3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_bn3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angleCB"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angleCB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angleCB"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angleCB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ap_n3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ap_n3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ap_n3"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_n3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ap_c"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ap_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ap_c"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_c"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_c"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_n3c"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_n3c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_n3c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_n3c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_n3c"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_n3c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_n3c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_n3c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_bc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_bc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_cd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_cd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angle_cd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angle_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angle_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ap_d"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ap_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ap_d"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_d"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_d"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_d"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_d"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ap_s2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ap_s2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ap_s2"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_s2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_s2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_s2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_s2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_s2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_s2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_s2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_s2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_s2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ap_s3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ap_s3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ap_s3"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_s3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_s3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_s3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_s3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_s3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_s3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_s3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_s3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_s3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ap_s4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ap_s4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ap_s4"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_s4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_s4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_s4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_s4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_s4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_s4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_s4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_s4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_s4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""z3_acceleration"" (""id"", ""id_z3"", ""numberPosition"", ""al_pb"", """& _ 
                "ab"", ""mashtab_ma"", ""mashtab_ma_view"", ""ap_pi"", ""angle_Pb"", ""ap_b"", ""a_bn3"", ""al_"& _ 
                "bn3"", ""angleCB"", ""ap_n3"", ""ap_c"", ""a_c"", ""al_c"", ""a_n3c"", ""al_n3c"", ""a_bc"", ""al_"& _ 
                "bc"", ""a_cd"", ""al_cd"", ""angle_cd"", ""ap_d"", ""a_d"", ""al_d"", ""ap_s2"", ""a_s2"", ""al_s2"& _ 
                """, ""ap_s3"", ""a_s3"", ""al_s3"", ""ap_s4"", ""a_s4"", ""al_s4"") VALUES (:id, :id_z3, :num"& _ 
                "berPosition, :al_pb, :ab, :mashtab_ma, :mashtab_ma_view, :ap_pi, :angle_Pb, :ap_"& _ 
                "b, :a_bn3, :al_bn3, :angleCB, :ap_n3, :ap_c, :a_c, :al_c, :a_n3c, :al_n3c, :a_bc"& _ 
                ", :al_bc, :a_cd, :al_cd, :angle_cd, :ap_d, :a_d, :al_d, :ap_s2, :a_s2, :al_s2, :"& _ 
                "ap_s3, :a_s3, :al_s3, :ap_s4, :a_s4, :al_s4)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "numberPosition"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_pb"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ab"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ab"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mashtab_ma"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_ma"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mashtab_ma_view"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_ma_view"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ap_pi"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_pi"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angle_Pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_Pb"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ap_b"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_b"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_bn3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_bn3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_bn3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_bn3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angleCB"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angleCB"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ap_n3"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_n3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ap_c"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_c"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_c"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_c"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_n3c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_n3c"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_n3c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_n3c"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_bc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_bc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_cd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_cd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angle_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_cd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ap_d"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_d"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_d"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_d"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_d"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_d"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ap_s2"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_s2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_s2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_s2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_s2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_s2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ap_s3"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_s3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_s3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_s3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_s3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_s3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ap_s4"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_s4"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_s4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_s4"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_s4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_s4"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""z3_acceleration"" SET ""id"" = :id, ""id_z3"" = :id_z3, ""numberPosition"& _ 
                """ = :numberPosition, ""al_pb"" = :al_pb, ""ab"" = :ab, ""mashtab_ma"" = :mashtab_ma, """& _ 
                "mashtab_ma_view"" = :mashtab_ma_view, ""ap_pi"" = :ap_pi, ""angle_Pb"" = :angle_Pb, """& _ 
                "ap_b"" = :ap_b, ""a_bn3"" = :a_bn3, ""al_bn3"" = :al_bn3, ""angleCB"" = :angleCB, ""ap_n"& _ 
                "3"" = :ap_n3, ""ap_c"" = :ap_c, ""a_c"" = :a_c, ""al_c"" = :al_c, ""a_n3c"" = :a_n3c, ""al"& _ 
                "_n3c"" = :al_n3c, ""a_bc"" = :a_bc, ""al_bc"" = :al_bc, ""a_cd"" = :a_cd, ""al_cd"" = :al"& _ 
                "_cd, ""angle_cd"" = :angle_cd, ""ap_d"" = :ap_d, ""a_d"" = :a_d, ""al_d"" = :al_d, ""ap_s"& _ 
                "2"" = :ap_s2, ""a_s2"" = :a_s2, ""al_s2"" = :al_s2, ""ap_s3"" = :ap_s3, ""a_s3"" = :a_s3,"& _ 
                " ""al_s3"" = :al_s3, ""ap_s4"" = :ap_s4, ""a_s4"" = :a_s4, ""al_s4"" = :al_s4 WHERE ((""i"& _ 
                "d"" = :Original_id) AND ((:IsNull_id_z3 = 1 AND ""id_z3"" IS NULL) OR (""id_z3"" = :O"& _ 
                "riginal_id_z3)) AND ((:IsNull_numberPosition = 1 AND ""numberPosition"" IS NULL) O"& _ 
                "R (""numberPosition"" = :Original_numberPosition)) AND ((:IsNull_al_pb = 1 AND ""al"& _ 
                "_pb"" IS NULL) OR (""al_pb"" = :Original_al_pb)) AND ((:IsNull_ab = 1 AND ""ab"" IS N"& _ 
                "ULL) OR (""ab"" = :Original_ab)) AND ((:IsNull_mashtab_ma = 1 AND ""mashtab_ma"" IS "& _ 
                "NULL) OR (""mashtab_ma"" = :Original_mashtab_ma)) AND ((:IsNull_mashtab_ma_view = "& _ 
                "1 AND ""mashtab_ma_view"" IS NULL) OR (""mashtab_ma_view"" = :Original_mashtab_ma_vi"& _ 
                "ew)) AND ((:IsNull_ap_pi = 1 AND ""ap_pi"" IS NULL) OR (""ap_pi"" = :Original_ap_pi)"& _ 
                ") AND ((:IsNull_angle_Pb = 1 AND ""angle_Pb"" IS NULL) OR (""angle_Pb"" = :Original_"& _ 
                "angle_Pb)) AND ((:IsNull_ap_b = 1 AND ""ap_b"" IS NULL) OR (""ap_b"" = :Original_ap_"& _ 
                "b)) AND ((:IsNull_a_bn3 = 1 AND ""a_bn3"" IS NULL) OR (""a_bn3"" = :Original_a_bn3))"& _ 
                " AND ((:IsNull_al_bn3 = 1 AND ""al_bn3"" IS NULL) OR (""al_bn3"" = :Original_al_bn3)"& _ 
                ") AND ((:IsNull_angleCB = 1 AND ""angleCB"" IS NULL) OR (""angleCB"" = :Original_ang"& _ 
                "leCB)) AND ((:IsNull_ap_n3 = 1 AND ""ap_n3"" IS NULL) OR (""ap_n3"" = :Original_ap_n"& _ 
                "3)) AND ((:IsNull_ap_c = 1 AND ""ap_c"" IS NULL) OR (""ap_c"" = :Original_ap_c)) AND"& _ 
                " ((:IsNull_a_c = 1 AND ""a_c"" IS NULL) OR (""a_c"" = :Original_a_c)) AND ((:IsNull_"& _ 
                "al_c = 1 AND ""al_c"" IS NULL) OR (""al_c"" = :Original_al_c)) AND ((:IsNull_a_n3c ="& _ 
                " 1 AND ""a_n3c"" IS NULL) OR (""a_n3c"" = :Original_a_n3c)) AND ((:IsNull_al_n3c = 1"& _ 
                " AND ""al_n3c"" IS NULL) OR (""al_n3c"" = :Original_al_n3c)) AND ((:IsNull_a_bc = 1 "& _ 
                "AND ""a_bc"" IS NULL) OR (""a_bc"" = :Original_a_bc)) AND ((:IsNull_al_bc = 1 AND ""a"& _ 
                "l_bc"" IS NULL) OR (""al_bc"" = :Original_al_bc)) AND ((:IsNull_a_cd = 1 AND ""a_cd"""& _ 
                " IS NULL) OR (""a_cd"" = :Original_a_cd)) AND ((:IsNull_al_cd = 1 AND ""al_cd"" IS N"& _ 
                "ULL) OR (""al_cd"" = :Original_al_cd)) AND ((:IsNull_angle_cd = 1 AND ""angle_cd"" I"& _ 
                "S NULL) OR (""angle_cd"" = :Original_angle_cd)) AND ((:IsNull_ap_d = 1 AND ""ap_d"" "& _ 
                "IS NULL) OR (""ap_d"" = :Original_ap_d)) AND ((:IsNull_a_d = 1 AND ""a_d"" IS NULL) "& _ 
                "OR (""a_d"" = :Original_a_d)) AND ((:IsNull_al_d = 1 AND ""al_d"" IS NULL) OR (""al_d"& _ 
                """ = :Original_al_d)) AND ((:IsNull_ap_s2 = 1 AND ""ap_s2"" IS NULL) OR (""ap_s2"" = "& _ 
                ":Original_ap_s2)) AND ((:IsNull_a_s2 = 1 AND ""a_s2"" IS NULL) OR (""a_s2"" = :Origi"& _ 
                "nal_a_s2)) AND ((:IsNull_al_s2 = 1 AND ""al_s2"" IS NULL) OR (""al_s2"" = :Original_"& _ 
                "al_s2)) AND ((:IsNull_ap_s3 = 1 AND ""ap_s3"" IS NULL) OR (""ap_s3"" = :Original_ap_"& _ 
                "s3)) AND ((:IsNull_a_s3 = 1 AND ""a_s3"" IS NULL) OR (""a_s3"" = :Original_a_s3)) AN"& _ 
                "D ((:IsNull_al_s3 = 1 AND ""al_s3"" IS NULL) OR (""al_s3"" = :Original_al_s3)) AND ("& _ 
                "(:IsNull_ap_s4 = 1 AND ""ap_s4"" IS NULL) OR (""ap_s4"" = :Original_ap_s4)) AND ((:I"& _ 
                "sNull_a_s4 = 1 AND ""a_s4"" IS NULL) OR (""a_s4"" = :Original_a_s4)) AND ((:IsNull_a"& _ 
                "l_s4 = 1 AND ""al_s4"" IS NULL) OR (""al_s4"" = :Original_al_s4)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "numberPosition"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_pb"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ab"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ab"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mashtab_ma"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_ma"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mashtab_ma_view"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_ma_view"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ap_pi"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_pi"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angle_Pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_Pb"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ap_b"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_b"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_bn3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_bn3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_bn3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_bn3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angleCB"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angleCB"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ap_n3"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_n3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ap_c"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_c"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_c"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_c"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_n3c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_n3c"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_n3c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_n3c"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_bc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_bc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_cd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_cd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angle_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_cd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ap_d"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_d"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_d"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_d"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_d"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_d"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ap_s2"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_s2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_s2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_s2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_s2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_s2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ap_s3"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_s3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_s3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_s3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_s3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_s3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ap_s4"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_s4"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "a_s4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_s4"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_s4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_s4"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_id_z3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_numberPosition"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_numberPosition"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_pb"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ab"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ab"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ab"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ab"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mashtab_ma"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mashtab_ma"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mashtab_ma"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_ma"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mashtab_ma_view"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mashtab_ma_view"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mashtab_ma_view"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_ma_view"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ap_pi"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ap_pi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ap_pi"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_pi"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angle_Pb"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angle_Pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angle_Pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_Pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ap_b"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ap_b"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ap_b"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_b"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_bn3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_bn3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_bn3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_bn3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_bn3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_bn3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_bn3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_bn3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angleCB"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angleCB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angleCB"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angleCB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ap_n3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ap_n3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ap_n3"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_n3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ap_c"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ap_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ap_c"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_c"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_c"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_n3c"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_n3c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_n3c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_n3c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_n3c"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_n3c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_n3c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_n3c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_bc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_bc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_cd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_cd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angle_cd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angle_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angle_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ap_d"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ap_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ap_d"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_d"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_d"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_d"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_d"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ap_s2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ap_s2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ap_s2"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_s2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_s2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_s2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_s2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_s2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_s2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_s2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_s2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_s2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ap_s3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ap_s3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ap_s3"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_s3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_s3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_s3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_s3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_s3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_s3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_s3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_s3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_s3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ap_s4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ap_s4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ap_s4"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "ap_s4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_a_s4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "a_s4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_a_s4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "a_s4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_s4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_s4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_s4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_s4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.TMM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, id_z3, numberPosition, al_pb, ab, mashtab_ma, mashtab_ma_view, ap_pi, "& _ 
                "angle_Pb, ap_b, a_bn3, al_bn3, angleCB, ap_n3, ap_c, a_c, al_c, a_n3c, al_n3c, a"& _ 
                "_bc, al_bc, a_cd, al_cd, angle_cd, ap_d, a_d, al_d, ap_s2, a_s2, al_s2, ap_s3, a"& _ 
                "_s3, al_s3, ap_s4, a_s4, al_s4 FROM ""main"".z3_acceleration"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.z3_accelerationDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.z3_accelerationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.z3_accelerationDataTable = New DataSet1.z3_accelerationDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.z3_accelerationDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "z3_acceleration")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_id As Long,  _
                    ByVal Original_id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal Original_numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal Original_al_pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_ab As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_ma As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_ma_view As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_pi As String,  _
                    ByVal Original_angle_Pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_b As String,  _
                    ByVal Original_a_bn3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_bn3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_angleCB As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_n3 As String,  _
                    ByVal Original_ap_c As String,  _
                    ByVal Original_a_c As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_c As Global.System.Nullable(Of Double),  _
                    ByVal Original_a_n3c As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_n3c As Global.System.Nullable(Of Double),  _
                    ByVal Original_a_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_a_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_angle_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_d As String,  _
                    ByVal Original_a_d As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_d As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_s2 As String,  _
                    ByVal Original_a_s2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_s2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_s3 As String,  _
                    ByVal Original_a_s3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_s3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_s4 As String,  _
                    ByVal Original_a_s4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_s4 As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_id_z3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_id_z3.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_numberPosition.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_numberPosition.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_al_pb.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_al_pb.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_ab.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ab.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_mashtab_ma.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_mashtab_ma.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_mashtab_ma_view.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_mashtab_ma_view.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_ap_pi Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ap_pi,String)
            End If
            If (Original_angle_Pb.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_angle_Pb.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_ap_b Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ap_b,String)
            End If
            If (Original_a_bn3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_a_bn3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_al_bn3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_al_bn3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_angleCB.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_angleCB.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_ap_n3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_ap_n3,String)
            End If
            If (Original_ap_c Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_ap_c,String)
            End If
            If (Original_a_c.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_a_c.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_al_c.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_al_c.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_a_n3c.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_a_n3c.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_al_n3c.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_al_n3c.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_a_bc.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_a_bc.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_al_bc.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_al_bc.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_a_cd.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_a_cd.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_al_cd.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_al_cd.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_angle_cd.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_angle_cd.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_ap_d Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_ap_d,String)
            End If
            If (Original_a_d.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_a_d.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_al_d.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_al_d.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_ap_s2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_ap_s2,String)
            End If
            If (Original_a_s2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_a_s2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (Original_al_s2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_al_s2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (Original_ap_s3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_ap_s3,String)
            End If
            If (Original_a_s3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_a_s3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (Original_al_s3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_al_s3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (Original_ap_s4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(Original_ap_s4,String)
            End If
            If (Original_a_s4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(Original_a_s4.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (Original_al_s4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(Original_al_s4.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal id As Long,  _
                    ByVal id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal al_pb As Global.System.Nullable(Of Double),  _
                    ByVal ab As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_ma As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_ma_view As Global.System.Nullable(Of Double),  _
                    ByVal ap_pi As String,  _
                    ByVal angle_Pb As Global.System.Nullable(Of Double),  _
                    ByVal ap_b As String,  _
                    ByVal a_bn3 As Global.System.Nullable(Of Double),  _
                    ByVal al_bn3 As Global.System.Nullable(Of Double),  _
                    ByVal angleCB As Global.System.Nullable(Of Double),  _
                    ByVal ap_n3 As String,  _
                    ByVal ap_c As String,  _
                    ByVal a_c As Global.System.Nullable(Of Double),  _
                    ByVal al_c As Global.System.Nullable(Of Double),  _
                    ByVal a_n3c As Global.System.Nullable(Of Double),  _
                    ByVal al_n3c As Global.System.Nullable(Of Double),  _
                    ByVal a_bc As Global.System.Nullable(Of Double),  _
                    ByVal al_bc As Global.System.Nullable(Of Double),  _
                    ByVal a_cd As Global.System.Nullable(Of Double),  _
                    ByVal al_cd As Global.System.Nullable(Of Double),  _
                    ByVal angle_cd As Global.System.Nullable(Of Double),  _
                    ByVal ap_d As String,  _
                    ByVal a_d As Global.System.Nullable(Of Double),  _
                    ByVal al_d As Global.System.Nullable(Of Double),  _
                    ByVal ap_s2 As String,  _
                    ByVal a_s2 As Global.System.Nullable(Of Double),  _
                    ByVal al_s2 As Global.System.Nullable(Of Double),  _
                    ByVal ap_s3 As String,  _
                    ByVal a_s3 As Global.System.Nullable(Of Double),  _
                    ByVal al_s3 As Global.System.Nullable(Of Double),  _
                    ByVal ap_s4 As String,  _
                    ByVal a_s4 As Global.System.Nullable(Of Double),  _
                    ByVal al_s4 As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            If (id_z3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(id_z3.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (numberPosition.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(numberPosition.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (al_pb.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(al_pb.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ab.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ab.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (mashtab_ma.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(mashtab_ma.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (mashtab_ma_view.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(mashtab_ma_view.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ap_pi Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ap_pi,String)
            End If
            If (angle_Pb.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(angle_Pb.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ap_b Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ap_b,String)
            End If
            If (a_bn3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(a_bn3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (al_bn3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(al_bn3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (angleCB.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(angleCB.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ap_n3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(ap_n3,String)
            End If
            If (ap_c Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(ap_c,String)
            End If
            If (a_c.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(a_c.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (al_c.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(al_c.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (a_n3c.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(a_n3c.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (al_n3c.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(al_n3c.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (a_bc.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(a_bc.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (al_bc.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(al_bc.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (a_cd.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(a_cd.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (al_cd.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(al_cd.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (angle_cd.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(angle_cd.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (ap_d Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(ap_d,String)
            End If
            If (a_d.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(a_d.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (al_d.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(al_d.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (ap_s2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(ap_s2,String)
            End If
            If (a_s2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(a_s2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (al_s2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(al_s2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (ap_s3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(ap_s3,String)
            End If
            If (a_s3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(a_s3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (al_s3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(al_s3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (ap_s4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(ap_s4,String)
            End If
            If (a_s4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(a_s4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (al_s4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(al_s4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id As Long,  _
                    ByVal id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal al_pb As Global.System.Nullable(Of Double),  _
                    ByVal ab As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_ma As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_ma_view As Global.System.Nullable(Of Double),  _
                    ByVal ap_pi As String,  _
                    ByVal angle_Pb As Global.System.Nullable(Of Double),  _
                    ByVal ap_b As String,  _
                    ByVal a_bn3 As Global.System.Nullable(Of Double),  _
                    ByVal al_bn3 As Global.System.Nullable(Of Double),  _
                    ByVal angleCB As Global.System.Nullable(Of Double),  _
                    ByVal ap_n3 As String,  _
                    ByVal ap_c As String,  _
                    ByVal a_c As Global.System.Nullable(Of Double),  _
                    ByVal al_c As Global.System.Nullable(Of Double),  _
                    ByVal a_n3c As Global.System.Nullable(Of Double),  _
                    ByVal al_n3c As Global.System.Nullable(Of Double),  _
                    ByVal a_bc As Global.System.Nullable(Of Double),  _
                    ByVal al_bc As Global.System.Nullable(Of Double),  _
                    ByVal a_cd As Global.System.Nullable(Of Double),  _
                    ByVal al_cd As Global.System.Nullable(Of Double),  _
                    ByVal angle_cd As Global.System.Nullable(Of Double),  _
                    ByVal ap_d As String,  _
                    ByVal a_d As Global.System.Nullable(Of Double),  _
                    ByVal al_d As Global.System.Nullable(Of Double),  _
                    ByVal ap_s2 As String,  _
                    ByVal a_s2 As Global.System.Nullable(Of Double),  _
                    ByVal al_s2 As Global.System.Nullable(Of Double),  _
                    ByVal ap_s3 As String,  _
                    ByVal a_s3 As Global.System.Nullable(Of Double),  _
                    ByVal al_s3 As Global.System.Nullable(Of Double),  _
                    ByVal ap_s4 As String,  _
                    ByVal a_s4 As Global.System.Nullable(Of Double),  _
                    ByVal al_s4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_id As Long,  _
                    ByVal Original_id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal Original_numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal Original_al_pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_ab As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_ma As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_ma_view As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_pi As String,  _
                    ByVal Original_angle_Pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_b As String,  _
                    ByVal Original_a_bn3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_bn3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_angleCB As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_n3 As String,  _
                    ByVal Original_ap_c As String,  _
                    ByVal Original_a_c As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_c As Global.System.Nullable(Of Double),  _
                    ByVal Original_a_n3c As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_n3c As Global.System.Nullable(Of Double),  _
                    ByVal Original_a_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_a_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_angle_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_d As String,  _
                    ByVal Original_a_d As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_d As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_s2 As String,  _
                    ByVal Original_a_s2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_s2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_s3 As String,  _
                    ByVal Original_a_s3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_s3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_s4 As String,  _
                    ByVal Original_a_s4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_s4 As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            If (id_z3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(id_z3.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (numberPosition.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(numberPosition.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (al_pb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(al_pb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ab.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ab.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (mashtab_ma.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(mashtab_ma.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (mashtab_ma_view.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(mashtab_ma_view.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ap_pi Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ap_pi,String)
            End If
            If (angle_Pb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(angle_Pb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ap_b Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ap_b,String)
            End If
            If (a_bn3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(a_bn3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (al_bn3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(al_bn3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (angleCB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(angleCB.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ap_n3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ap_n3,String)
            End If
            If (ap_c Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(ap_c,String)
            End If
            If (a_c.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(a_c.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (al_c.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(al_c.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (a_n3c.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(a_n3c.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (al_n3c.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(al_n3c.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (a_bc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(a_bc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (al_bc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(al_bc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (a_cd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(a_cd.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (al_cd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(al_cd.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (angle_cd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(angle_cd.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (ap_d Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(ap_d,String)
            End If
            If (a_d.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(a_d.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (al_d.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(al_d.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (ap_s2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(ap_s2,String)
            End If
            If (a_s2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(a_s2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (al_s2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(al_s2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (ap_s3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(ap_s3,String)
            End If
            If (a_s3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(a_s3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (al_s3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(al_s3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (ap_s4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(ap_s4,String)
            End If
            If (a_s4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(a_s4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (al_s4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(al_s4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_id,Long)
            If (Original_id_z3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_id_z3.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_numberPosition.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_numberPosition.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_al_pb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_al_pb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_ab.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_ab.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_mashtab_ma.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_mashtab_ma.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_mashtab_ma_view.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_mashtab_ma_view.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_ap_pi Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_ap_pi,String)
            End If
            If (Original_angle_Pb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_angle_Pb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_ap_b Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_ap_b,String)
            End If
            If (Original_a_bn3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_a_bn3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (Original_al_bn3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_al_bn3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (Original_angleCB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_angleCB.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (Original_ap_n3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_ap_n3,String)
            End If
            If (Original_ap_c Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_ap_c,String)
            End If
            If (Original_a_c.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_a_c.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (Original_al_c.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_al_c.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (Original_a_n3c.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_a_n3c.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (Original_al_n3c.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_al_n3c.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (Original_a_bc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_a_bc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (Original_al_bc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_al_bc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (Original_a_cd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_a_cd.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            End If
            If (Original_al_cd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_al_cd.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            End If
            If (Original_angle_cd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_angle_cd.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (Original_ap_d Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_ap_d,String)
            End If
            If (Original_a_d.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_a_d.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (Original_al_d.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_al_d.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            End If
            If (Original_ap_s2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_ap_s2,String)
            End If
            If (Original_a_s2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_a_s2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            End If
            If (Original_al_s2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_al_s2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            End If
            If (Original_ap_s3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_ap_s3,String)
            End If
            If (Original_a_s3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_a_s3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = Global.System.DBNull.Value
            End If
            If (Original_al_s3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(Original_al_s3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = Global.System.DBNull.Value
            End If
            If (Original_ap_s4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(Original_ap_s4,String)
            End If
            If (Original_a_s4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(Original_a_s4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = Global.System.DBNull.Value
            End If
            If (Original_al_s4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(Original_al_s4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal al_pb As Global.System.Nullable(Of Double),  _
                    ByVal ab As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_ma As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_ma_view As Global.System.Nullable(Of Double),  _
                    ByVal ap_pi As String,  _
                    ByVal angle_Pb As Global.System.Nullable(Of Double),  _
                    ByVal ap_b As String,  _
                    ByVal a_bn3 As Global.System.Nullable(Of Double),  _
                    ByVal al_bn3 As Global.System.Nullable(Of Double),  _
                    ByVal angleCB As Global.System.Nullable(Of Double),  _
                    ByVal ap_n3 As String,  _
                    ByVal ap_c As String,  _
                    ByVal a_c As Global.System.Nullable(Of Double),  _
                    ByVal al_c As Global.System.Nullable(Of Double),  _
                    ByVal a_n3c As Global.System.Nullable(Of Double),  _
                    ByVal al_n3c As Global.System.Nullable(Of Double),  _
                    ByVal a_bc As Global.System.Nullable(Of Double),  _
                    ByVal al_bc As Global.System.Nullable(Of Double),  _
                    ByVal a_cd As Global.System.Nullable(Of Double),  _
                    ByVal al_cd As Global.System.Nullable(Of Double),  _
                    ByVal angle_cd As Global.System.Nullable(Of Double),  _
                    ByVal ap_d As String,  _
                    ByVal a_d As Global.System.Nullable(Of Double),  _
                    ByVal al_d As Global.System.Nullable(Of Double),  _
                    ByVal ap_s2 As String,  _
                    ByVal a_s2 As Global.System.Nullable(Of Double),  _
                    ByVal al_s2 As Global.System.Nullable(Of Double),  _
                    ByVal ap_s3 As String,  _
                    ByVal a_s3 As Global.System.Nullable(Of Double),  _
                    ByVal al_s3 As Global.System.Nullable(Of Double),  _
                    ByVal ap_s4 As String,  _
                    ByVal a_s4 As Global.System.Nullable(Of Double),  _
                    ByVal al_s4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_id As Long,  _
                    ByVal Original_id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal Original_numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal Original_al_pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_ab As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_ma As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_ma_view As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_pi As String,  _
                    ByVal Original_angle_Pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_b As String,  _
                    ByVal Original_a_bn3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_bn3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_angleCB As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_n3 As String,  _
                    ByVal Original_ap_c As String,  _
                    ByVal Original_a_c As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_c As Global.System.Nullable(Of Double),  _
                    ByVal Original_a_n3c As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_n3c As Global.System.Nullable(Of Double),  _
                    ByVal Original_a_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_a_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_angle_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_d As String,  _
                    ByVal Original_a_d As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_d As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_s2 As String,  _
                    ByVal Original_a_s2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_s2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_s3 As String,  _
                    ByVal Original_a_s3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_s3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ap_s4 As String,  _
                    ByVal Original_a_s4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_s4 As Global.System.Nullable(Of Double)) As Integer
            Return Me.Update(Original_id, id_z3, numberPosition, al_pb, ab, mashtab_ma, mashtab_ma_view, ap_pi, angle_Pb, ap_b, a_bn3, al_bn3, angleCB, ap_n3, ap_c, a_c, al_c, a_n3c, al_n3c, a_bc, al_bc, a_cd, al_cd, angle_cd, ap_d, a_d, al_d, ap_s2, a_s2, al_s2, ap_s3, a_s3, al_s3, ap_s4, a_s4, al_s4, Original_id, Original_id_z3, Original_numberPosition, Original_al_pb, Original_ab, Original_mashtab_ma, Original_mashtab_ma_view, Original_ap_pi, Original_angle_Pb, Original_ap_b, Original_a_bn3, Original_al_bn3, Original_angleCB, Original_ap_n3, Original_ap_c, Original_a_c, Original_al_c, Original_a_n3c, Original_al_n3c, Original_a_bc, Original_al_bc, Original_a_cd, Original_al_cd, Original_angle_cd, Original_ap_d, Original_a_d, Original_al_d, Original_ap_s2, Original_a_s2, Original_al_s2, Original_ap_s3, Original_a_s3, Original_al_s3, Original_ap_s4, Original_a_s4, Original_al_s4)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class z3_dataTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "z3_data"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("L_ab", "L_ab")
            tableMapping.ColumnMappings.Add("L_bc", "L_bc")
            tableMapping.ColumnMappings.Add("L_bd", "L_bd")
            tableMapping.ColumnMappings.Add("L_a", "L_a")
            tableMapping.ColumnMappings.Add("m2", "m2")
            tableMapping.ColumnMappings.Add("m3", "m3")
            tableMapping.ColumnMappings.Add("m4", "m4")
            tableMapping.ColumnMappings.Add("Fc", "Fc")
            tableMapping.ColumnMappings.Add("fi_v", "fi_v")
            tableMapping.ColumnMappings.Add("fi_dv", "fi_dv")
            tableMapping.ColumnMappings.Add("fi_pov", "fi_pov")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""z3_data"" WHERE ((""id"" = :Original_id) AND ((:IsNull_L_ab = 1 "& _ 
                "AND ""L_ab"" IS NULL) OR (""L_ab"" = :Original_L_ab)) AND ((:IsNull_L_bc = 1 AND ""L_"& _ 
                "bc"" IS NULL) OR (""L_bc"" = :Original_L_bc)) AND ((:IsNull_L_bd = 1 AND ""L_bd"" IS "& _ 
                "NULL) OR (""L_bd"" = :Original_L_bd)) AND ((:IsNull_L_a = 1 AND ""L_a"" IS NULL) OR "& _ 
                "(""L_a"" = :Original_L_a)) AND ((:IsNull_m2 = 1 AND ""m2"" IS NULL) OR (""m2"" = :Orig"& _ 
                "inal_m2)) AND ((:IsNull_m3 = 1 AND ""m3"" IS NULL) OR (""m3"" = :Original_m3)) AND ("& _ 
                "(:IsNull_m4 = 1 AND ""m4"" IS NULL) OR (""m4"" = :Original_m4)) AND ((:IsNull_Fc = 1"& _ 
                " AND ""Fc"" IS NULL) OR (""Fc"" = :Original_Fc)) AND ((:IsNull_fi_v = 1 AND ""fi_v"" I"& _ 
                "S NULL) OR (""fi_v"" = :Original_fi_v)) AND ((:IsNull_fi_dv = 1 AND ""fi_dv"" IS NUL"& _ 
                "L) OR (""fi_dv"" = :Original_fi_dv)) AND ((:IsNull_fi_pov = 1 AND ""fi_pov"" IS NULL"& _ 
                ") OR (""fi_pov"" = :Original_fi_pov)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_L_ab"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_L_ab"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_L_bc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "L_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_L_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_L_bd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "L_bd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_L_bd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_bd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_L_a"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "L_a"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_L_a"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_a"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_m2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "m2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_m2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_m3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "m3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_m3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_m4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "m4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_m4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Fc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Fc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Fc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Fc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_fi_v"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "fi_v"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_fi_v"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "fi_v"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_fi_dv"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "fi_dv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_fi_dv"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "fi_dv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_fi_pov"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "fi_pov"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_fi_pov"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "fi_pov"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""z3_data"" (""id"", ""L_ab"", ""L_bc"", ""L_bd"", ""L_a"", ""m2"", ""m3"", ""m"& _ 
                "4"", ""Fc"", ""fi_v"", ""fi_dv"", ""fi_pov"") VALUES (:id, :L_ab, :L_bc, :L_bd, :L_a, :m2"& _ 
                ", :m3, :m4, :Fc, :fi_v, :fi_dv, :fi_pov)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "L_ab"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "L_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_bc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "L_bd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_bd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "L_a"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_a"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "m2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "m3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "m4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m4"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Fc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Fc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "fi_v"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "fi_v"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "fi_dv"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "fi_dv"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "fi_pov"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "fi_pov"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""z3_data"" SET ""id"" = :id, ""L_ab"" = :L_ab, ""L_bc"" = :L_bc, ""L_bd"" = "& _ 
                ":L_bd, ""L_a"" = :L_a, ""m2"" = :m2, ""m3"" = :m3, ""m4"" = :m4, ""Fc"" = :Fc, ""fi_v"" = :f"& _ 
                "i_v, ""fi_dv"" = :fi_dv, ""fi_pov"" = :fi_pov WHERE ((""id"" = :Original_id) AND ((:Is"& _ 
                "Null_L_ab = 1 AND ""L_ab"" IS NULL) OR (""L_ab"" = :Original_L_ab)) AND ((:IsNull_L_"& _ 
                "bc = 1 AND ""L_bc"" IS NULL) OR (""L_bc"" = :Original_L_bc)) AND ((:IsNull_L_bd = 1 "& _ 
                "AND ""L_bd"" IS NULL) OR (""L_bd"" = :Original_L_bd)) AND ((:IsNull_L_a = 1 AND ""L_a"& _ 
                """ IS NULL) OR (""L_a"" = :Original_L_a)) AND ((:IsNull_m2 = 1 AND ""m2"" IS NULL) OR"& _ 
                " (""m2"" = :Original_m2)) AND ((:IsNull_m3 = 1 AND ""m3"" IS NULL) OR (""m3"" = :Origi"& _ 
                "nal_m3)) AND ((:IsNull_m4 = 1 AND ""m4"" IS NULL) OR (""m4"" = :Original_m4)) AND (("& _ 
                ":IsNull_Fc = 1 AND ""Fc"" IS NULL) OR (""Fc"" = :Original_Fc)) AND ((:IsNull_fi_v = "& _ 
                "1 AND ""fi_v"" IS NULL) OR (""fi_v"" = :Original_fi_v)) AND ((:IsNull_fi_dv = 1 AND "& _ 
                """fi_dv"" IS NULL) OR (""fi_dv"" = :Original_fi_dv)) AND ((:IsNull_fi_pov = 1 AND ""f"& _ 
                "i_pov"" IS NULL) OR (""fi_pov"" = :Original_fi_pov)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "L_ab"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "L_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_bc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "L_bd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_bd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "L_a"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_a"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "m2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "m3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "m4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m4"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Fc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Fc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "fi_v"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "fi_v"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "fi_dv"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "fi_dv"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "fi_pov"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "fi_pov"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_L_ab"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_L_ab"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_L_bc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "L_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_L_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_L_bd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "L_bd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_L_bd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_bd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_L_a"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "L_a"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_L_a"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_a"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_m2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "m2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_m2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_m3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "m3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_m3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_m4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "m4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_m4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Fc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Fc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Fc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Fc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_fi_v"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "fi_v"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_fi_v"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "fi_v"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_fi_dv"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "fi_dv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_fi_dv"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "fi_dv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_fi_pov"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "fi_pov"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_fi_pov"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "fi_pov"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.TMM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, L_ab, L_bc, L_bd, L_a, m2, m3, m4, Fc, fi_v, fi_dv, fi_pov FROM ""main"""& _ 
                ".z3_data"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.z3_dataDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.z3_dataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.z3_dataDataTable = New DataSet1.z3_dataDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.z3_dataDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "z3_data")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_L_ab As Global.System.Nullable(Of Double), ByVal Original_L_bc As Global.System.Nullable(Of Double), ByVal Original_L_bd As Global.System.Nullable(Of Double), ByVal Original_L_a As Global.System.Nullable(Of Double), ByVal Original_m2 As Global.System.Nullable(Of Double), ByVal Original_m3 As Global.System.Nullable(Of Double), ByVal Original_m4 As Global.System.Nullable(Of Double), ByVal Original_Fc As Global.System.Nullable(Of Double), ByVal Original_fi_v As Global.System.Nullable(Of Long), ByVal Original_fi_dv As Global.System.Nullable(Of Long), ByVal Original_fi_pov As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_L_ab.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_L_ab.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_L_bc.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_L_bc.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_L_bd.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_L_bd.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_L_a.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_L_a.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_m2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_m2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_m3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_m3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_m4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_m4.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Fc.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Fc.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_fi_v.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_fi_v.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_fi_dv.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_fi_dv.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_fi_pov.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_fi_pov.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Long, ByVal L_ab As Global.System.Nullable(Of Double), ByVal L_bc As Global.System.Nullable(Of Double), ByVal L_bd As Global.System.Nullable(Of Double), ByVal L_a As Global.System.Nullable(Of Double), ByVal m2 As Global.System.Nullable(Of Double), ByVal m3 As Global.System.Nullable(Of Double), ByVal m4 As Global.System.Nullable(Of Double), ByVal Fc As Global.System.Nullable(Of Double), ByVal fi_v As Global.System.Nullable(Of Long), ByVal fi_dv As Global.System.Nullable(Of Long), ByVal fi_pov As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            If (L_ab.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(L_ab.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (L_bc.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(L_bc.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (L_bd.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(L_bd.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (L_a.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(L_a.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (m2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(m2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (m3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(m3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (m4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(m4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Fc.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Fc.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (fi_v.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(fi_v.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (fi_dv.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(fi_dv.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (fi_pov.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(fi_pov.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id As Long,  _
                    ByVal L_ab As Global.System.Nullable(Of Double),  _
                    ByVal L_bc As Global.System.Nullable(Of Double),  _
                    ByVal L_bd As Global.System.Nullable(Of Double),  _
                    ByVal L_a As Global.System.Nullable(Of Double),  _
                    ByVal m2 As Global.System.Nullable(Of Double),  _
                    ByVal m3 As Global.System.Nullable(Of Double),  _
                    ByVal m4 As Global.System.Nullable(Of Double),  _
                    ByVal Fc As Global.System.Nullable(Of Double),  _
                    ByVal fi_v As Global.System.Nullable(Of Long),  _
                    ByVal fi_dv As Global.System.Nullable(Of Long),  _
                    ByVal fi_pov As Global.System.Nullable(Of Long),  _
                    ByVal Original_id As Long,  _
                    ByVal Original_L_ab As Global.System.Nullable(Of Double),  _
                    ByVal Original_L_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_L_bd As Global.System.Nullable(Of Double),  _
                    ByVal Original_L_a As Global.System.Nullable(Of Double),  _
                    ByVal Original_m2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_m3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_m4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_Fc As Global.System.Nullable(Of Double),  _
                    ByVal Original_fi_v As Global.System.Nullable(Of Long),  _
                    ByVal Original_fi_dv As Global.System.Nullable(Of Long),  _
                    ByVal Original_fi_pov As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            If (L_ab.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(L_ab.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (L_bc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(L_bc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (L_bd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(L_bd.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (L_a.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(L_a.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (m2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(m2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (m3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(m3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (m4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(m4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Fc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Fc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (fi_v.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(fi_v.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (fi_dv.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(fi_dv.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (fi_pov.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(fi_pov.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_id,Long)
            If (Original_L_ab.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_L_ab.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_L_bc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_L_bc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_L_bd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_L_bd.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_L_a.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_L_a.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_m2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_m2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_m3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_m3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_m4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_m4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_Fc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Fc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_fi_v.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_fi_v.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_fi_dv.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_fi_dv.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_fi_pov.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_fi_pov.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal L_ab As Global.System.Nullable(Of Double),  _
                    ByVal L_bc As Global.System.Nullable(Of Double),  _
                    ByVal L_bd As Global.System.Nullable(Of Double),  _
                    ByVal L_a As Global.System.Nullable(Of Double),  _
                    ByVal m2 As Global.System.Nullable(Of Double),  _
                    ByVal m3 As Global.System.Nullable(Of Double),  _
                    ByVal m4 As Global.System.Nullable(Of Double),  _
                    ByVal Fc As Global.System.Nullable(Of Double),  _
                    ByVal fi_v As Global.System.Nullable(Of Long),  _
                    ByVal fi_dv As Global.System.Nullable(Of Long),  _
                    ByVal fi_pov As Global.System.Nullable(Of Long),  _
                    ByVal Original_id As Long,  _
                    ByVal Original_L_ab As Global.System.Nullable(Of Double),  _
                    ByVal Original_L_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_L_bd As Global.System.Nullable(Of Double),  _
                    ByVal Original_L_a As Global.System.Nullable(Of Double),  _
                    ByVal Original_m2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_m3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_m4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_Fc As Global.System.Nullable(Of Double),  _
                    ByVal Original_fi_v As Global.System.Nullable(Of Long),  _
                    ByVal Original_fi_dv As Global.System.Nullable(Of Long),  _
                    ByVal Original_fi_pov As Global.System.Nullable(Of Long)) As Integer
            Return Me.Update(Original_id, L_ab, L_bc, L_bd, L_a, m2, m3, m4, Fc, fi_v, fi_dv, fi_pov, Original_id, Original_L_ab, Original_L_bc, Original_L_bd, Original_L_a, Original_m2, Original_m3, Original_m4, Original_Fc, Original_fi_v, Original_fi_dv, Original_fi_pov)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class z3_izvTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "z3_izv"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("id_z3", "id_z3")
            tableMapping.ColumnMappings.Add("L_ab", "L_ab")
            tableMapping.ColumnMappings.Add("pb", "pb")
            tableMapping.ColumnMappings.Add("m3", "m3")
            tableMapping.ColumnMappings.Add("ps3", "ps3")
            tableMapping.ColumnMappings.Add("L_bc", "L_bc")
            tableMapping.ColumnMappings.Add("vl_bc", "vl_bc")
            tableMapping.ColumnMappings.Add("m4", "m4")
            tableMapping.ColumnMappings.Add("ps4", "ps4")
            tableMapping.ColumnMappings.Add("is2", "is2")
            tableMapping.ColumnMappings.Add("is3", "is3")
            tableMapping.ColumnMappings.Add("izv", "izv")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""z3_izv"" WHERE ((""id"" = :Original_id) AND ((:IsNull_id_z3 = 1 "& _ 
                "AND ""id_z3"" IS NULL) OR (""id_z3"" = :Original_id_z3)) AND ((:IsNull_L_ab = 1 AND "& _ 
                """L_ab"" IS NULL) OR (""L_ab"" = :Original_L_ab)) AND ((:IsNull_pb = 1 AND ""pb"" IS N"& _ 
                "ULL) OR (""pb"" = :Original_pb)) AND ((:IsNull_m3 = 1 AND ""m3"" IS NULL) OR (""m3"" ="& _ 
                " :Original_m3)) AND ((:IsNull_ps3 = 1 AND ""ps3"" IS NULL) OR (""ps3"" = :Original_p"& _ 
                "s3)) AND ((:IsNull_L_bc = 1 AND ""L_bc"" IS NULL) OR (""L_bc"" = :Original_L_bc)) AN"& _ 
                "D ((:IsNull_vl_bc = 1 AND ""vl_bc"" IS NULL) OR (""vl_bc"" = :Original_vl_bc)) AND ("& _ 
                "(:IsNull_m4 = 1 AND ""m4"" IS NULL) OR (""m4"" = :Original_m4)) AND ((:IsNull_ps4 = "& _ 
                "1 AND ""ps4"" IS NULL) OR (""ps4"" = :Original_ps4)) AND ((:IsNull_is2 = 1 AND ""is2"""& _ 
                " IS NULL) OR (""is2"" = :Original_is2)) AND ((:IsNull_is3 = 1 AND ""is3"" IS NULL) O"& _ 
                "R (""is3"" = :Original_is3)) AND ((:IsNull_izv = 1 AND ""izv"" IS NULL) OR (""izv"" = "& _ 
                ":Original_izv)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_id_z3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_L_ab"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_L_ab"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_pb"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_m3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "m3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_m3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ps3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ps3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ps3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_L_bc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "L_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_L_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_bc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_m4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "m4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_m4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ps4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ps4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ps4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_is2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "is2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_is2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "is2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_is3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "is3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_is3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "is3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_izv"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "izv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_izv"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "izv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""z3_izv"" (""id"", ""id_z3"", ""L_ab"", ""pb"", ""m3"", ""ps3"", ""L_bc"", ""v"& _ 
                "l_bc"", ""m4"", ""ps4"", ""is2"", ""is3"", ""izv"") VALUES (:id, :id_z3, :L_ab, :pb, :m3, :"& _ 
                "ps3, :L_bc, :vl_bc, :m4, :ps4, :is2, :is3, :izv)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "L_ab"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "pb"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "m3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ps3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "L_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_bc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_bc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "m4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m4"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ps4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps4"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "is2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "is2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "is3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "is3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "izv"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "izv"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""z3_izv"" SET ""id"" = :id, ""id_z3"" = :id_z3, ""L_ab"" = :L_ab, ""pb"" = :"& _ 
                "pb, ""m3"" = :m3, ""ps3"" = :ps3, ""L_bc"" = :L_bc, ""vl_bc"" = :vl_bc, ""m4"" = :m4, ""ps4"& _ 
                """ = :ps4, ""is2"" = :is2, ""is3"" = :is3, ""izv"" = :izv WHERE ((""id"" = :Original_id) "& _ 
                "AND ((:IsNull_id_z3 = 1 AND ""id_z3"" IS NULL) OR (""id_z3"" = :Original_id_z3)) AND"& _ 
                " ((:IsNull_L_ab = 1 AND ""L_ab"" IS NULL) OR (""L_ab"" = :Original_L_ab)) AND ((:IsN"& _ 
                "ull_pb = 1 AND ""pb"" IS NULL) OR (""pb"" = :Original_pb)) AND ((:IsNull_m3 = 1 AND "& _ 
                """m3"" IS NULL) OR (""m3"" = :Original_m3)) AND ((:IsNull_ps3 = 1 AND ""ps3"" IS NULL)"& _ 
                " OR (""ps3"" = :Original_ps3)) AND ((:IsNull_L_bc = 1 AND ""L_bc"" IS NULL) OR (""L_b"& _ 
                "c"" = :Original_L_bc)) AND ((:IsNull_vl_bc = 1 AND ""vl_bc"" IS NULL) OR (""vl_bc"" ="& _ 
                " :Original_vl_bc)) AND ((:IsNull_m4 = 1 AND ""m4"" IS NULL) OR (""m4"" = :Original_m"& _ 
                "4)) AND ((:IsNull_ps4 = 1 AND ""ps4"" IS NULL) OR (""ps4"" = :Original_ps4)) AND ((:"& _ 
                "IsNull_is2 = 1 AND ""is2"" IS NULL) OR (""is2"" = :Original_is2)) AND ((:IsNull_is3 "& _ 
                "= 1 AND ""is3"" IS NULL) OR (""is3"" = :Original_is3)) AND ((:IsNull_izv = 1 AND ""iz"& _ 
                "v"" IS NULL) OR (""izv"" = :Original_izv)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "L_ab"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "pb"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "m3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ps3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "L_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_bc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_bc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "m4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m4"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ps4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps4"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "is2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "is2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "is3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "is3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "izv"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "izv"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_id_z3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_L_ab"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_L_ab"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_pb"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_m3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "m3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_m3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ps3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ps3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ps3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_L_bc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "L_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_L_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_bc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_m4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "m4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_m4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "m4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ps4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ps4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ps4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_is2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "is2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_is2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "is2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_is3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "is3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_is3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "is3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_izv"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "izv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_izv"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "izv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.TMM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, id_z3, L_ab, pb, m3, ps3, L_bc, vl_bc, m4, ps4, is2, is3, izv FROM ""ma"& _ 
                "in"".z3_izv"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.z3_izvDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.z3_izvDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.z3_izvDataTable = New DataSet1.z3_izvDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.z3_izvDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "z3_izv")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_id_z3 As Global.System.Nullable(Of Long), ByVal Original_L_ab As Global.System.Nullable(Of Double), ByVal Original_pb As Global.System.Nullable(Of Double), ByVal Original_m3 As Global.System.Nullable(Of Double), ByVal Original_ps3 As Global.System.Nullable(Of Double), ByVal Original_L_bc As Global.System.Nullable(Of Double), ByVal Original_vl_bc As Global.System.Nullable(Of Double), ByVal Original_m4 As Global.System.Nullable(Of Double), ByVal Original_ps4 As Global.System.Nullable(Of Double), ByVal Original_is2 As Global.System.Nullable(Of Double), ByVal Original_is3 As Global.System.Nullable(Of Double), ByVal Original_izv As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_id_z3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_id_z3.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_L_ab.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_L_ab.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_pb.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_pb.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_m3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_m3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_ps3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ps3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_L_bc.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_L_bc.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_bc.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_vl_bc.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_m4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_m4.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_ps4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ps4.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_is2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_is2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_is3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_is3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_izv.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_izv.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Long, ByVal id_z3 As Global.System.Nullable(Of Long), ByVal L_ab As Global.System.Nullable(Of Double), ByVal pb As Global.System.Nullable(Of Double), ByVal m3 As Global.System.Nullable(Of Double), ByVal ps3 As Global.System.Nullable(Of Double), ByVal L_bc As Global.System.Nullable(Of Double), ByVal vl_bc As Global.System.Nullable(Of Double), ByVal m4 As Global.System.Nullable(Of Double), ByVal ps4 As Global.System.Nullable(Of Double), ByVal is2 As Global.System.Nullable(Of Double), ByVal is3 As Global.System.Nullable(Of Double), ByVal izv As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            If (id_z3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(id_z3.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (L_ab.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(L_ab.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (pb.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(pb.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (m3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(m3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ps3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ps3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (L_bc.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(L_bc.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (vl_bc.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(vl_bc.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (m4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(m4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ps4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ps4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (is2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(is2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (is3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(is3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (izv.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(izv.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id As Long,  _
                    ByVal id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal L_ab As Global.System.Nullable(Of Double),  _
                    ByVal pb As Global.System.Nullable(Of Double),  _
                    ByVal m3 As Global.System.Nullable(Of Double),  _
                    ByVal ps3 As Global.System.Nullable(Of Double),  _
                    ByVal L_bc As Global.System.Nullable(Of Double),  _
                    ByVal vl_bc As Global.System.Nullable(Of Double),  _
                    ByVal m4 As Global.System.Nullable(Of Double),  _
                    ByVal ps4 As Global.System.Nullable(Of Double),  _
                    ByVal is2 As Global.System.Nullable(Of Double),  _
                    ByVal is3 As Global.System.Nullable(Of Double),  _
                    ByVal izv As Global.System.Nullable(Of Double),  _
                    ByVal Original_id As Long,  _
                    ByVal Original_id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal Original_L_ab As Global.System.Nullable(Of Double),  _
                    ByVal Original_pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_m3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ps3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_L_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_m4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ps4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_is2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_is3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_izv As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            If (id_z3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(id_z3.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (L_ab.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(L_ab.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (pb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(pb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (m3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(m3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ps3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ps3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (L_bc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(L_bc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (vl_bc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(vl_bc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (m4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(m4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ps4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ps4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (is2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(is2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (is3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(is3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (izv.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(izv.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_id,Long)
            If (Original_id_z3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_id_z3.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_L_ab.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_L_ab.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_pb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_pb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_m3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_m3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_ps3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_ps3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_L_bc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_L_bc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_bc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_vl_bc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_m4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_m4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_ps4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_ps4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_is2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_is2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_is3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_is3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_izv.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_izv.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal L_ab As Global.System.Nullable(Of Double),  _
                    ByVal pb As Global.System.Nullable(Of Double),  _
                    ByVal m3 As Global.System.Nullable(Of Double),  _
                    ByVal ps3 As Global.System.Nullable(Of Double),  _
                    ByVal L_bc As Global.System.Nullable(Of Double),  _
                    ByVal vl_bc As Global.System.Nullable(Of Double),  _
                    ByVal m4 As Global.System.Nullable(Of Double),  _
                    ByVal ps4 As Global.System.Nullable(Of Double),  _
                    ByVal is2 As Global.System.Nullable(Of Double),  _
                    ByVal is3 As Global.System.Nullable(Of Double),  _
                    ByVal izv As Global.System.Nullable(Of Double),  _
                    ByVal Original_id As Long,  _
                    ByVal Original_id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal Original_L_ab As Global.System.Nullable(Of Double),  _
                    ByVal Original_pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_m3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ps3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_L_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_m4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ps4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_is2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_is3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_izv As Global.System.Nullable(Of Double)) As Integer
            Return Me.Update(Original_id, id_z3, L_ab, pb, m3, ps3, L_bc, vl_bc, m4, ps4, is2, is3, izv, Original_id, Original_id_z3, Original_L_ab, Original_pb, Original_m3, Original_ps3, Original_L_bc, Original_vl_bc, Original_m4, Original_ps4, Original_is2, Original_is3, Original_izv)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class z3_mehanizmTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "z3_mehanizm"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("id_z3", "id_z3")
            tableMapping.ColumnMappings.Add("numberPosition", "numberPosition")
            tableMapping.ColumnMappings.Add("ml_AB", "ml_AB")
            tableMapping.ColumnMappings.Add("mashtab_ml", "mashtab_ml")
            tableMapping.ColumnMappings.Add("mashtab_ml_view", "mashtab_ml_view")
            tableMapping.ColumnMappings.Add("ml_BC", "ml_BC")
            tableMapping.ColumnMappings.Add("ml_BD", "ml_BD")
            tableMapping.ColumnMappings.Add("ml_CD", "ml_CD")
            tableMapping.ColumnMappings.Add("ml_a", "ml_a")
            tableMapping.ColumnMappings.Add("mp_A", "mp_A")
            tableMapping.ColumnMappings.Add("angle_AB", "angle_AB")
            tableMapping.ColumnMappings.Add("mp_B", "mp_B")
            tableMapping.ColumnMappings.Add("angle_BC", "angle_BC")
            tableMapping.ColumnMappings.Add("mp_C", "mp_C")
            tableMapping.ColumnMappings.Add("mp_D", "mp_D")
            tableMapping.ColumnMappings.Add("mp_S2", "mp_S2")
            tableMapping.ColumnMappings.Add("mp_S3", "mp_S3")
            tableMapping.ColumnMappings.Add("mp_S4", "mp_S4")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""z3_mehanizm"" WHERE ((""id"" = :Original_id) AND ((:IsNull_id_z3"& _ 
                " = 1 AND ""id_z3"" IS NULL) OR (""id_z3"" = :Original_id_z3)) AND ((:IsNull_numberPo"& _ 
                "sition = 1 AND ""numberPosition"" IS NULL) OR (""numberPosition"" = :Original_number"& _ 
                "Position)) AND ((:IsNull_ml_AB = 1 AND ""ml_AB"" IS NULL) OR (""ml_AB"" = :Original_"& _ 
                "ml_AB)) AND ((:IsNull_mashtab_ml = 1 AND ""mashtab_ml"" IS NULL) OR (""mashtab_ml"" "& _ 
                "= :Original_mashtab_ml)) AND ((:IsNull_mashtab_ml_view = 1 AND ""mashtab_ml_view"""& _ 
                " IS NULL) OR (""mashtab_ml_view"" = :Original_mashtab_ml_view)) AND ((:IsNull_ml_B"& _ 
                "C = 1 AND ""ml_BC"" IS NULL) OR (""ml_BC"" = :Original_ml_BC)) AND ((:IsNull_ml_BD ="& _ 
                " 1 AND ""ml_BD"" IS NULL) OR (""ml_BD"" = :Original_ml_BD)) AND ((:IsNull_ml_CD = 1 "& _ 
                "AND ""ml_CD"" IS NULL) OR (""ml_CD"" = :Original_ml_CD)) AND ((:IsNull_ml_a = 1 AND "& _ 
                """ml_a"" IS NULL) OR (""ml_a"" = :Original_ml_a)) AND ((:IsNull_mp_A = 1 AND ""mp_A"" "& _ 
                "IS NULL) OR (""mp_A"" = :Original_mp_A)) AND ((:IsNull_angle_AB = 1 AND ""angle_AB"""& _ 
                " IS NULL) OR (""angle_AB"" = :Original_angle_AB)) AND ((:IsNull_mp_B = 1 AND ""mp_B"& _ 
                """ IS NULL) OR (""mp_B"" = :Original_mp_B)) AND ((:IsNull_angle_BC = 1 AND ""angle_B"& _ 
                "C"" IS NULL) OR (""angle_BC"" = :Original_angle_BC)) AND ((:IsNull_mp_C = 1 AND ""mp"& _ 
                "_C"" IS NULL) OR (""mp_C"" = :Original_mp_C)) AND ((:IsNull_mp_D = 1 AND ""mp_D"" IS "& _ 
                "NULL) OR (""mp_D"" = :Original_mp_D)) AND ((:IsNull_mp_S2 = 1 AND ""mp_S2"" IS NULL)"& _ 
                " OR (""mp_S2"" = :Original_mp_S2)) AND ((:IsNull_mp_S3 = 1 AND ""mp_S3"" IS NULL) OR"& _ 
                " (""mp_S3"" = :Original_mp_S3)) AND ((:IsNull_mp_S4 = 1 AND ""mp_S4"" IS NULL) OR ("""& _ 
                "mp_S4"" = :Original_mp_S4)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_id_z3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_numberPosition"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_numberPosition"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ml_AB"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ml_AB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ml_AB"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_AB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mashtab_ml"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mashtab_ml"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mashtab_ml"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_ml"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mashtab_ml_view"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mashtab_ml_view"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mashtab_ml_view"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_ml_view"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ml_BC"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ml_BC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ml_BC"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_BC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ml_BD"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ml_BD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ml_BD"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_BD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ml_CD"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ml_CD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ml_CD"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_CD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ml_a"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ml_a"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ml_a"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_a"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mp_A"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mp_A"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mp_A"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_A"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angle_AB"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angle_AB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angle_AB"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_AB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mp_B"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mp_B"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mp_B"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_B"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angle_BC"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angle_BC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angle_BC"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_BC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mp_C"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mp_C"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mp_C"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_C"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mp_D"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mp_D"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mp_D"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_D"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mp_S2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mp_S2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mp_S2"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_S2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mp_S3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mp_S3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mp_S3"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_S3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mp_S4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mp_S4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mp_S4"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_S4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""z3_mehanizm"" (""id"", ""id_z3"", ""numberPosition"", ""ml_AB"", ""mash"& _ 
                "tab_ml"", ""mashtab_ml_view"", ""ml_BC"", ""ml_BD"", ""ml_CD"", ""ml_a"", ""mp_A"", ""angle_AB"& _ 
                """, ""mp_B"", ""angle_BC"", ""mp_C"", ""mp_D"", ""mp_S2"", ""mp_S3"", ""mp_S4"") VALUES (:id, :"& _ 
                "id_z3, :numberPosition, :ml_AB, :mashtab_ml, :mashtab_ml_view, :ml_BC, :ml_BD, :"& _ 
                "ml_CD, :ml_a, :mp_A, :angle_AB, :mp_B, :angle_BC, :mp_C, :mp_D, :mp_S2, :mp_S3, "& _ 
                ":mp_S4)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "numberPosition"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ml_AB"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_AB"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mashtab_ml"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_ml"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mashtab_ml_view"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_ml_view"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ml_BC"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_BC"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ml_BD"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_BD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ml_CD"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_CD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ml_a"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_a"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mp_A"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_A"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angle_AB"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_AB"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mp_B"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_B"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angle_BC"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_BC"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mp_C"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_C"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mp_D"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_D"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mp_S2"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_S2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mp_S3"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_S3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mp_S4"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_S4"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""z3_mehanizm"" SET ""id"" = :id, ""id_z3"" = :id_z3, ""numberPosition"" = "& _ 
                ":numberPosition, ""ml_AB"" = :ml_AB, ""mashtab_ml"" = :mashtab_ml, ""mashtab_ml_view"""& _ 
                " = :mashtab_ml_view, ""ml_BC"" = :ml_BC, ""ml_BD"" = :ml_BD, ""ml_CD"" = :ml_CD, ""ml_a"& _ 
                """ = :ml_a, ""mp_A"" = :mp_A, ""angle_AB"" = :angle_AB, ""mp_B"" = :mp_B, ""angle_BC"" = "& _ 
                ":angle_BC, ""mp_C"" = :mp_C, ""mp_D"" = :mp_D, ""mp_S2"" = :mp_S2, ""mp_S3"" = :mp_S3, """& _ 
                "mp_S4"" = :mp_S4 WHERE ((""id"" = :Original_id) AND ((:IsNull_id_z3 = 1 AND ""id_z3"""& _ 
                " IS NULL) OR (""id_z3"" = :Original_id_z3)) AND ((:IsNull_numberPosition = 1 AND """& _ 
                "numberPosition"" IS NULL) OR (""numberPosition"" = :Original_numberPosition)) AND ("& _ 
                "(:IsNull_ml_AB = 1 AND ""ml_AB"" IS NULL) OR (""ml_AB"" = :Original_ml_AB)) AND ((:I"& _ 
                "sNull_mashtab_ml = 1 AND ""mashtab_ml"" IS NULL) OR (""mashtab_ml"" = :Original_mash"& _ 
                "tab_ml)) AND ((:IsNull_mashtab_ml_view = 1 AND ""mashtab_ml_view"" IS NULL) OR (""m"& _ 
                "ashtab_ml_view"" = :Original_mashtab_ml_view)) AND ((:IsNull_ml_BC = 1 AND ""ml_BC"& _ 
                """ IS NULL) OR (""ml_BC"" = :Original_ml_BC)) AND ((:IsNull_ml_BD = 1 AND ""ml_BD"" I"& _ 
                "S NULL) OR (""ml_BD"" = :Original_ml_BD)) AND ((:IsNull_ml_CD = 1 AND ""ml_CD"" IS N"& _ 
                "ULL) OR (""ml_CD"" = :Original_ml_CD)) AND ((:IsNull_ml_a = 1 AND ""ml_a"" IS NULL) "& _ 
                "OR (""ml_a"" = :Original_ml_a)) AND ((:IsNull_mp_A = 1 AND ""mp_A"" IS NULL) OR (""mp"& _ 
                "_A"" = :Original_mp_A)) AND ((:IsNull_angle_AB = 1 AND ""angle_AB"" IS NULL) OR (""a"& _ 
                "ngle_AB"" = :Original_angle_AB)) AND ((:IsNull_mp_B = 1 AND ""mp_B"" IS NULL) OR ("""& _ 
                "mp_B"" = :Original_mp_B)) AND ((:IsNull_angle_BC = 1 AND ""angle_BC"" IS NULL) OR ("& _ 
                """angle_BC"" = :Original_angle_BC)) AND ((:IsNull_mp_C = 1 AND ""mp_C"" IS NULL) OR "& _ 
                "(""mp_C"" = :Original_mp_C)) AND ((:IsNull_mp_D = 1 AND ""mp_D"" IS NULL) OR (""mp_D"""& _ 
                " = :Original_mp_D)) AND ((:IsNull_mp_S2 = 1 AND ""mp_S2"" IS NULL) OR (""mp_S2"" = :"& _ 
                "Original_mp_S2)) AND ((:IsNull_mp_S3 = 1 AND ""mp_S3"" IS NULL) OR (""mp_S3"" = :Ori"& _ 
                "ginal_mp_S3)) AND ((:IsNull_mp_S4 = 1 AND ""mp_S4"" IS NULL) OR (""mp_S4"" = :Origin"& _ 
                "al_mp_S4)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "numberPosition"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ml_AB"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_AB"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mashtab_ml"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_ml"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mashtab_ml_view"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_ml_view"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ml_BC"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_BC"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ml_BD"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_BD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ml_CD"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_CD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ml_a"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_a"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mp_A"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_A"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angle_AB"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_AB"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mp_B"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_B"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angle_BC"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_BC"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mp_C"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_C"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mp_D"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_D"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mp_S2"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_S2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mp_S3"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_S3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mp_S4"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_S4"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_id_z3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_numberPosition"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_numberPosition"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ml_AB"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ml_AB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ml_AB"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_AB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mashtab_ml"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mashtab_ml"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mashtab_ml"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_ml"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mashtab_ml_view"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mashtab_ml_view"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mashtab_ml_view"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_ml_view"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ml_BC"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ml_BC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ml_BC"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_BC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ml_BD"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ml_BD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ml_BD"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_BD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ml_CD"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ml_CD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ml_CD"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_CD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ml_a"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ml_a"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ml_a"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_a"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mp_A"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mp_A"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mp_A"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_A"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angle_AB"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angle_AB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angle_AB"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_AB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mp_B"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mp_B"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mp_B"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_B"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angle_BC"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angle_BC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angle_BC"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_BC"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mp_C"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mp_C"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mp_C"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_C"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mp_D"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mp_D"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mp_D"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_D"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mp_S2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mp_S2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mp_S2"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_S2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mp_S3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mp_S3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mp_S3"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_S3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mp_S4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mp_S4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mp_S4"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "mp_S4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.TMM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, id_z3, numberPosition, ml_AB, mashtab_ml, mashtab_ml_view, ml_BC, ml_B"& _ 
                "D, ml_CD, ml_a, mp_A, angle_AB, mp_B, angle_BC, mp_C, mp_D, mp_S2, mp_S3, mp_S4 "& _ 
                "FROM ""main"".z3_mehanizm"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.z3_mehanizmDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.z3_mehanizmDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.z3_mehanizmDataTable = New DataSet1.z3_mehanizmDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.z3_mehanizmDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "z3_mehanizm")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_id As Long,  _
                    ByVal Original_id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal Original_numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal Original_ml_AB As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_ml As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_ml_view As Global.System.Nullable(Of Double),  _
                    ByVal Original_ml_BC As Global.System.Nullable(Of Double),  _
                    ByVal Original_ml_BD As Global.System.Nullable(Of Double),  _
                    ByVal Original_ml_CD As Global.System.Nullable(Of Double),  _
                    ByVal Original_ml_a As Global.System.Nullable(Of Double),  _
                    ByVal Original_mp_A As String,  _
                    ByVal Original_angle_AB As Global.System.Nullable(Of Double),  _
                    ByVal Original_mp_B As String,  _
                    ByVal Original_angle_BC As Global.System.Nullable(Of Double),  _
                    ByVal Original_mp_C As String,  _
                    ByVal Original_mp_D As String,  _
                    ByVal Original_mp_S2 As String,  _
                    ByVal Original_mp_S3 As String,  _
                    ByVal Original_mp_S4 As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_id_z3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_id_z3.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_numberPosition.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_numberPosition.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ml_AB.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ml_AB.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_mashtab_ml.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_mashtab_ml.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_mashtab_ml_view.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_mashtab_ml_view.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_ml_BC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_ml_BC.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_ml_BD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ml_BD.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_ml_CD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_ml_CD.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_ml_a.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ml_a.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_mp_A Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_mp_A,String)
            End If
            If (Original_angle_AB.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_angle_AB.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_mp_B Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_mp_B,String)
            End If
            If (Original_angle_BC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_angle_BC.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_mp_C Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_mp_C,String)
            End If
            If (Original_mp_D Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_mp_D,String)
            End If
            If (Original_mp_S2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_mp_S2,String)
            End If
            If (Original_mp_S3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_mp_S3,String)
            End If
            If (Original_mp_S4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_mp_S4,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal id As Long,  _
                    ByVal id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal ml_AB As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_ml As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_ml_view As Global.System.Nullable(Of Double),  _
                    ByVal ml_BC As Global.System.Nullable(Of Double),  _
                    ByVal ml_BD As Global.System.Nullable(Of Double),  _
                    ByVal ml_CD As Global.System.Nullable(Of Double),  _
                    ByVal ml_a As Global.System.Nullable(Of Double),  _
                    ByVal mp_A As String,  _
                    ByVal angle_AB As Global.System.Nullable(Of Double),  _
                    ByVal mp_B As String,  _
                    ByVal angle_BC As Global.System.Nullable(Of Double),  _
                    ByVal mp_C As String,  _
                    ByVal mp_D As String,  _
                    ByVal mp_S2 As String,  _
                    ByVal mp_S3 As String,  _
                    ByVal mp_S4 As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            If (id_z3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(id_z3.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (numberPosition.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(numberPosition.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ml_AB.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ml_AB.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (mashtab_ml.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(mashtab_ml.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (mashtab_ml_view.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(mashtab_ml_view.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ml_BC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ml_BC.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ml_BD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ml_BD.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ml_CD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ml_CD.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ml_a.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ml_a.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (mp_A Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(mp_A,String)
            End If
            If (angle_AB.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(angle_AB.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (mp_B Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(mp_B,String)
            End If
            If (angle_BC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(angle_BC.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (mp_C Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(mp_C,String)
            End If
            If (mp_D Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(mp_D,String)
            End If
            If (mp_S2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(mp_S2,String)
            End If
            If (mp_S3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(mp_S3,String)
            End If
            If (mp_S4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(mp_S4,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id As Long,  _
                    ByVal id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal ml_AB As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_ml As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_ml_view As Global.System.Nullable(Of Double),  _
                    ByVal ml_BC As Global.System.Nullable(Of Double),  _
                    ByVal ml_BD As Global.System.Nullable(Of Double),  _
                    ByVal ml_CD As Global.System.Nullable(Of Double),  _
                    ByVal ml_a As Global.System.Nullable(Of Double),  _
                    ByVal mp_A As String,  _
                    ByVal angle_AB As Global.System.Nullable(Of Double),  _
                    ByVal mp_B As String,  _
                    ByVal angle_BC As Global.System.Nullable(Of Double),  _
                    ByVal mp_C As String,  _
                    ByVal mp_D As String,  _
                    ByVal mp_S2 As String,  _
                    ByVal mp_S3 As String,  _
                    ByVal mp_S4 As String,  _
                    ByVal Original_id As Long,  _
                    ByVal Original_id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal Original_numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal Original_ml_AB As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_ml As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_ml_view As Global.System.Nullable(Of Double),  _
                    ByVal Original_ml_BC As Global.System.Nullable(Of Double),  _
                    ByVal Original_ml_BD As Global.System.Nullable(Of Double),  _
                    ByVal Original_ml_CD As Global.System.Nullable(Of Double),  _
                    ByVal Original_ml_a As Global.System.Nullable(Of Double),  _
                    ByVal Original_mp_A As String,  _
                    ByVal Original_angle_AB As Global.System.Nullable(Of Double),  _
                    ByVal Original_mp_B As String,  _
                    ByVal Original_angle_BC As Global.System.Nullable(Of Double),  _
                    ByVal Original_mp_C As String,  _
                    ByVal Original_mp_D As String,  _
                    ByVal Original_mp_S2 As String,  _
                    ByVal Original_mp_S3 As String,  _
                    ByVal Original_mp_S4 As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            If (id_z3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(id_z3.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (numberPosition.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(numberPosition.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ml_AB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ml_AB.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (mashtab_ml.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(mashtab_ml.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (mashtab_ml_view.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(mashtab_ml_view.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ml_BC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ml_BC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ml_BD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ml_BD.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ml_CD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ml_CD.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ml_a.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ml_a.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (mp_A Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(mp_A,String)
            End If
            If (angle_AB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(angle_AB.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (mp_B Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(mp_B,String)
            End If
            If (angle_BC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(angle_BC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (mp_C Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(mp_C,String)
            End If
            If (mp_D Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(mp_D,String)
            End If
            If (mp_S2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(mp_S2,String)
            End If
            If (mp_S3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(mp_S3,String)
            End If
            If (mp_S4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(mp_S4,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_id,Long)
            If (Original_id_z3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_id_z3.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_numberPosition.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_numberPosition.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_ml_AB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_ml_AB.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_mashtab_ml.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_mashtab_ml.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_mashtab_ml_view.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_mashtab_ml_view.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_ml_BC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_ml_BC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_ml_BD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_ml_BD.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_ml_CD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_ml_CD.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_ml_a.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_ml_a.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_mp_A Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_mp_A,String)
            End If
            If (Original_angle_AB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_angle_AB.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_mp_B Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_mp_B,String)
            End If
            If (Original_angle_BC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_angle_BC.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original_mp_C Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_mp_C,String)
            End If
            If (Original_mp_D Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_mp_D,String)
            End If
            If (Original_mp_S2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_mp_S2,String)
            End If
            If (Original_mp_S3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_mp_S3,String)
            End If
            If (Original_mp_S4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_mp_S4,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal ml_AB As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_ml As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_ml_view As Global.System.Nullable(Of Double),  _
                    ByVal ml_BC As Global.System.Nullable(Of Double),  _
                    ByVal ml_BD As Global.System.Nullable(Of Double),  _
                    ByVal ml_CD As Global.System.Nullable(Of Double),  _
                    ByVal ml_a As Global.System.Nullable(Of Double),  _
                    ByVal mp_A As String,  _
                    ByVal angle_AB As Global.System.Nullable(Of Double),  _
                    ByVal mp_B As String,  _
                    ByVal angle_BC As Global.System.Nullable(Of Double),  _
                    ByVal mp_C As String,  _
                    ByVal mp_D As String,  _
                    ByVal mp_S2 As String,  _
                    ByVal mp_S3 As String,  _
                    ByVal mp_S4 As String,  _
                    ByVal Original_id As Long,  _
                    ByVal Original_id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal Original_numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal Original_ml_AB As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_ml As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_ml_view As Global.System.Nullable(Of Double),  _
                    ByVal Original_ml_BC As Global.System.Nullable(Of Double),  _
                    ByVal Original_ml_BD As Global.System.Nullable(Of Double),  _
                    ByVal Original_ml_CD As Global.System.Nullable(Of Double),  _
                    ByVal Original_ml_a As Global.System.Nullable(Of Double),  _
                    ByVal Original_mp_A As String,  _
                    ByVal Original_angle_AB As Global.System.Nullable(Of Double),  _
                    ByVal Original_mp_B As String,  _
                    ByVal Original_angle_BC As Global.System.Nullable(Of Double),  _
                    ByVal Original_mp_C As String,  _
                    ByVal Original_mp_D As String,  _
                    ByVal Original_mp_S2 As String,  _
                    ByVal Original_mp_S3 As String,  _
                    ByVal Original_mp_S4 As String) As Integer
            Return Me.Update(Original_id, id_z3, numberPosition, ml_AB, mashtab_ml, mashtab_ml_view, ml_BC, ml_BD, ml_CD, ml_a, mp_A, angle_AB, mp_B, angle_BC, mp_C, mp_D, mp_S2, mp_S3, mp_S4, Original_id, Original_id_z3, Original_numberPosition, Original_ml_AB, Original_mashtab_ml, Original_mashtab_ml_view, Original_ml_BC, Original_ml_BD, Original_ml_CD, Original_ml_a, Original_mp_A, Original_angle_AB, Original_mp_B, Original_angle_BC, Original_mp_C, Original_mp_D, Original_mp_S2, Original_mp_S3, Original_mp_S4)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class z3_mzvTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "z3_mzv"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("id_z3", "id_z3")
            tableMapping.ColumnMappings.Add("L_ab", "L_ab")
            tableMapping.ColumnMappings.Add("vl_pb", "vl_pb")
            tableMapping.ColumnMappings.Add("G2", "G2")
            tableMapping.ColumnMappings.Add("ps2", "ps2")
            tableMapping.ColumnMappings.Add("G3", "G3")
            tableMapping.ColumnMappings.Add("ps3", "ps3")
            tableMapping.ColumnMappings.Add("Fc", "Fc")
            tableMapping.ColumnMappings.Add("ps4", "ps4")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""z3_mzv"" WHERE ((""id"" = :Original_id) AND ((:IsNull_id_z3 = 1 "& _ 
                "AND ""id_z3"" IS NULL) OR (""id_z3"" = :Original_id_z3)) AND ((:IsNull_L_ab = 1 AND "& _ 
                """L_ab"" IS NULL) OR (""L_ab"" = :Original_L_ab)) AND ((:IsNull_vl_pb = 1 AND ""vl_pb"& _ 
                """ IS NULL) OR (""vl_pb"" = :Original_vl_pb)) AND ((:IsNull_G2 = 1 AND ""G2"" IS NULL"& _ 
                ") OR (""G2"" = :Original_G2)) AND ((:IsNull_ps2 = 1 AND ""ps2"" IS NULL) OR (""ps2"" ="& _ 
                " :Original_ps2)) AND ((:IsNull_G3 = 1 AND ""G3"" IS NULL) OR (""G3"" = :Original_G3)"& _ 
                ") AND ((:IsNull_ps3 = 1 AND ""ps3"" IS NULL) OR (""ps3"" = :Original_ps3)) AND ((:Is"& _ 
                "Null_Fc = 1 AND ""Fc"" IS NULL) OR (""Fc"" = :Original_Fc)) AND ((:IsNull_ps4 = 1 AN"& _ 
                "D ""ps4"" IS NULL) OR (""ps4"" = :Original_ps4)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_id_z3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_L_ab"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_L_ab"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_pb"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_G2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "G2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_G2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "G2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ps2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ps2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ps2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_G3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "G3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_G3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "G3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ps3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ps3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ps3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Fc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Fc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Fc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Fc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ps4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ps4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ps4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""z3_mzv"" (""id"", ""id_z3"", ""L_ab"", ""vl_pb"", ""G2"", ""ps2"", ""G3"", """& _ 
                "ps3"", ""Fc"", ""ps4"") VALUES (:id, :id_z3, :L_ab, :vl_pb, :G2, :ps2, :G3, :ps3, :Fc"& _ 
                ", :ps4)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "L_ab"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "G2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "G2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ps2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "G3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "G3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ps3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Fc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Fc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ps4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps4"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""z3_mzv"" SET ""id"" = :id, ""id_z3"" = :id_z3, ""L_ab"" = :L_ab, ""vl_pb"" "& _ 
                "= :vl_pb, ""G2"" = :G2, ""ps2"" = :ps2, ""G3"" = :G3, ""ps3"" = :ps3, ""Fc"" = :Fc, ""ps4"" "& _ 
                "= :ps4 WHERE ((""id"" = :Original_id) AND ((:IsNull_id_z3 = 1 AND ""id_z3"" IS NULL)"& _ 
                " OR (""id_z3"" = :Original_id_z3)) AND ((:IsNull_L_ab = 1 AND ""L_ab"" IS NULL) OR ("& _ 
                """L_ab"" = :Original_L_ab)) AND ((:IsNull_vl_pb = 1 AND ""vl_pb"" IS NULL) OR (""vl_p"& _ 
                "b"" = :Original_vl_pb)) AND ((:IsNull_G2 = 1 AND ""G2"" IS NULL) OR (""G2"" = :Origin"& _ 
                "al_G2)) AND ((:IsNull_ps2 = 1 AND ""ps2"" IS NULL) OR (""ps2"" = :Original_ps2)) AND"& _ 
                " ((:IsNull_G3 = 1 AND ""G3"" IS NULL) OR (""G3"" = :Original_G3)) AND ((:IsNull_ps3 "& _ 
                "= 1 AND ""ps3"" IS NULL) OR (""ps3"" = :Original_ps3)) AND ((:IsNull_Fc = 1 AND ""Fc"""& _ 
                " IS NULL) OR (""Fc"" = :Original_Fc)) AND ((:IsNull_ps4 = 1 AND ""ps4"" IS NULL) OR "& _ 
                "(""ps4"" = :Original_ps4)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "L_ab"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "G2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "G2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ps2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "G3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "G3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ps3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Fc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Fc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ps4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps4"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_id_z3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_L_ab"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_L_ab"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "L_ab"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_pb"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_G2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "G2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_G2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "G2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ps2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ps2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ps2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_G3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "G3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_G3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "G3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ps3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ps3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ps3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_Fc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "Fc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_Fc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "Fc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ps4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ps4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ps4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ps4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.TMM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, id_z3, L_ab, vl_pb, G2, ps2, G3, ps3, Fc, ps4 FROM ""main"".z3_mzv"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.z3_mzvDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.z3_mzvDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.z3_mzvDataTable = New DataSet1.z3_mzvDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.z3_mzvDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "z3_mzv")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_id_z3 As Global.System.Nullable(Of Long), ByVal Original_L_ab As Global.System.Nullable(Of Double), ByVal Original_vl_pb As Global.System.Nullable(Of Double), ByVal Original_G2 As Global.System.Nullable(Of Double), ByVal Original_ps2 As Global.System.Nullable(Of Double), ByVal Original_G3 As Global.System.Nullable(Of Double), ByVal Original_ps3 As Global.System.Nullable(Of Double), ByVal Original_Fc As Global.System.Nullable(Of Double), ByVal Original_ps4 As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_id_z3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_id_z3.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_L_ab.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_L_ab.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_pb.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_vl_pb.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_G2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_G2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_ps2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ps2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_G3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_G3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_ps3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ps3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Fc.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Fc.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_ps4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ps4.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Long, ByVal id_z3 As Global.System.Nullable(Of Long), ByVal L_ab As Global.System.Nullable(Of Double), ByVal vl_pb As Global.System.Nullable(Of Double), ByVal G2 As Global.System.Nullable(Of Double), ByVal ps2 As Global.System.Nullable(Of Double), ByVal G3 As Global.System.Nullable(Of Double), ByVal ps3 As Global.System.Nullable(Of Double), ByVal Fc As Global.System.Nullable(Of Double), ByVal ps4 As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            If (id_z3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(id_z3.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (L_ab.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(L_ab.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (vl_pb.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(vl_pb.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (G2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(G2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ps2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ps2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (G3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(G3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ps3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ps3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Fc.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Fc.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ps4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ps4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id As Long,  _
                    ByVal id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal L_ab As Global.System.Nullable(Of Double),  _
                    ByVal vl_pb As Global.System.Nullable(Of Double),  _
                    ByVal G2 As Global.System.Nullable(Of Double),  _
                    ByVal ps2 As Global.System.Nullable(Of Double),  _
                    ByVal G3 As Global.System.Nullable(Of Double),  _
                    ByVal ps3 As Global.System.Nullable(Of Double),  _
                    ByVal Fc As Global.System.Nullable(Of Double),  _
                    ByVal ps4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_id As Long,  _
                    ByVal Original_id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal Original_L_ab As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_G2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ps2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_G3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ps3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_Fc As Global.System.Nullable(Of Double),  _
                    ByVal Original_ps4 As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            If (id_z3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(id_z3.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (L_ab.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(L_ab.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (vl_pb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(vl_pb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (G2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(G2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ps2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ps2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (G3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(G3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ps3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ps3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Fc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Fc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ps4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ps4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_id,Long)
            If (Original_id_z3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_id_z3.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_L_ab.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_L_ab.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_pb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_vl_pb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_G2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_G2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_ps2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ps2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_G3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_G3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_ps3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_ps3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_Fc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Fc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_ps4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_ps4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal L_ab As Global.System.Nullable(Of Double),  _
                    ByVal vl_pb As Global.System.Nullable(Of Double),  _
                    ByVal G2 As Global.System.Nullable(Of Double),  _
                    ByVal ps2 As Global.System.Nullable(Of Double),  _
                    ByVal G3 As Global.System.Nullable(Of Double),  _
                    ByVal ps3 As Global.System.Nullable(Of Double),  _
                    ByVal Fc As Global.System.Nullable(Of Double),  _
                    ByVal ps4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_id As Long,  _
                    ByVal Original_id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal Original_L_ab As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_G2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ps2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_G3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_ps3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_Fc As Global.System.Nullable(Of Double),  _
                    ByVal Original_ps4 As Global.System.Nullable(Of Double)) As Integer
            Return Me.Update(Original_id, id_z3, L_ab, vl_pb, G2, ps2, G3, ps3, Fc, ps4, Original_id, Original_id_z3, Original_L_ab, Original_vl_pb, Original_G2, Original_ps2, Original_G3, Original_ps3, Original_Fc, Original_ps4)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class z3_speedTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "z3_speed"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("id_z3", "id_z3")
            tableMapping.ColumnMappings.Add("numberPosition", "numberPosition")
            tableMapping.ColumnMappings.Add("vl_pb", "vl_pb")
            tableMapping.ColumnMappings.Add("v_b", "v_b")
            tableMapping.ColumnMappings.Add("mashtab_mv", "mashtab_mv")
            tableMapping.ColumnMappings.Add("mashtab_mv_view", "mashtab_mv_view")
            tableMapping.ColumnMappings.Add("vp_P", "vp_P")
            tableMapping.ColumnMappings.Add("angle_Pb", "angle_Pb")
            tableMapping.ColumnMappings.Add("vp_b", "vp_b")
            tableMapping.ColumnMappings.Add("angle_bc", "angle_bc")
            tableMapping.ColumnMappings.Add("angle_px", "angle_px")
            tableMapping.ColumnMappings.Add("vp_c", "vp_c")
            tableMapping.ColumnMappings.Add("v_c", "v_c")
            tableMapping.ColumnMappings.Add("vl_c", "vl_c")
            tableMapping.ColumnMappings.Add("v_bc", "v_bc")
            tableMapping.ColumnMappings.Add("vl_bc", "vl_bc")
            tableMapping.ColumnMappings.Add("v_cd", "v_cd")
            tableMapping.ColumnMappings.Add("vl_cd", "vl_cd")
            tableMapping.ColumnMappings.Add("angle_cd", "angle_cd")
            tableMapping.ColumnMappings.Add("vp_d", "vp_d")
            tableMapping.ColumnMappings.Add("v_d", "v_d")
            tableMapping.ColumnMappings.Add("vl_d", "vl_d")
            tableMapping.ColumnMappings.Add("vp_s2", "vp_s2")
            tableMapping.ColumnMappings.Add("v_ps2", "v_ps2")
            tableMapping.ColumnMappings.Add("vl_ps2", "vl_ps2")
            tableMapping.ColumnMappings.Add("vp_s3", "vp_s3")
            tableMapping.ColumnMappings.Add("v_ps3", "v_ps3")
            tableMapping.ColumnMappings.Add("vl_ps3", "vl_ps3")
            tableMapping.ColumnMappings.Add("vp_s4", "vp_s4")
            tableMapping.ColumnMappings.Add("v_ps4", "v_ps4")
            tableMapping.ColumnMappings.Add("vl_ps4", "vl_ps4")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""z3_speed"" WHERE ((""id"" = :Original_id) AND ((:IsNull_id_z3 = "& _ 
                "1 AND ""id_z3"" IS NULL) OR (""id_z3"" = :Original_id_z3)) AND ((:IsNull_numberPosit"& _ 
                "ion = 1 AND ""numberPosition"" IS NULL) OR (""numberPosition"" = :Original_numberPos"& _ 
                "ition)) AND ((:IsNull_vl_pb = 1 AND ""vl_pb"" IS NULL) OR (""vl_pb"" = :Original_vl_"& _ 
                "pb)) AND ((:IsNull_v_b = 1 AND ""v_b"" IS NULL) OR (""v_b"" = :Original_v_b)) AND (("& _ 
                ":IsNull_mashtab_mv = 1 AND ""mashtab_mv"" IS NULL) OR (""mashtab_mv"" = :Original_ma"& _ 
                "shtab_mv)) AND ((:IsNull_mashtab_mv_view = 1 AND ""mashtab_mv_view"" IS NULL) OR ("& _ 
                """mashtab_mv_view"" = :Original_mashtab_mv_view)) AND ((:IsNull_vp_P = 1 AND ""vp_P"& _ 
                """ IS NULL) OR (""vp_P"" = :Original_vp_P)) AND ((:IsNull_angle_Pb = 1 AND ""angle_P"& _ 
                "b"" IS NULL) OR (""angle_Pb"" = :Original_angle_Pb)) AND ((:IsNull_vp_b = 1 AND ""vp"& _ 
                "_b"" IS NULL) OR (""vp_b"" = :Original_vp_b)) AND ((:IsNull_angle_bc = 1 AND ""angle"& _ 
                "_bc"" IS NULL) OR (""angle_bc"" = :Original_angle_bc)) AND ((:IsNull_angle_px = 1 A"& _ 
                "ND ""angle_px"" IS NULL) OR (""angle_px"" = :Original_angle_px)) AND ((:IsNull_vp_c "& _ 
                "= 1 AND ""vp_c"" IS NULL) OR (""vp_c"" = :Original_vp_c)) AND ((:IsNull_v_c = 1 AND "& _ 
                """v_c"" IS NULL) OR (""v_c"" = :Original_v_c)) AND ((:IsNull_vl_c = 1 AND ""vl_c"" IS "& _ 
                "NULL) OR (""vl_c"" = :Original_vl_c)) AND ((:IsNull_v_bc = 1 AND ""v_bc"" IS NULL) O"& _ 
                "R (""v_bc"" = :Original_v_bc)) AND ((:IsNull_vl_bc = 1 AND ""vl_bc"" IS NULL) OR (""v"& _ 
                "l_bc"" = :Original_vl_bc)) AND ((:IsNull_v_cd = 1 AND ""v_cd"" IS NULL) OR (""v_cd"" "& _ 
                "= :Original_v_cd)) AND ((:IsNull_vl_cd = 1 AND ""vl_cd"" IS NULL) OR (""vl_cd"" = :O"& _ 
                "riginal_vl_cd)) AND ((:IsNull_angle_cd = 1 AND ""angle_cd"" IS NULL) OR (""angle_cd"& _ 
                """ = :Original_angle_cd)) AND ((:IsNull_vp_d = 1 AND ""vp_d"" IS NULL) OR (""vp_d"" ="& _ 
                " :Original_vp_d)) AND ((:IsNull_v_d = 1 AND ""v_d"" IS NULL) OR (""v_d"" = :Original"& _ 
                "_v_d)) AND ((:IsNull_vl_d = 1 AND ""vl_d"" IS NULL) OR (""vl_d"" = :Original_vl_d)) "& _ 
                "AND ((:IsNull_vp_s2 = 1 AND ""vp_s2"" IS NULL) OR (""vp_s2"" = :Original_vp_s2)) AND"& _ 
                " ((:IsNull_v_ps2 = 1 AND ""v_ps2"" IS NULL) OR (""v_ps2"" = :Original_v_ps2)) AND (("& _ 
                ":IsNull_vl_ps2 = 1 AND ""vl_ps2"" IS NULL) OR (""vl_ps2"" = :Original_vl_ps2)) AND ("& _ 
                "(:IsNull_vp_s3 = 1 AND ""vp_s3"" IS NULL) OR (""vp_s3"" = :Original_vp_s3)) AND ((:I"& _ 
                "sNull_v_ps3 = 1 AND ""v_ps3"" IS NULL) OR (""v_ps3"" = :Original_v_ps3)) AND ((:IsNu"& _ 
                "ll_vl_ps3 = 1 AND ""vl_ps3"" IS NULL) OR (""vl_ps3"" = :Original_vl_ps3)) AND ((:IsN"& _ 
                "ull_vp_s4 = 1 AND ""vp_s4"" IS NULL) OR (""vp_s4"" = :Original_vp_s4)) AND ((:IsNull"& _ 
                "_v_ps4 = 1 AND ""v_ps4"" IS NULL) OR (""v_ps4"" = :Original_v_ps4)) AND ((:IsNull_vl"& _ 
                "_ps4 = 1 AND ""vl_ps4"" IS NULL) OR (""vl_ps4"" = :Original_vl_ps4)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_id_z3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_numberPosition"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_numberPosition"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_pb"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_v_b"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "v_b"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_v_b"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_b"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mashtab_mv"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mashtab_mv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mashtab_mv"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_mv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mashtab_mv_view"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mashtab_mv_view"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mashtab_mv_view"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_mv_view"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vp_P"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vp_P"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vp_P"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_P"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angle_Pb"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angle_Pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angle_Pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_Pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vp_b"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vp_b"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vp_b"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_b"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angle_bc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angle_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angle_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angle_px"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angle_px"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angle_px"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_px"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vp_c"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vp_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vp_c"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_v_c"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "v_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_v_c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_c"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_v_bc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "v_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_v_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_bc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_v_cd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "v_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_v_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_cd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angle_cd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angle_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angle_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vp_d"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vp_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vp_d"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_v_d"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "v_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_v_d"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_d"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_d"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vp_s2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vp_s2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vp_s2"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_s2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_v_ps2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "v_ps2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_v_ps2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_ps2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_ps2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_ps2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_ps2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_ps2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vp_s3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vp_s3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vp_s3"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_s3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_v_ps3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "v_ps3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_v_ps3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_ps3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_ps3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_ps3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_ps3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_ps3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vp_s4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vp_s4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vp_s4"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_s4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_v_ps4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "v_ps4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_v_ps4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_ps4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_ps4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_ps4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_ps4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_ps4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""z3_speed"" (""id"", ""id_z3"", ""numberPosition"", ""vl_pb"", ""v_b"", """& _ 
                "mashtab_mv"", ""mashtab_mv_view"", ""vp_P"", ""angle_Pb"", ""vp_b"", ""angle_bc"", ""angle_p"& _ 
                "x"", ""vp_c"", ""v_c"", ""vl_c"", ""v_bc"", ""vl_bc"", ""v_cd"", ""vl_cd"", ""angle_cd"", ""vp_d"","& _ 
                " ""v_d"", ""vl_d"", ""vp_s2"", ""v_ps2"", ""vl_ps2"", ""vp_s3"", ""v_ps3"", ""vl_ps3"", ""vp_s4"","& _ 
                " ""v_ps4"", ""vl_ps4"") VALUES (:id, :id_z3, :numberPosition, :vl_pb, :v_b, :mashtab"& _ 
                "_mv, :mashtab_mv_view, :vp_P, :angle_Pb, :vp_b, :angle_bc, :angle_px, :vp_c, :v_"& _ 
                "c, :vl_c, :v_bc, :vl_bc, :v_cd, :vl_cd, :angle_cd, :vp_d, :v_d, :vl_d, :vp_s2, :"& _ 
                "v_ps2, :vl_ps2, :vp_s3, :v_ps3, :vl_ps3, :vp_s4, :v_ps4, :vl_ps4)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "numberPosition"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "v_b"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_b"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mashtab_mv"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_mv"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mashtab_mv_view"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_mv_view"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vp_P"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_P"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angle_Pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_Pb"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vp_b"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_b"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angle_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_bc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angle_px"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_px"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vp_c"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_c"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "v_c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_c"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_c"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "v_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_bc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_bc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "v_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_cd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_cd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angle_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_cd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vp_d"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_d"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "v_d"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_d"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_d"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_d"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vp_s2"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_s2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "v_ps2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_ps2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_ps2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_ps2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vp_s3"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_s3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "v_ps3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_ps3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_ps3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_ps3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vp_s4"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_s4"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "v_ps4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_ps4"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_ps4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_ps4"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""z3_speed"" SET ""id"" = :id, ""id_z3"" = :id_z3, ""numberPosition"" = :nu"& _ 
                "mberPosition, ""vl_pb"" = :vl_pb, ""v_b"" = :v_b, ""mashtab_mv"" = :mashtab_mv, ""masht"& _ 
                "ab_mv_view"" = :mashtab_mv_view, ""vp_P"" = :vp_P, ""angle_Pb"" = :angle_Pb, ""vp_b"" ="& _ 
                " :vp_b, ""angle_bc"" = :angle_bc, ""angle_px"" = :angle_px, ""vp_c"" = :vp_c, ""v_c"" = "& _ 
                ":v_c, ""vl_c"" = :vl_c, ""v_bc"" = :v_bc, ""vl_bc"" = :vl_bc, ""v_cd"" = :v_cd, ""vl_cd"" "& _ 
                "= :vl_cd, ""angle_cd"" = :angle_cd, ""vp_d"" = :vp_d, ""v_d"" = :v_d, ""vl_d"" = :vl_d, "& _ 
                """vp_s2"" = :vp_s2, ""v_ps2"" = :v_ps2, ""vl_ps2"" = :vl_ps2, ""vp_s3"" = :vp_s3, ""v_ps3"& _ 
                """ = :v_ps3, ""vl_ps3"" = :vl_ps3, ""vp_s4"" = :vp_s4, ""v_ps4"" = :v_ps4, ""vl_ps4"" = :"& _ 
                "vl_ps4 WHERE ((""id"" = :Original_id) AND ((:IsNull_id_z3 = 1 AND ""id_z3"" IS NULL)"& _ 
                " OR (""id_z3"" = :Original_id_z3)) AND ((:IsNull_numberPosition = 1 AND ""numberPos"& _ 
                "ition"" IS NULL) OR (""numberPosition"" = :Original_numberPosition)) AND ((:IsNull_"& _ 
                "vl_pb = 1 AND ""vl_pb"" IS NULL) OR (""vl_pb"" = :Original_vl_pb)) AND ((:IsNull_v_b"& _ 
                " = 1 AND ""v_b"" IS NULL) OR (""v_b"" = :Original_v_b)) AND ((:IsNull_mashtab_mv = 1"& _ 
                " AND ""mashtab_mv"" IS NULL) OR (""mashtab_mv"" = :Original_mashtab_mv)) AND ((:IsNu"& _ 
                "ll_mashtab_mv_view = 1 AND ""mashtab_mv_view"" IS NULL) OR (""mashtab_mv_view"" = :O"& _ 
                "riginal_mashtab_mv_view)) AND ((:IsNull_vp_P = 1 AND ""vp_P"" IS NULL) OR (""vp_P"" "& _ 
                "= :Original_vp_P)) AND ((:IsNull_angle_Pb = 1 AND ""angle_Pb"" IS NULL) OR (""angle"& _ 
                "_Pb"" = :Original_angle_Pb)) AND ((:IsNull_vp_b = 1 AND ""vp_b"" IS NULL) OR (""vp_b"& _ 
                """ = :Original_vp_b)) AND ((:IsNull_angle_bc = 1 AND ""angle_bc"" IS NULL) OR (""ang"& _ 
                "le_bc"" = :Original_angle_bc)) AND ((:IsNull_angle_px = 1 AND ""angle_px"" IS NULL)"& _ 
                " OR (""angle_px"" = :Original_angle_px)) AND ((:IsNull_vp_c = 1 AND ""vp_c"" IS NULL"& _ 
                ") OR (""vp_c"" = :Original_vp_c)) AND ((:IsNull_v_c = 1 AND ""v_c"" IS NULL) OR (""v_"& _ 
                "c"" = :Original_v_c)) AND ((:IsNull_vl_c = 1 AND ""vl_c"" IS NULL) OR (""vl_c"" = :Or"& _ 
                "iginal_vl_c)) AND ((:IsNull_v_bc = 1 AND ""v_bc"" IS NULL) OR (""v_bc"" = :Original_"& _ 
                "v_bc)) AND ((:IsNull_vl_bc = 1 AND ""vl_bc"" IS NULL) OR (""vl_bc"" = :Original_vl_b"& _ 
                "c)) AND ((:IsNull_v_cd = 1 AND ""v_cd"" IS NULL) OR (""v_cd"" = :Original_v_cd)) AND"& _ 
                " ((:IsNull_vl_cd = 1 AND ""vl_cd"" IS NULL) OR (""vl_cd"" = :Original_vl_cd)) AND (("& _ 
                ":IsNull_angle_cd = 1 AND ""angle_cd"" IS NULL) OR (""angle_cd"" = :Original_angle_cd"& _ 
                ")) AND ((:IsNull_vp_d = 1 AND ""vp_d"" IS NULL) OR (""vp_d"" = :Original_vp_d)) AND "& _ 
                "((:IsNull_v_d = 1 AND ""v_d"" IS NULL) OR (""v_d"" = :Original_v_d)) AND ((:IsNull_v"& _ 
                "l_d = 1 AND ""vl_d"" IS NULL) OR (""vl_d"" = :Original_vl_d)) AND ((:IsNull_vp_s2 = "& _ 
                "1 AND ""vp_s2"" IS NULL) OR (""vp_s2"" = :Original_vp_s2)) AND ((:IsNull_v_ps2 = 1 A"& _ 
                "ND ""v_ps2"" IS NULL) OR (""v_ps2"" = :Original_v_ps2)) AND ((:IsNull_vl_ps2 = 1 AND"& _ 
                " ""vl_ps2"" IS NULL) OR (""vl_ps2"" = :Original_vl_ps2)) AND ((:IsNull_vp_s3 = 1 AND"& _ 
                " ""vp_s3"" IS NULL) OR (""vp_s3"" = :Original_vp_s3)) AND ((:IsNull_v_ps3 = 1 AND ""v"& _ 
                "_ps3"" IS NULL) OR (""v_ps3"" = :Original_v_ps3)) AND ((:IsNull_vl_ps3 = 1 AND ""vl_"& _ 
                "ps3"" IS NULL) OR (""vl_ps3"" = :Original_vl_ps3)) AND ((:IsNull_vp_s4 = 1 AND ""vp_"& _ 
                "s4"" IS NULL) OR (""vp_s4"" = :Original_vp_s4)) AND ((:IsNull_v_ps4 = 1 AND ""v_ps4"""& _ 
                " IS NULL) OR (""v_ps4"" = :Original_v_ps4)) AND ((:IsNull_vl_ps4 = 1 AND ""vl_ps4"" "& _ 
                "IS NULL) OR (""vl_ps4"" = :Original_vl_ps4)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "numberPosition"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "v_b"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_b"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mashtab_mv"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_mv"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "mashtab_mv_view"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_mv_view"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vp_P"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_P"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angle_Pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_Pb"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vp_b"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_b"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angle_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_bc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angle_px"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_px"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vp_c"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_c"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "v_c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_c"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_c"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "v_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_bc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_bc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "v_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_cd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_cd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "angle_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_cd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vp_d"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_d"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "v_d"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_d"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_d"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_d"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vp_s2"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_s2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "v_ps2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_ps2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_ps2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_ps2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vp_s3"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_s3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "v_ps3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_ps3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_ps3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_ps3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vp_s4"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_s4"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "v_ps4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_ps4"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_ps4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_ps4"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_id_z3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id_z3"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_z3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_numberPosition"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_numberPosition"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "numberPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_pb"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_v_b"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "v_b"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_v_b"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_b"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mashtab_mv"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mashtab_mv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mashtab_mv"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_mv"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_mashtab_mv_view"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "mashtab_mv_view"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_mashtab_mv_view"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "mashtab_mv_view"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vp_P"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vp_P"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vp_P"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_P"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angle_Pb"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angle_Pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angle_Pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_Pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vp_b"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vp_b"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vp_b"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_b"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angle_bc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angle_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angle_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angle_px"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angle_px"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angle_px"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_px"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vp_c"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vp_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vp_c"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_v_c"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "v_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_v_c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_c"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_c"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_c"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_v_bc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "v_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_v_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_bc"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_bc"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_bc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_v_cd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "v_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_v_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_cd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_angle_cd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "angle_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_angle_cd"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "angle_cd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vp_d"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vp_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vp_d"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_v_d"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "v_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_v_d"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_d"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_d"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_d"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vp_s2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vp_s2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vp_s2"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_s2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_v_ps2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "v_ps2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_v_ps2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_ps2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_ps2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_ps2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_ps2"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_ps2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vp_s3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vp_s3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vp_s3"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_s3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_v_ps3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "v_ps3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_v_ps3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_ps3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_ps3"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_ps3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_ps3"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_ps3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vp_s4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vp_s4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vp_s4"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "vp_s4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_v_ps4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "v_ps4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_v_ps4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "v_ps4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_ps4"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_ps4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_ps4"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_ps4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.TMM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, id_z3, numberPosition, vl_pb, v_b, mashtab_mv, mashtab_mv_view, vp_P, "& _ 
                "angle_Pb, vp_b, angle_bc, angle_px, vp_c, v_c, vl_c, v_bc, vl_bc, v_cd, vl_cd, a"& _ 
                "ngle_cd, vp_d, v_d, vl_d, vp_s2, v_ps2, vl_ps2, vp_s3, v_ps3, vl_ps3, vp_s4, v_p"& _ 
                "s4, vl_ps4 FROM ""main"".z3_speed"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.z3_speedDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.z3_speedDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.z3_speedDataTable = New DataSet1.z3_speedDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.z3_speedDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "z3_speed")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_id As Long,  _
                    ByVal Original_id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal Original_numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal Original_vl_pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_v_b As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_mv As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_mv_view As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_P As String,  _
                    ByVal Original_angle_Pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_b As String,  _
                    ByVal Original_angle_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_angle_px As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_c As String,  _
                    ByVal Original_v_c As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_c As Global.System.Nullable(Of Double),  _
                    ByVal Original_v_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_v_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_angle_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_d As String,  _
                    ByVal Original_v_d As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_d As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_s2 As String,  _
                    ByVal Original_v_ps2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_ps2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_s3 As String,  _
                    ByVal Original_v_ps3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_ps3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_s4 As String,  _
                    ByVal Original_v_ps4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_ps4 As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_id_z3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_id_z3.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_numberPosition.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_numberPosition.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_pb.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_vl_pb.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_v_b.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_v_b.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_mashtab_mv.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_mashtab_mv.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_mashtab_mv_view.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_mashtab_mv_view.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_vp_P Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_vp_P,String)
            End If
            If (Original_angle_Pb.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_angle_Pb.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_vp_b Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_vp_b,String)
            End If
            If (Original_angle_bc.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_angle_bc.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_angle_px.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_angle_px.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_vp_c Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_vp_c,String)
            End If
            If (Original_v_c.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_v_c.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_c.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_vl_c.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_v_bc.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_v_bc.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_bc.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_vl_bc.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_v_cd.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_v_cd.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_cd.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_vl_cd.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_angle_cd.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_angle_cd.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_vp_d Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_vp_d,String)
            End If
            If (Original_v_d.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_v_d.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_d.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_vl_d.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_vp_s2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_vp_s2,String)
            End If
            If (Original_v_ps2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_v_ps2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_ps2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_vl_ps2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_vp_s3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_vp_s3,String)
            End If
            If (Original_v_ps3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_v_ps3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_ps3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_vl_ps3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (Original_vp_s4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_vp_s4,String)
            End If
            If (Original_v_ps4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_v_ps4.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_ps4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_vl_ps4.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal id As Long,  _
                    ByVal id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal vl_pb As Global.System.Nullable(Of Double),  _
                    ByVal v_b As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_mv As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_mv_view As Global.System.Nullable(Of Double),  _
                    ByVal vp_P As String,  _
                    ByVal angle_Pb As Global.System.Nullable(Of Double),  _
                    ByVal vp_b As String,  _
                    ByVal angle_bc As Global.System.Nullable(Of Double),  _
                    ByVal angle_px As Global.System.Nullable(Of Double),  _
                    ByVal vp_c As String,  _
                    ByVal v_c As Global.System.Nullable(Of Double),  _
                    ByVal vl_c As Global.System.Nullable(Of Double),  _
                    ByVal v_bc As Global.System.Nullable(Of Double),  _
                    ByVal vl_bc As Global.System.Nullable(Of Double),  _
                    ByVal v_cd As Global.System.Nullable(Of Double),  _
                    ByVal vl_cd As Global.System.Nullable(Of Double),  _
                    ByVal angle_cd As Global.System.Nullable(Of Double),  _
                    ByVal vp_d As String,  _
                    ByVal v_d As Global.System.Nullable(Of Double),  _
                    ByVal vl_d As Global.System.Nullable(Of Double),  _
                    ByVal vp_s2 As String,  _
                    ByVal v_ps2 As Global.System.Nullable(Of Double),  _
                    ByVal vl_ps2 As Global.System.Nullable(Of Double),  _
                    ByVal vp_s3 As String,  _
                    ByVal v_ps3 As Global.System.Nullable(Of Double),  _
                    ByVal vl_ps3 As Global.System.Nullable(Of Double),  _
                    ByVal vp_s4 As String,  _
                    ByVal v_ps4 As Global.System.Nullable(Of Double),  _
                    ByVal vl_ps4 As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            If (id_z3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(id_z3.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (numberPosition.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(numberPosition.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (vl_pb.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(vl_pb.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (v_b.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(v_b.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (mashtab_mv.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(mashtab_mv.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (mashtab_mv_view.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(mashtab_mv_view.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (vp_P Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(vp_P,String)
            End If
            If (angle_Pb.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(angle_Pb.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (vp_b Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(vp_b,String)
            End If
            If (angle_bc.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(angle_bc.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (angle_px.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(angle_px.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (vp_c Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(vp_c,String)
            End If
            If (v_c.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(v_c.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (vl_c.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(vl_c.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (v_bc.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(v_bc.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (vl_bc.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(vl_bc.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (v_cd.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(v_cd.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (vl_cd.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(vl_cd.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (angle_cd.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(angle_cd.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (vp_d Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(vp_d,String)
            End If
            If (v_d.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(v_d.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (vl_d.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(vl_d.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (vp_s2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(vp_s2,String)
            End If
            If (v_ps2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(v_ps2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (vl_ps2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(vl_ps2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (vp_s3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(vp_s3,String)
            End If
            If (v_ps3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(v_ps3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (vl_ps3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(vl_ps3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (vp_s4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(vp_s4,String)
            End If
            If (v_ps4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(v_ps4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (vl_ps4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(vl_ps4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id As Long,  _
                    ByVal id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal vl_pb As Global.System.Nullable(Of Double),  _
                    ByVal v_b As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_mv As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_mv_view As Global.System.Nullable(Of Double),  _
                    ByVal vp_P As String,  _
                    ByVal angle_Pb As Global.System.Nullable(Of Double),  _
                    ByVal vp_b As String,  _
                    ByVal angle_bc As Global.System.Nullable(Of Double),  _
                    ByVal angle_px As Global.System.Nullable(Of Double),  _
                    ByVal vp_c As String,  _
                    ByVal v_c As Global.System.Nullable(Of Double),  _
                    ByVal vl_c As Global.System.Nullable(Of Double),  _
                    ByVal v_bc As Global.System.Nullable(Of Double),  _
                    ByVal vl_bc As Global.System.Nullable(Of Double),  _
                    ByVal v_cd As Global.System.Nullable(Of Double),  _
                    ByVal vl_cd As Global.System.Nullable(Of Double),  _
                    ByVal angle_cd As Global.System.Nullable(Of Double),  _
                    ByVal vp_d As String,  _
                    ByVal v_d As Global.System.Nullable(Of Double),  _
                    ByVal vl_d As Global.System.Nullable(Of Double),  _
                    ByVal vp_s2 As String,  _
                    ByVal v_ps2 As Global.System.Nullable(Of Double),  _
                    ByVal vl_ps2 As Global.System.Nullable(Of Double),  _
                    ByVal vp_s3 As String,  _
                    ByVal v_ps3 As Global.System.Nullable(Of Double),  _
                    ByVal vl_ps3 As Global.System.Nullable(Of Double),  _
                    ByVal vp_s4 As String,  _
                    ByVal v_ps4 As Global.System.Nullable(Of Double),  _
                    ByVal vl_ps4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_id As Long,  _
                    ByVal Original_id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal Original_numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal Original_vl_pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_v_b As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_mv As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_mv_view As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_P As String,  _
                    ByVal Original_angle_Pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_b As String,  _
                    ByVal Original_angle_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_angle_px As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_c As String,  _
                    ByVal Original_v_c As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_c As Global.System.Nullable(Of Double),  _
                    ByVal Original_v_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_v_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_angle_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_d As String,  _
                    ByVal Original_v_d As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_d As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_s2 As String,  _
                    ByVal Original_v_ps2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_ps2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_s3 As String,  _
                    ByVal Original_v_ps3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_ps3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_s4 As String,  _
                    ByVal Original_v_ps4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_ps4 As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            If (id_z3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(id_z3.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (numberPosition.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(numberPosition.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (vl_pb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(vl_pb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (v_b.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(v_b.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (mashtab_mv.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(mashtab_mv.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (mashtab_mv_view.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(mashtab_mv_view.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (vp_P Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(vp_P,String)
            End If
            If (angle_Pb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(angle_Pb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (vp_b Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(vp_b,String)
            End If
            If (angle_bc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(angle_bc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (angle_px.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(angle_px.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (vp_c Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(vp_c,String)
            End If
            If (v_c.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(v_c.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (vl_c.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(vl_c.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (v_bc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(v_bc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (vl_bc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(vl_bc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (v_cd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(v_cd.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (vl_cd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(vl_cd.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (angle_cd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(angle_cd.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (vp_d Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(vp_d,String)
            End If
            If (v_d.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(v_d.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (vl_d.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(vl_d.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (vp_s2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(vp_s2,String)
            End If
            If (v_ps2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(v_ps2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (vl_ps2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(vl_ps2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (vp_s3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(vp_s3,String)
            End If
            If (v_ps3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(v_ps3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (vl_ps3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(vl_ps3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (vp_s4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(vp_s4,String)
            End If
            If (v_ps4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(v_ps4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (vl_ps4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(vl_ps4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_id,Long)
            If (Original_id_z3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_id_z3.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_numberPosition.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_numberPosition.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_pb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_vl_pb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_v_b.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_v_b.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_mashtab_mv.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_mashtab_mv.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_mashtab_mv_view.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_mashtab_mv_view.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_vp_P Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_vp_P,String)
            End If
            If (Original_angle_Pb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_angle_Pb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_vp_b Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_vp_b,String)
            End If
            If (Original_angle_bc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_angle_bc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_angle_px.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_angle_px.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_vp_c Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_vp_c,String)
            End If
            If (Original_v_c.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_v_c.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_c.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_vl_c.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (Original_v_bc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_v_bc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_bc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_vl_bc.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (Original_v_cd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_v_cd.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_cd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_vl_cd.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (Original_angle_cd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_angle_cd.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (Original_vp_d Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_vp_d,String)
            End If
            If (Original_v_d.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_v_d.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_d.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_vl_d.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (Original_vp_s2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_vp_s2,String)
            End If
            If (Original_v_ps2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_v_ps2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_ps2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_vl_ps2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (Original_vp_s3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_vp_s3,String)
            End If
            If (Original_v_ps3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_v_ps3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_ps3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_vl_ps3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            End If
            If (Original_vp_s4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_vp_s4,String)
            End If
            If (Original_v_ps4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_v_ps4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_ps4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_vl_ps4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal vl_pb As Global.System.Nullable(Of Double),  _
                    ByVal v_b As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_mv As Global.System.Nullable(Of Double),  _
                    ByVal mashtab_mv_view As Global.System.Nullable(Of Double),  _
                    ByVal vp_P As String,  _
                    ByVal angle_Pb As Global.System.Nullable(Of Double),  _
                    ByVal vp_b As String,  _
                    ByVal angle_bc As Global.System.Nullable(Of Double),  _
                    ByVal angle_px As Global.System.Nullable(Of Double),  _
                    ByVal vp_c As String,  _
                    ByVal v_c As Global.System.Nullable(Of Double),  _
                    ByVal vl_c As Global.System.Nullable(Of Double),  _
                    ByVal v_bc As Global.System.Nullable(Of Double),  _
                    ByVal vl_bc As Global.System.Nullable(Of Double),  _
                    ByVal v_cd As Global.System.Nullable(Of Double),  _
                    ByVal vl_cd As Global.System.Nullable(Of Double),  _
                    ByVal angle_cd As Global.System.Nullable(Of Double),  _
                    ByVal vp_d As String,  _
                    ByVal v_d As Global.System.Nullable(Of Double),  _
                    ByVal vl_d As Global.System.Nullable(Of Double),  _
                    ByVal vp_s2 As String,  _
                    ByVal v_ps2 As Global.System.Nullable(Of Double),  _
                    ByVal vl_ps2 As Global.System.Nullable(Of Double),  _
                    ByVal vp_s3 As String,  _
                    ByVal v_ps3 As Global.System.Nullable(Of Double),  _
                    ByVal vl_ps3 As Global.System.Nullable(Of Double),  _
                    ByVal vp_s4 As String,  _
                    ByVal v_ps4 As Global.System.Nullable(Of Double),  _
                    ByVal vl_ps4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_id As Long,  _
                    ByVal Original_id_z3 As Global.System.Nullable(Of Long),  _
                    ByVal Original_numberPosition As Global.System.Nullable(Of Long),  _
                    ByVal Original_vl_pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_v_b As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_mv As Global.System.Nullable(Of Double),  _
                    ByVal Original_mashtab_mv_view As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_P As String,  _
                    ByVal Original_angle_Pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_b As String,  _
                    ByVal Original_angle_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_angle_px As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_c As String,  _
                    ByVal Original_v_c As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_c As Global.System.Nullable(Of Double),  _
                    ByVal Original_v_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_bc As Global.System.Nullable(Of Double),  _
                    ByVal Original_v_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_angle_cd As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_d As String,  _
                    ByVal Original_v_d As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_d As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_s2 As String,  _
                    ByVal Original_v_ps2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_ps2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_s3 As String,  _
                    ByVal Original_v_ps3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_ps3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_vp_s4 As String,  _
                    ByVal Original_v_ps4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_ps4 As Global.System.Nullable(Of Double)) As Integer
            Return Me.Update(Original_id, id_z3, numberPosition, vl_pb, v_b, mashtab_mv, mashtab_mv_view, vp_P, angle_Pb, vp_b, angle_bc, angle_px, vp_c, v_c, vl_c, v_bc, vl_bc, v_cd, vl_cd, angle_cd, vp_d, v_d, vl_d, vp_s2, v_ps2, vl_ps2, vp_s3, v_ps3, vl_ps3, vp_s4, v_ps4, vl_ps4, Original_id, Original_id_z3, Original_numberPosition, Original_vl_pb, Original_v_b, Original_mashtab_mv, Original_mashtab_mv_view, Original_vp_P, Original_angle_Pb, Original_vp_b, Original_angle_bc, Original_angle_px, Original_vp_c, Original_v_c, Original_vl_c, Original_v_bc, Original_vl_bc, Original_v_cd, Original_vl_cd, Original_angle_cd, Original_vp_d, Original_v_d, Original_vl_d, Original_vp_s2, Original_v_ps2, Original_vl_ps2, Original_vp_s3, Original_v_ps3, Original_vl_ps3, Original_vp_s4, Original_v_ps4, Original_vl_ps4)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class zadaniaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "zadania"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("zd", "zd")
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("comment", "comment")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""zadania"" WHERE ((""id"" = :Original_id) AND ((:IsNull_zd = 1 AN"& _ 
                "D ""zd"" IS NULL) OR (""zd"" = :Original_zd)) AND ((:IsNull_name = 1 AND ""name"" IS N"& _ 
                "ULL) OR (""name"" = :Original_name)) AND ((:IsNull_comment = 1 AND ""comment"" IS NU"& _ 
                "LL) OR (""comment"" = :Original_comment)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_zd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "zd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_zd"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "zd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_comment"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""zadania"" (""id"", ""zd"", ""name"", ""comment"") VALUES (:id, :zd, :n"& _ 
                "ame, :comment)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "zd"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "zd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""zadania"" SET ""id"" = :id, ""zd"" = :zd, ""name"" = :name, ""comment"" = :"& _ 
                "comment WHERE ((""id"" = :Original_id) AND ((:IsNull_zd = 1 AND ""zd"" IS NULL) OR ("& _ 
                """zd"" = :Original_zd)) AND ((:IsNull_name = 1 AND ""name"" IS NULL) OR (""name"" = :O"& _ 
                "riginal_name)) AND ((:IsNull_comment = 1 AND ""comment"" IS NULL) OR (""comment"" = "& _ 
                ":Original_comment)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "zd"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "zd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_zd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "zd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_zd"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "zd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_name"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_comment"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comment"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.TMM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, zd, name, comment FROM ""main"".zadania"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.zadaniaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.zadaniaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.zadaniaDataTable = New DataSet1.zadaniaDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.zadaniaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "zadania")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_zd As String, ByVal Original_name As String, ByVal Original_comment As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_zd Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_zd,String)
            End If
            If (Original_name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_name,String)
            End If
            If (Original_comment Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_comment,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Long, ByVal zd As String, ByVal name As String, ByVal comment As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            If (zd Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(zd,String)
            End If
            If (name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(name,String)
            End If
            If (comment Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(comment,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id As Long, ByVal zd As String, ByVal name As String, ByVal comment As String, ByVal Original_id As Long, ByVal Original_zd As String, ByVal Original_name As String, ByVal Original_comment As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            If (zd Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(zd,String)
            End If
            If (name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(name,String)
            End If
            If (comment Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(comment,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_id,Long)
            If (Original_zd Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_zd,String)
            End If
            If (Original_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_name,String)
            End If
            If (Original_comment Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_comment,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal zd As String, ByVal name As String, ByVal comment As String, ByVal Original_id As Long, ByVal Original_zd As String, ByVal Original_name As String, ByVal Original_comment As String) As Integer
            Return Me.Update(Original_id, zd, name, comment, Original_id, Original_zd, Original_name, Original_comment)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class zd_registerTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "zd_register"
            tableMapping.ColumnMappings.Add("id", "id")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""zd_register"" WHERE ((""id"" = :Original_id))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""zd_register"" (""id"") VALUES (:id)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""zd_register"" SET ""id"" = :id WHERE ((""id"" = :Original_id))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.TMM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id FROM ""main"".zd_register"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.zd_registerDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.zd_registerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.zd_registerDataTable = New DataSet1.zd_registerDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.zd_registerDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "zd_register")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Long) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal id As Long, ByVal Original_id As Long) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_id,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_id As Long) As Integer
            Return Me.Update(Original_id, Original_id)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class zd_studentTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Devart.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.Devart.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.Common.DbTransaction
        
        Private _commandCollection() As Global.Devart.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Devart.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.Devart.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Devart.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.Common.DbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Devart.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Devart.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "zd_student"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("st_name", "st_name")
            tableMapping.ColumnMappings.Add("id_zd", "id_zd")
            tableMapping.ColumnMappings.Add("variant", "variant")
            tableMapping.ColumnMappings.Add("year", "year")
            tableMapping.ColumnMappings.Add("lstn", "lstn")
            tableMapping.ColumnMappings.Add("id_dodatok2", "id_dodatok2")
            tableMapping.ColumnMappings.Add("ml_AB", "ml_AB")
            tableMapping.ColumnMappings.Add("vl_pb", "vl_pb")
            tableMapping.ColumnMappings.Add("al_pib", "al_pib")
            tableMapping.ColumnMappings.Add("comm", "comm")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""main"".""zd_student"" WHERE ((""id"" = :Original_id) AND ((:IsNull_st_nam"& _ 
                "e = 1 AND ""st_name"" IS NULL) OR (""st_name"" = :Original_st_name)) AND ((:IsNull_i"& _ 
                "d_zd = 1 AND ""id_zd"" IS NULL) OR (""id_zd"" = :Original_id_zd)) AND ((:IsNull_vari"& _ 
                "ant = 1 AND ""variant"" IS NULL) OR (""variant"" = :Original_variant)) AND ((:IsNull"& _ 
                "_year = 1 AND ""year"" IS NULL) OR (""year"" = :Original_year)) AND ((:IsNull_lstn ="& _ 
                " 1 AND ""lstn"" IS NULL) OR (""lstn"" = :Original_lstn)) AND ((:IsNull_id_dodatok2 ="& _ 
                " 1 AND ""id_dodatok2"" IS NULL) OR (""id_dodatok2"" = :Original_id_dodatok2)) AND (("& _ 
                ":IsNull_ml_AB = 1 AND ""ml_AB"" IS NULL) OR (""ml_AB"" = :Original_ml_AB)) AND ((:Is"& _ 
                "Null_vl_pb = 1 AND ""vl_pb"" IS NULL) OR (""vl_pb"" = :Original_vl_pb)) AND ((:IsNul"& _ 
                "l_al_pib = 1 AND ""al_pib"" IS NULL) OR (""al_pib"" = :Original_al_pib)) AND ((:IsNu"& _ 
                "ll_comm = 1 AND ""comm"" IS NULL) OR (""comm"" = :Original_comm)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Devart.Data.SQLite.SQLiteParameter = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_st_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "st_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_st_name"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "st_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_id_zd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "id_zd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id_zd"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_zd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_variant"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "variant"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_variant"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "variant"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_year"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "year"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_year"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "year"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_lstn"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "lstn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_lstn"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "lstn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_id_dodatok2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "id_dodatok2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id_dodatok2"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_dodatok2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ml_AB"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ml_AB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ml_AB"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_AB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_pb"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_pib"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_pib"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_pib"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_pib"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_comm"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "comm"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comm"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comm"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""main"".""zd_student"" (""id"", ""st_name"", ""id_zd"", ""variant"", ""year"", ""ls"& _ 
                "tn"", ""id_dodatok2"", ""ml_AB"", ""vl_pb"", ""al_pib"", ""comm"") VALUES (:id, :st_name, :"& _ 
                "id_zd, :variant, :year, :lstn, :id_dodatok2, :ml_AB, :vl_pb, :al_pib, :comm)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "st_name"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "st_name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id_zd"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_zd"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "variant"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "variant"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "year"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "year"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "lstn"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "lstn"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id_dodatok2"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_dodatok2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ml_AB"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_AB"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_pib"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_pib"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comm"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comm"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""main"".""zd_student"" SET ""id"" = :id, ""st_name"" = :st_name, ""id_zd"" = :id_zd"& _ 
                ", ""variant"" = :variant, ""year"" = :year, ""lstn"" = :lstn, ""id_dodatok2"" = :id_doda"& _ 
                "tok2, ""ml_AB"" = :ml_AB, ""vl_pb"" = :vl_pb, ""al_pib"" = :al_pib, ""comm"" = :comm WHE"& _ 
                "RE ((""id"" = :Original_id) AND ((:IsNull_st_name = 1 AND ""st_name"" IS NULL) OR ("""& _ 
                "st_name"" = :Original_st_name)) AND ((:IsNull_id_zd = 1 AND ""id_zd"" IS NULL) OR ("& _ 
                """id_zd"" = :Original_id_zd)) AND ((:IsNull_variant = 1 AND ""variant"" IS NULL) OR "& _ 
                "(""variant"" = :Original_variant)) AND ((:IsNull_year = 1 AND ""year"" IS NULL) OR ("& _ 
                """year"" = :Original_year)) AND ((:IsNull_lstn = 1 AND ""lstn"" IS NULL) OR (""lstn"" "& _ 
                "= :Original_lstn)) AND ((:IsNull_id_dodatok2 = 1 AND ""id_dodatok2"" IS NULL) OR ("& _ 
                """id_dodatok2"" = :Original_id_dodatok2)) AND ((:IsNull_ml_AB = 1 AND ""ml_AB"" IS N"& _ 
                "ULL) OR (""ml_AB"" = :Original_ml_AB)) AND ((:IsNull_vl_pb = 1 AND ""vl_pb"" IS NULL"& _ 
                ") OR (""vl_pb"" = :Original_vl_pb)) AND ((:IsNull_al_pib = 1 AND ""al_pib"" IS NULL)"& _ 
                " OR (""al_pib"" = :Original_al_pib)) AND ((:IsNull_comm = 1 AND ""comm"" IS NULL) OR"& _ 
                " (""comm"" = :Original_comm)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "st_name"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "st_name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id_zd"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_zd"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "variant"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "variant"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "year"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "year"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "lstn"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "lstn"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "id_dodatok2"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_dodatok2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "ml_AB"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_AB"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "vl_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "al_pib"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_pib"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "comm"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comm"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_st_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "st_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_st_name"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "st_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_id_zd"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "id_zd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id_zd"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_zd"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_variant"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "variant"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_variant"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "variant"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_year"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "year"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_year"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "year"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_lstn"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "lstn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_lstn"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "lstn"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_id_dodatok2"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "id_dodatok2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_id_dodatok2"
            param.DbType = Global.System.Data.DbType.Int64
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int64
            param.IsNullable = true
            param.SourceColumn = "id_dodatok2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_ml_AB"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "ml_AB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_ml_AB"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "ml_AB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_vl_pb"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_vl_pb"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "vl_pb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_al_pib"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "al_pib"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_al_pib"
            param.DbType = Global.System.Data.DbType.[Double]
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.[Double]
            param.IsNullable = true
            param.SourceColumn = "al_pib"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "IsNull_comm"
            param.DbType = Global.System.Data.DbType.Int32
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Int32
            param.IsNullable = true
            param.SourceColumn = "comm"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Devart.Data.SQLite.SQLiteParameter()
            param.ParameterName = "Original_comm"
            param.SQLiteType = Global.Devart.Data.SQLite.SQLiteType.Text
            param.IsNullable = true
            param.SourceColumn = "comm"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Devart.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.TMM.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Devart.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.Devart.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, st_name, id_zd, variant, year, lstn, id_dodatok2, ml_AB, vl_pb, al_pib"& _ 
                ", comm FROM ""main"".zd_student"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.zd_studentDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet1.zd_studentDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet1.zd_studentDataTable = New DataSet1.zd_studentDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet1.zd_studentDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "zd_student")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id As Long, ByVal Original_st_name As Global.System.Nullable(Of Long), ByVal Original_id_zd As Global.System.Nullable(Of Long), ByVal Original_variant As Global.System.Nullable(Of Long), ByVal Original_year As Global.System.Nullable(Of Long), ByVal Original_lstn As Global.System.Nullable(Of Long), ByVal Original_id_dodatok2 As Global.System.Nullable(Of Long), ByVal Original_ml_AB As Global.System.Nullable(Of Double), ByVal Original_vl_pb As Global.System.Nullable(Of Double), ByVal Original_al_pib As Global.System.Nullable(Of Double), ByVal Original_comm As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id,Long)
            If (Original_st_name.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_st_name.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_id_zd.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_id_zd.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_variant.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_variant.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_year.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_year.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_lstn.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_lstn.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_id_dodatok2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_id_dodatok2.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_ml_AB.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ml_AB.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_pb.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_vl_pb.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_al_pib.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_al_pib.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_comm Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_comm,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Long, ByVal st_name As Global.System.Nullable(Of Long), ByVal id_zd As Global.System.Nullable(Of Long), ByVal _variant As Global.System.Nullable(Of Long), ByVal year As Global.System.Nullable(Of Long), ByVal lstn As Global.System.Nullable(Of Long), ByVal id_dodatok2 As Global.System.Nullable(Of Long), ByVal ml_AB As Global.System.Nullable(Of Double), ByVal vl_pb As Global.System.Nullable(Of Double), ByVal al_pib As Global.System.Nullable(Of Double), ByVal comm As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Long)
            If (st_name.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(st_name.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (id_zd.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(id_zd.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (_variant.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(_variant.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (year.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(year.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (lstn.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(lstn.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (id_dodatok2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(id_dodatok2.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ml_AB.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ml_AB.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (vl_pb.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(vl_pb.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (al_pib.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(al_pib.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (comm Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(comm,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal id As Long,  _
                    ByVal st_name As Global.System.Nullable(Of Long),  _
                    ByVal id_zd As Global.System.Nullable(Of Long),  _
                    ByVal _variant As Global.System.Nullable(Of Long),  _
                    ByVal year As Global.System.Nullable(Of Long),  _
                    ByVal lstn As Global.System.Nullable(Of Long),  _
                    ByVal id_dodatok2 As Global.System.Nullable(Of Long),  _
                    ByVal ml_AB As Global.System.Nullable(Of Double),  _
                    ByVal vl_pb As Global.System.Nullable(Of Double),  _
                    ByVal al_pib As Global.System.Nullable(Of Double),  _
                    ByVal comm As String,  _
                    ByVal Original_id As Long,  _
                    ByVal Original_st_name As Global.System.Nullable(Of Long),  _
                    ByVal Original_id_zd As Global.System.Nullable(Of Long),  _
                    ByVal Original_variant As Global.System.Nullable(Of Long),  _
                    ByVal Original_year As Global.System.Nullable(Of Long),  _
                    ByVal Original_lstn As Global.System.Nullable(Of Long),  _
                    ByVal Original_id_dodatok2 As Global.System.Nullable(Of Long),  _
                    ByVal Original_ml_AB As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_pib As Global.System.Nullable(Of Double),  _
                    ByVal Original_comm As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(id,Long)
            If (st_name.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(st_name.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (id_zd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(id_zd.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (_variant.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(_variant.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (year.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(year.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (lstn.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(lstn.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (id_dodatok2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(id_dodatok2.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ml_AB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ml_AB.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (vl_pb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(vl_pb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (al_pib.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(al_pib.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (comm Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(comm,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_id,Long)
            If (Original_st_name.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_st_name.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_id_zd.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_id_zd.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_variant.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_variant.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_year.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_year.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_lstn.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_lstn.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_id_dodatok2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_id_dodatok2.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_ml_AB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_ml_AB.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_vl_pb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_vl_pb.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_al_pib.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_al_pib.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_comm Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_comm,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal st_name As Global.System.Nullable(Of Long),  _
                    ByVal id_zd As Global.System.Nullable(Of Long),  _
                    ByVal _variant As Global.System.Nullable(Of Long),  _
                    ByVal year As Global.System.Nullable(Of Long),  _
                    ByVal lstn As Global.System.Nullable(Of Long),  _
                    ByVal id_dodatok2 As Global.System.Nullable(Of Long),  _
                    ByVal ml_AB As Global.System.Nullable(Of Double),  _
                    ByVal vl_pb As Global.System.Nullable(Of Double),  _
                    ByVal al_pib As Global.System.Nullable(Of Double),  _
                    ByVal comm As String,  _
                    ByVal Original_id As Long,  _
                    ByVal Original_st_name As Global.System.Nullable(Of Long),  _
                    ByVal Original_id_zd As Global.System.Nullable(Of Long),  _
                    ByVal Original_variant As Global.System.Nullable(Of Long),  _
                    ByVal Original_year As Global.System.Nullable(Of Long),  _
                    ByVal Original_lstn As Global.System.Nullable(Of Long),  _
                    ByVal Original_id_dodatok2 As Global.System.Nullable(Of Long),  _
                    ByVal Original_ml_AB As Global.System.Nullable(Of Double),  _
                    ByVal Original_vl_pb As Global.System.Nullable(Of Double),  _
                    ByVal Original_al_pib As Global.System.Nullable(Of Double),  _
                    ByVal Original_comm As String) As Integer
            Return Me.Update(Original_id, st_name, id_zd, _variant, year, lstn, id_dodatok2, ml_AB, vl_pb, al_pib, comm, Original_id, Original_st_name, Original_id_zd, Original_variant, Original_year, Original_lstn, Original_id_dodatok2, Original_ml_AB, Original_vl_pb, Original_al_pib, Original_comm)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _dodatok2TableAdapter As dodatok2TableAdapter
        
        Private _instaceTableAdapter As instaceTableAdapter
        
        Private _lstnTableAdapter As lstnTableAdapter
        
        Private _sqlite_sequenceTableAdapter As sqlite_sequenceTableAdapter
        
        Private _studentTableAdapter As studentTableAdapter
        
        Private _sys_tablesTableAdapter As sys_tablesTableAdapter
        
        Private _z3TableAdapter As z3TableAdapter
        
        Private _z3_accelerationTableAdapter As z3_accelerationTableAdapter
        
        Private _z3_dataTableAdapter As z3_dataTableAdapter
        
        Private _z3_izvTableAdapter As z3_izvTableAdapter
        
        Private _z3_mehanizmTableAdapter As z3_mehanizmTableAdapter
        
        Private _z3_mzvTableAdapter As z3_mzvTableAdapter
        
        Private _z3_speedTableAdapter As z3_speedTableAdapter
        
        Private _zadaniaTableAdapter As zadaniaTableAdapter
        
        Private _zd_registerTableAdapter As zd_registerTableAdapter
        
        Private _zd_studentTableAdapter As zd_studentTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property dodatok2TableAdapter() As dodatok2TableAdapter
            Get
                Return Me._dodatok2TableAdapter
            End Get
            Set
                Me._dodatok2TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property instaceTableAdapter() As instaceTableAdapter
            Get
                Return Me._instaceTableAdapter
            End Get
            Set
                Me._instaceTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property lstnTableAdapter() As lstnTableAdapter
            Get
                Return Me._lstnTableAdapter
            End Get
            Set
                Me._lstnTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property sqlite_sequenceTableAdapter() As sqlite_sequenceTableAdapter
            Get
                Return Me._sqlite_sequenceTableAdapter
            End Get
            Set
                Me._sqlite_sequenceTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property studentTableAdapter() As studentTableAdapter
            Get
                Return Me._studentTableAdapter
            End Get
            Set
                Me._studentTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property sys_tablesTableAdapter() As sys_tablesTableAdapter
            Get
                Return Me._sys_tablesTableAdapter
            End Get
            Set
                Me._sys_tablesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property z3TableAdapter() As z3TableAdapter
            Get
                Return Me._z3TableAdapter
            End Get
            Set
                Me._z3TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property z3_accelerationTableAdapter() As z3_accelerationTableAdapter
            Get
                Return Me._z3_accelerationTableAdapter
            End Get
            Set
                Me._z3_accelerationTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property z3_dataTableAdapter() As z3_dataTableAdapter
            Get
                Return Me._z3_dataTableAdapter
            End Get
            Set
                Me._z3_dataTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property z3_izvTableAdapter() As z3_izvTableAdapter
            Get
                Return Me._z3_izvTableAdapter
            End Get
            Set
                Me._z3_izvTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property z3_mehanizmTableAdapter() As z3_mehanizmTableAdapter
            Get
                Return Me._z3_mehanizmTableAdapter
            End Get
            Set
                Me._z3_mehanizmTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property z3_mzvTableAdapter() As z3_mzvTableAdapter
            Get
                Return Me._z3_mzvTableAdapter
            End Get
            Set
                Me._z3_mzvTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property z3_speedTableAdapter() As z3_speedTableAdapter
            Get
                Return Me._z3_speedTableAdapter
            End Get
            Set
                Me._z3_speedTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property zadaniaTableAdapter() As zadaniaTableAdapter
            Get
                Return Me._zadaniaTableAdapter
            End Get
            Set
                Me._zadaniaTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property zd_registerTableAdapter() As zd_registerTableAdapter
            Get
                Return Me._zd_registerTableAdapter
            End Get
            Set
                Me._zd_registerTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property zd_studentTableAdapter() As zd_studentTableAdapter
            Get
                Return Me._zd_studentTableAdapter
            End Get
            Set
                Me._zd_studentTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._dodatok2TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dodatok2TableAdapter.Connection) Is Nothing)) Then
                    Return Me._dodatok2TableAdapter.Connection
                End If
                If ((Not (Me._instaceTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._instaceTableAdapter.Connection) Is Nothing)) Then
                    Return Me._instaceTableAdapter.Connection
                End If
                If ((Not (Me._lstnTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._lstnTableAdapter.Connection) Is Nothing)) Then
                    Return Me._lstnTableAdapter.Connection
                End If
                If ((Not (Me._sqlite_sequenceTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sqlite_sequenceTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sqlite_sequenceTableAdapter.Connection
                End If
                If ((Not (Me._studentTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._studentTableAdapter.Connection) Is Nothing)) Then
                    Return Me._studentTableAdapter.Connection
                End If
                If ((Not (Me._sys_tablesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sys_tablesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sys_tablesTableAdapter.Connection
                End If
                If ((Not (Me._z3TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._z3TableAdapter.Connection) Is Nothing)) Then
                    Return Me._z3TableAdapter.Connection
                End If
                If ((Not (Me._z3_accelerationTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._z3_accelerationTableAdapter.Connection) Is Nothing)) Then
                    Return Me._z3_accelerationTableAdapter.Connection
                End If
                If ((Not (Me._z3_dataTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._z3_dataTableAdapter.Connection) Is Nothing)) Then
                    Return Me._z3_dataTableAdapter.Connection
                End If
                If ((Not (Me._z3_izvTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._z3_izvTableAdapter.Connection) Is Nothing)) Then
                    Return Me._z3_izvTableAdapter.Connection
                End If
                If ((Not (Me._z3_mehanizmTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._z3_mehanizmTableAdapter.Connection) Is Nothing)) Then
                    Return Me._z3_mehanizmTableAdapter.Connection
                End If
                If ((Not (Me._z3_mzvTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._z3_mzvTableAdapter.Connection) Is Nothing)) Then
                    Return Me._z3_mzvTableAdapter.Connection
                End If
                If ((Not (Me._z3_speedTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._z3_speedTableAdapter.Connection) Is Nothing)) Then
                    Return Me._z3_speedTableAdapter.Connection
                End If
                If ((Not (Me._zadaniaTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._zadaniaTableAdapter.Connection) Is Nothing)) Then
                    Return Me._zadaniaTableAdapter.Connection
                End If
                If ((Not (Me._zd_registerTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._zd_registerTableAdapter.Connection) Is Nothing)) Then
                    Return Me._zd_registerTableAdapter.Connection
                End If
                If ((Not (Me._zd_studentTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._zd_studentTableAdapter.Connection) Is Nothing)) Then
                    Return Me._zd_studentTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._dodatok2TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._instaceTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._lstnTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._studentTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sys_tablesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._z3TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._z3_accelerationTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._z3_dataTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._z3_izvTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._z3_mehanizmTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._z3_mzvTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._z3_speedTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._zadaniaTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._zd_registerTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._zd_studentTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._dodatok2TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dodatok2.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dodatok2TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._instaceTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.instace.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._instaceTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._lstnTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.lstn.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._lstnTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.sqlite_sequence.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sqlite_sequenceTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._studentTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.student.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._studentTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sys_tablesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.sys_tables.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sys_tablesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._z3TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.z3.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._z3TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._z3_accelerationTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.z3_acceleration.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._z3_accelerationTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._z3_dataTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.z3_data.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._z3_dataTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._z3_izvTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.z3_izv.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._z3_izvTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._z3_mehanizmTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.z3_mehanizm.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._z3_mehanizmTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._z3_mzvTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.z3_mzv.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._z3_mzvTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._z3_speedTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.z3_speed.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._z3_speedTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._zadaniaTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.zadania.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._zadaniaTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._zd_registerTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.zd_register.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._zd_registerTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._zd_studentTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.zd_student.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._zd_studentTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DataSet1, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._dodatok2TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dodatok2.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dodatok2TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._instaceTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.instace.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._instaceTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._lstnTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.lstn.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._lstnTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.sqlite_sequence.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sqlite_sequenceTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._studentTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.student.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._studentTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sys_tablesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.sys_tables.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sys_tablesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._z3TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.z3.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._z3TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._z3_accelerationTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.z3_acceleration.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._z3_accelerationTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._z3_dataTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.z3_data.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._z3_dataTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._z3_izvTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.z3_izv.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._z3_izvTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._z3_mehanizmTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.z3_mehanizm.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._z3_mehanizmTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._z3_mzvTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.z3_mzv.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._z3_mzvTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._z3_speedTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.z3_speed.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._z3_speedTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._zadaniaTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.zadania.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._zadaniaTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._zd_registerTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.zd_register.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._zd_registerTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._zd_studentTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.zd_student.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._zd_studentTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._zd_studentTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.zd_student.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._zd_studentTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._zd_registerTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.zd_register.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._zd_registerTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._zadaniaTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.zadania.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._zadaniaTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._z3_speedTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.z3_speed.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._z3_speedTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._z3_mzvTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.z3_mzv.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._z3_mzvTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._z3_mehanizmTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.z3_mehanizm.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._z3_mehanizmTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._z3_izvTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.z3_izv.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._z3_izvTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._z3_dataTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.z3_data.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._z3_dataTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._z3_accelerationTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.z3_acceleration.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._z3_accelerationTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._z3TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.z3.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._z3TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sys_tablesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.sys_tables.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sys_tablesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._studentTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.student.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._studentTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.sqlite_sequence.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sqlite_sequenceTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._lstnTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.lstn.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._lstnTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._instaceTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.instace.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._instaceTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dodatok2TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dodatok2.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dodatok2TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DataSet1) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._dodatok2TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dodatok2TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._instaceTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._instaceTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._lstnTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._lstnTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._sqlite_sequenceTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sqlite_sequenceTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._studentTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._studentTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._sys_tablesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sys_tablesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._z3TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._z3TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._z3_accelerationTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._z3_accelerationTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._z3_dataTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._z3_dataTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._z3_izvTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._z3_izvTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._z3_mehanizmTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._z3_mehanizmTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._z3_mzvTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._z3_mzvTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._z3_speedTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._z3_speedTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._zadaniaTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._zadaniaTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._zd_registerTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._zd_registerTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            If ((Not (Me._zd_studentTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._zd_studentTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage"& _ 
                        "r, должны использовать одинаковую строку подключения.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager не содержит сведений о подключении. Укажите для каждого адапт"& _ 
                        "ера таблицы TableAdapterManager допустимый экземпляр адаптера таблицы.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("Не удается начать транзакцию. Текущее соединение данных не поддерживает транзакци"& _ 
                        "и или текущее состояние не позволяет начать транзакцию.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._dodatok2TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dodatok2TableAdapter, Me._dodatok2TableAdapter.Connection)
                    Me._dodatok2TableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._dodatok2TableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._dodatok2TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dodatok2TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dodatok2TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._instaceTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._instaceTableAdapter, Me._instaceTableAdapter.Connection)
                    Me._instaceTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._instaceTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._instaceTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._instaceTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._instaceTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._lstnTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._lstnTableAdapter, Me._lstnTableAdapter.Connection)
                    Me._lstnTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._lstnTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._lstnTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._lstnTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._lstnTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sqlite_sequenceTableAdapter, Me._sqlite_sequenceTableAdapter.Connection)
                    Me._sqlite_sequenceTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._sqlite_sequenceTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._sqlite_sequenceTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sqlite_sequenceTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sqlite_sequenceTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._studentTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._studentTableAdapter, Me._studentTableAdapter.Connection)
                    Me._studentTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._studentTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._studentTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._studentTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._studentTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sys_tablesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sys_tablesTableAdapter, Me._sys_tablesTableAdapter.Connection)
                    Me._sys_tablesTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._sys_tablesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._sys_tablesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sys_tablesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sys_tablesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._z3TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._z3TableAdapter, Me._z3TableAdapter.Connection)
                    Me._z3TableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._z3TableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._z3TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._z3TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._z3TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._z3_accelerationTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._z3_accelerationTableAdapter, Me._z3_accelerationTableAdapter.Connection)
                    Me._z3_accelerationTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._z3_accelerationTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._z3_accelerationTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._z3_accelerationTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._z3_accelerationTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._z3_dataTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._z3_dataTableAdapter, Me._z3_dataTableAdapter.Connection)
                    Me._z3_dataTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._z3_dataTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._z3_dataTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._z3_dataTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._z3_dataTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._z3_izvTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._z3_izvTableAdapter, Me._z3_izvTableAdapter.Connection)
                    Me._z3_izvTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._z3_izvTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._z3_izvTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._z3_izvTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._z3_izvTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._z3_mehanizmTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._z3_mehanizmTableAdapter, Me._z3_mehanizmTableAdapter.Connection)
                    Me._z3_mehanizmTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._z3_mehanizmTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._z3_mehanizmTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._z3_mehanizmTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._z3_mehanizmTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._z3_mzvTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._z3_mzvTableAdapter, Me._z3_mzvTableAdapter.Connection)
                    Me._z3_mzvTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._z3_mzvTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._z3_mzvTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._z3_mzvTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._z3_mzvTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._z3_speedTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._z3_speedTableAdapter, Me._z3_speedTableAdapter.Connection)
                    Me._z3_speedTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._z3_speedTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._z3_speedTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._z3_speedTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._z3_speedTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._zadaniaTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._zadaniaTableAdapter, Me._zadaniaTableAdapter.Connection)
                    Me._zadaniaTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._zadaniaTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._zadaniaTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._zadaniaTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._zadaniaTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._zd_registerTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._zd_registerTableAdapter, Me._zd_registerTableAdapter.Connection)
                    Me._zd_registerTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._zd_registerTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._zd_registerTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._zd_registerTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._zd_registerTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._zd_studentTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._zd_studentTableAdapter, Me._zd_studentTableAdapter.Connection)
                    Me._zd_studentTableAdapter.Connection = CType(workConnection,Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._zd_studentTableAdapter.Transaction = CType(workTransaction,Global.System.Data.Common.DbTransaction)
                    If Me._zd_studentTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._zd_studentTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._zd_studentTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._dodatok2TableAdapter) Is Nothing) Then
                    Me._dodatok2TableAdapter.Connection = CType(revertConnections(Me._dodatok2TableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._dodatok2TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._instaceTableAdapter) Is Nothing) Then
                    Me._instaceTableAdapter.Connection = CType(revertConnections(Me._instaceTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._instaceTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._lstnTableAdapter) Is Nothing) Then
                    Me._lstnTableAdapter.Connection = CType(revertConnections(Me._lstnTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._lstnTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sqlite_sequenceTableAdapter) Is Nothing) Then
                    Me._sqlite_sequenceTableAdapter.Connection = CType(revertConnections(Me._sqlite_sequenceTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._sqlite_sequenceTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._studentTableAdapter) Is Nothing) Then
                    Me._studentTableAdapter.Connection = CType(revertConnections(Me._studentTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._studentTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sys_tablesTableAdapter) Is Nothing) Then
                    Me._sys_tablesTableAdapter.Connection = CType(revertConnections(Me._sys_tablesTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._sys_tablesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._z3TableAdapter) Is Nothing) Then
                    Me._z3TableAdapter.Connection = CType(revertConnections(Me._z3TableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._z3TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._z3_accelerationTableAdapter) Is Nothing) Then
                    Me._z3_accelerationTableAdapter.Connection = CType(revertConnections(Me._z3_accelerationTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._z3_accelerationTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._z3_dataTableAdapter) Is Nothing) Then
                    Me._z3_dataTableAdapter.Connection = CType(revertConnections(Me._z3_dataTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._z3_dataTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._z3_izvTableAdapter) Is Nothing) Then
                    Me._z3_izvTableAdapter.Connection = CType(revertConnections(Me._z3_izvTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._z3_izvTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._z3_mehanizmTableAdapter) Is Nothing) Then
                    Me._z3_mehanizmTableAdapter.Connection = CType(revertConnections(Me._z3_mehanizmTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._z3_mehanizmTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._z3_mzvTableAdapter) Is Nothing) Then
                    Me._z3_mzvTableAdapter.Connection = CType(revertConnections(Me._z3_mzvTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._z3_mzvTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._z3_speedTableAdapter) Is Nothing) Then
                    Me._z3_speedTableAdapter.Connection = CType(revertConnections(Me._z3_speedTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._z3_speedTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._zadaniaTableAdapter) Is Nothing) Then
                    Me._zadaniaTableAdapter.Connection = CType(revertConnections(Me._zadaniaTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._zadaniaTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._zd_registerTableAdapter) Is Nothing) Then
                    Me._zd_registerTableAdapter.Connection = CType(revertConnections(Me._zd_registerTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._zd_registerTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._zd_studentTableAdapter) Is Nothing) Then
                    Me._zd_studentTableAdapter.Connection = CType(revertConnections(Me._zd_studentTableAdapter),Global.Devart.Data.SQLite.SQLiteConnection)
                    Me._zd_studentTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
